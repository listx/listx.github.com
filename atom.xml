<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Linus's Blog</title>
    <link href="http://funloop.org/atom.xml" rel="self" />
    <link href="http://funloop.org" />
    <id>http://funloop.org/atom.xml</id>
    <author>
        <name>Linus Arver</name>
        <email></email>
    </author>
    <updated>2020-12-05T00:00:00Z</updated>
    <entry>
    <title>The Two Sum Problem Explained</title>
    <link href="http://funloop.org/post/2020-12-05-twosum-problem-explained.html" />
    <id>http://funloop.org/post/2020-12-05-twosum-problem-explained.html</id>
    <published>2020-12-05T00:00:00Z</published>
    <updated>2020-12-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2020-12-05</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2020-12-05-twosum-problem-explained.org" title="History">*</a>
	<br>
	<a href="/tag/algorithms.html">algorithms</a>, <a href="/tag/math.html">math</a>
</div>

<p>Just over three years ago, I watched <a href="https://youtu.be/XKu_SEDAykw">this video</a> that goes over the so-called “Two Sum” problem for the first time. The problem statement is as follows:</p>
<blockquote>
<p>Given a sorted list of integers (unimaginitively called <strong>numbers</strong>), determine if any 2 integers in the list sum up to a number <strong>N</strong>.</p>
</blockquote>
<p>To be honest I did not understand why the proposed optimal solution that uses 2 pointers works the way it does, without missing any possible pairs. The <a href="https://youtu.be/XKu_SEDAykw?t=300">explanation given by the interview candidate in the video</a> always struck me as way too hand-wavy for my tastes.</p>
<p>And to be really honest I never bothered to convince myself that the 2-pointer approach is correct. Until today. This post is about the correctness behind the 2-pointer method, because I have yet to see a clear explanation about this topic.</p>
<h1 id="brute-force-approach">Brute force approach</h1>
<p>First let’s look at the brute-force solution. The brute-force solution looks at every single possible pair of numbers by using a double-for-loop. This is a very common pattern (nested looping) whenever one wants to consider all possible combinations, where each for-loop corresponds to a single “dimension” we want to exhaustively pore over. In this case there are 2 dimensions because there are 2 numbers we need to look at, so we must use 2 for-loops.</p>
<p>Here is the basic pseudocode <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a>:</p>
<pre><code>for i in numbers:
  for j in numbers:
    if i + j == N:
      return i, j
</code></pre>
<p>I think even beginner programmers can see that the brute force approach works. We just look at every possible 2-number combination to see if they will add up to <strong>N</strong>, and if so, we stop the search. Simple! <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<h1 id="pointer-method">2-pointer method</h1>
<p>The 2-pointer method boils down to the following observation:</p>
<blockquote>
<p>Remove numbers from the pairwise search if they cannot be used (with any other number) to sum up to <strong>N</strong>.</p>
</blockquote>
<p>Although the solution posted in countless places online involve pointers, it is more intuitive to think of <em>modifying the list</em> after each pairwise inspection. Below is the algorithm in plain English:</p>
<ol>
<li>Construct a pair of numbers <code>(a, b)</code> such that <code>a</code> is the smallest number and <code>b</code> is the biggest number in the list. That is, these are the leftmost and rightmost ends of the sorted list, respectively.</li>
<li>If the sum of <code>a + b</code> is equal to <strong>N</strong>, of course we’re done.</li>
<li>If the sum of <code>a + b</code> is bigger than <strong>N</strong>, delete <code>b</code> from the list. Go back to Step 1.</li>
<li>If the sum of <code>a + b</code> is smaller than <strong>N</strong>, delete <code>a</code> from the list. Go back to Step 1.</li>
<li>If the list becomes smaller than 2 elements, stop (obviously, because there are no more pairs to consider). Optionally return an error.</li>
</ol>
<p>The algorithm described above can be equivalently coded with pointers, so there is no material difference in “flavor”.</p>
<p>Anyway, we just need to make sense of the critical Steps, namely Steps 3, 4, and 5, and that should be enough to quell any worries about correctness.</p>
<h1 id="step-3">Step 3</h1>
<p>This is the step that removes the largest element <code>b</code> in the list from consideration <em>for all future iterations</em>. How can this be correct?</p>
<p>Well, let’s consider an example. If <strong>N</strong> is 50 but <code>a + b</code> is 85, we have to look for a smaller number. We can’t replace <code>a</code> with the next bigger number (or any other number between <code>a</code> and <code>b</code>), because doing so will result in a sum that is at least as big as 85 (or bigger). And so, we throw out <code>b</code> and replace it with the next biggest number, which is guaranteed to be less than or equal to the just-thrown-out <code>b</code>.</p>
<p>In other words, <em>all pairs</em> of <code>b</code> and every other element in the list already sums up to 85 or some other <em>higher number</em>. So <code>b</code> is a red herring that’s leading us astray. We must throw it out.</p>
<h1 id="step-4">Step 4</h1>
<p>This is the “mirror” of Step 3. Here we throw out the smallest number out of future pairwise searches, because we know that <code>a</code>, no matter which number it is paired with (even with the biggest one, <code>b</code>), is too small to meet the target <strong>N</strong>. In other words, <code>a</code> fails to give enough of a “boost” to <em>any</em> other number to reach <strong>N</strong>. It is very much useless to the remaining other candidates, and so we throw it out.</p>
<h1 id="step-5">Step 5</h1>
<p>This Step’s analogy when using pointers is to consider the condition when the pointers “cross”. The pointers “crossing”, in and of itself, doesn’t seem particularly significant. However when we view this condition by looking at the dwindling size of the overall list (by chopping off the left and right ends in Steps 4 and 3), the point becomes obvious. We must stop when the list becomes too small to make Step 1 impossible to fulfill (namely, the construction of the pair <code>(a, b)</code>), due to the fact that there aren’t enough elements in the list (singleton or empty list).</p>
<h1 id="pointer-method-in-pseudocode">2-pointer method, in pseudocode</h1>
<p>For sake of completeness, here is the pseudocode for the same algorithm. You will see how using pointers (instead of deleting elements outright as described in Steps 3 and 4) doesn’t change the algorithm at all.</p>
<pre><code># Partial implementation of Step 5. Early exit if list is too small.
if length(numbers) &lt; 2:
  return error

# Step 1.
a_idx = 0
b_idx = length(numbers) - 1
sum = numbers[a_idx] + numbers[b_idx]

# Begin search, but only if we have to search.
while sum != N:
  # Step 3
  if sum &gt; N:
    b_idx -= 1
  # Step 4
  elif sum &lt; N:
    a_idx += 1

  # Step 5
  if a_idx == b_idx:
    return error

  # Step 1 (again, because we didn&#39;t find a match above).
  sum = numbers[a_idx] + numbers[b_idx]

# Step 2
return numbers[a_idx], numbers[b_idx]
</code></pre>
<p>It may be of interest to readers who are fairly new to programming that Step 2 comes in at the very end. Getting the “feel” for converting plain-English algorithms into actual code is something that requires experience, and can only be acquired with practice over time.</p>
<h2 id="do-the-pointers-ever-skip-over-each-other">Do the pointers ever skip over each other?</h2>
<p>It is worth pointing out that the condition <code>a_idx == b_idx</code> is well-formed. That is, there will never be a case where <code>a_idx</code> and <code>b_idx</code> will somehow “skip over” each other, rendering the <code>if</code>-condition useless. This is because we only ever increment <code>a_idx</code> or decrement <code>b_idx</code>, <em>exclusively</em> — that is, we never modify both of them within the same iteration. So, the variables only ever change by <code>±1</code>, and at some point, if the search goes on long enough, the indices are bound to converge at the same numerical value.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I think the beauty of this problem is that it’s so simple, and yet it is also a very cool way of looking at the problem of <em>search</em>. Steps 3 and 4 are essentially very aggressive (and correct!) eliminations of bad search paths. There’s just something refreshing about eliminating entire branches of a search tree to speed things up.</p>
<p>If you compare the 2-pointer method with the brute force approach, it is in essence doing the same logical thing, with fewer steps. Whereas the brute force approach performs a pairwise comparison across all possible combinations, the 2-pointer method preemptively discards many combinations by removing elements outright from future consideration. That’s the kind of power you need to go from <span class="math inline">\(O(n^2)\)</span> to <span class="math inline">\(O(n)\)</span>!</p>
<p>Hope this helps!</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Of course, this pseudocode ignores edge-cases, but I didn’t want to clutter the code listing with non-essential ideas.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>As an added benefit, the brute-force approach works even if the input list is not sorted.<a href="#fnref2" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>The Esrille Nisse: Three Years Later</title>
    <link href="http://funloop.org/post/2019-11-13-esrille-nisse-three-years-later.html" />
    <id>http://funloop.org/post/2019-11-13-esrille-nisse-three-years-later.html</id>
    <published>2019-11-13T00:00:00Z</published>
    <updated>2019-11-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2019-11-13</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2019-11-13-esrille-nisse-three-years-later.org" title="History">*</a>
	<br>
	<a href="/tag/hardware.html">hardware</a>, <a href="/tag/esrille.html">esrille</a>, <a href="/tag/cherry%20mx.html">cherry mx</a>
</div>

<p>Over three years ago, I wrote <a href="./2016-04-14-esrille-nisse-keyboard.html">a post</a> describing the Esrille Nisse keyboard. This post is a reflection on the keyboard, more than 3 years later.</p>
<h1 id="layout">Layout</h1>
<p>Ultimately I settled on a different layout than the one described in the old blog post. This was a result of many hands-on trial-and-error sessions over a period of weeks which turned into many months. In my old post I described writing a program to help find the optimal layout. This proved very difficult in practice, because encoding the optimization rules turned out to be non-trivial. One aspect that was particularly difficult was that the actualy physical shape of my own fingers played a part (some fingers were not as versatile as others, for example the pinky finger, and so the key-distance for certain fingers had to have different “weights”, and this was too much to translate into code).</p>
<p>Anyway, I read <a href="https://norvig.com/mayzner.html">this post by Peter Norvig</a> forwards and backwards, and used the values there to guide the design of my layout. One big realization after actual usage was that I could not let go of the QWERTY <code>hjkl</code> keys on the home row. There was just so much muscle memory built into these four keys (the only other key I could not let go of was the spacebar key that I used my left thumb for), that I had to “fix” them on the layout first. I then focused on getting the commonly-used keys right.</p>
<p>All that being said, here is my current layout.</p>
<pre><code>      LEFT-SIDE     RIGHT-SIDE
    ---------------------------
    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ 0 □ □         □ □ 0 □ 1
□ □ □ y o p z 1     2 f d t r □ □ □
2 / a i e u w ;     &quot; h j k l n 4 : &lt;--- Home row
  3 . x q v &#39;         b m g c s 3
      8 5 6 7 4     5 , 6 7 8 &lt;--------- Thumb row


Left-side legend
0) Escape
1) PgDn
2) Enter
3) Shift
4) Control
5) Super (Windows key)
6) Space
7) Caps Lock (remapped with xmodmap to Hyper key)
8) Right Alt (aka &quot;AltGr&quot; for US International Layout)

Right-side legend
0) Tab
1) Delete
2) PgUp
3) Shift
4) Backspace
5) FN2
6) FN
7) Alt
8) Right Alt (aka &quot;AltGr&quot; for US International Layout)
</code></pre>
<p>The main thing to note is the reduced number of keys that are mapped at all. I like this aspect a lot (not having to move my fingers around much at all) — I never have to reach for a particular key because everything is just so close.</p>
<p>I also dedicated a key just for the colon symbol (as a “Shift + semicolon” macro), because it comes up often enough in programming.</p>
<p>I should also note that the function keys (F1-F12) are situated on the topmost row, left-to-right. I just didn’t bother adding them to the legend because of symbol space constraints.</p>
<p>FN layer.</p>
<pre><code>      LEFT-SIDE     RIGHT-SIDE
    ---------------------------
    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ a □ □         □ □ □ □ □
□ □ □ 7 8 9 □ □     □ □ \ _ = □ □ □
□ □ 0 4 5 6 □ b     b - { ( ) } a : &lt;--- Home row
  c . 1 2 3 `         □ [ &lt; &gt; ] c
      □ □ □ □ □     □ □ □ □ □ &lt;--------- Thumb row

Left-side legend
a) ~/ (a macro that inserts the string &quot;~/&quot;)
b) End
c) Shift

Right-side legend
a) Backspace
b) Home
c) Shift
</code></pre>
<p>The FN layer has the majority of the punctuation keys I need. You might notice that some symbols like <code>!@#$&amp;*^</code> are not in here. This is because the numeral keys on the left side are actually the same numeral keys on the top row (<strong>not</strong> the Numpad) of a typical QWERTY layout. This means that I can just press FN+Shift to get these keys. This is the main trick that allowed me to reduce the number of keys used overall.</p>
<p>The “~/” macro in the left side is particularly useful as well.</p>
<p>FN2 layer.</p>
<pre><code>      LEFT-SIDE     RIGHT-SIDE
    ---------------------------
    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ □ □ □         □ □ □ □ □
□ □ □ □ □ □ □ □     □ □ □ □ □ □ □ □
□ □ □ □ □ □ □ □     □ a b c d □ □ □ &lt;--- Home row
  □ □ □ □ □ □         □ □ □ □ e □
      □ □ □ □ □     □ □ □ □ □ &lt;--------- Thumb row


Right-side legend
a) Left Arrow
b) Down Arrow
c) Up Arrow
d) Right Arrow
e) Shift + Insert macro (for pasting X primary buffer)
</code></pre>
<p>This layer is mostly empty, but it is used surprisingly frequently. I really like how the arrow keys line up with my <code>hjkl</code> keys in the main layer.</p>
<p>For the latest changes to my layout, check out <a href="https://github.com/listx/new-keyboard">this repo</a>.</p>
<h1 id="typing-speed">Typing Speed</h1>
<p>It took me roughly 3 months of everyday use to get somewhat familiar with the layout, and probably another month or two to reach upwards of 60wpm.</p>
<p>It was painstakingly slow at first (it felt a lot like learning how to type all over again), but still “fun” because I noticed that I was getting better with time.</p>
<p>I think these days (after having used this keyboard every day for both my home and work PCs (yes, I have two of these!)) I can go higher than 60wpm.</p>
<p>Suffice it to say that there is never a time when I think “oh, I wish I could type faster” on this layout. My speed on this keyboard is about on par as with my old typing speed on QWERTY.</p>
<p>My typing speed on the old QWERTY layout hasn’t really changed. I still have to use it for when I use the keyboard on laptops. And surprisingly, my brain knows to “switch” to QWERTY when I’m typing on there — granted, this instinct took some time to kick in.</p>
<h1 id="was-it-worth-it">Was it worth it?</h1>
<p>Yes.</p>
<p>The biggest thing I love about this layout is that I don’t have to move my right hand around when reaching for the typical “hard” keys on QWERTY (such as `[]{}`). I rarely (if ever) have typos when typing punctuation keys. The numeral keys being just underneath my left hand in a different layer is nice, too.</p>
<p>There are some “downsides” though in everyday life:</p>
<ul>
<li>it’s hard to play games because the key mappings are usually designed for QWERTY;</li>
<li>when I make typos using this layout, they look rather unusual from a “QWERTY” perspective (as a contrived example, I might type “yen” instead of “yes” because the “n” and “s” keys are next to each other on my layout)</li>
</ul>
<p>I don’t really play games that much though, and when I do I am usually on the separate gaming PC that just use a regular QWERTY layout so it’s not really a negative.</p>
<p>I guess the biggest downside of all is that the keyboard form factor on the Nisse is one-of-a-kind on the planet. If Esrille goes under, I would be worried about taking very good care of my keyboards in case one of the components breaks for whatever reason. I imagine that at that point, I would have to just create my own keyboard or make do with a shabby imitation using ErgoDox or some other form factor. I sincerely hope that that day never comes…!</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>Status Update</title>
    <link href="http://funloop.org/post/2019-11-11-status-update.html" />
    <id>http://funloop.org/post/2019-11-11-status-update.html</id>
    <published>2019-11-11T00:00:00Z</published>
    <updated>2019-11-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2019-11-11</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2019-11-11-status-update.org" title="History">*</a>
	<br>
	<a href="/tag/status.html">status</a>
</div>

<p>It’s been another year since my last blog post!</p>
<h1 id="on-work">On work</h1>
<p>I’m still happily employed at Google.</p>
<h1 id="git-book">Git Book</h1>
<p>I’m still working on this project. It is hard because I’m trying to create real repositories and situations that the reader should be able to check out and follow along. Still, I should be able to finish this next year.</p>
<h1 id="programming-languages">Programming Languages</h1>
<p>I’ve started dabbling in Clojure, Rust, and Elixir. This list is not the same list of programming languages in my last post (which mentioned Shen, Rust, Erlang, Idris, and Factor), but it’s something to chew on for quite some time.</p>
<h1 id="future">Future</h1>
<p>I will post again when the Git book is ready. Stay tuned!</p>
]]></summary>
</entry>
<entry>
    <title>Status Update</title>
    <link href="http://funloop.org/post/2018-11-11-status-update.html" />
    <id>http://funloop.org/post/2018-11-11-status-update.html</id>
    <published>2018-11-11T00:00:00Z</published>
    <updated>2018-11-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2018-11-11</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2018-11-11-status-update.org" title="History">*</a>
	<br>
	<a href="/tag/status.html">status</a>
</div>

<p>It’s been a year since my last blog post. Many things have happened since that time.</p>
<p>Below are some of the more interesting items.</p>
<h1 id="imvu-to-google">IMVU to Google</h1>
<p>I got laid off at <a href="https://imvu.com">IMVU</a> in September 2017. It was a difficult time for me as I had become good friends with the people there. After almost 2 months of searching for jobs, I somehow managed to land a job at Google! My title is Release Engineer. I’ve been there almost a year now and I am still happy and excited to work there.</p>
<h1 id="golang">Golang</h1>
<p>I started learning Golang a few months ago, because, I felt that this is the best time to learn it (while I’m employed by Google). I haven’t really done any of the advanced things yet, but I like how the language tries really hard to keep the syntax simple. It’s a lot like C in that regard.</p>
<p>The only pain point in Go for me is the packaging/installation system. The whole opintionated $GOPATH thing just feels a bit clunky because of the shared folder namespace with other projects. But I guess that’s unavoidable in any language’s ecosystem.</p>
<h1 id="git-book">Git Book</h1>
<p>I started writing a short (informal) book on Git. I am using LuaTeX to write it; I started in March 2018 but have yet to cross the 1/2 way mark. Hopefully I’ll get it done before March 2019 rolls around.</p>
<h1 id="haskell-book">Haskell book</h1>
<p>Back in <a href="./2016-01-04-status-update.html">2016’s status update</a> I said that I still planned to finish the Haskell book I was working on. That project is definitely dead. One reason is that due to the rising popularity of the language, I feel that other people have already said what I had meant to say in my book.</p>
<h1 id="shen-rust-erlang-idris-factor">Shen, Rust, Erlang, Idris, Factor</h1>
<p>I’ve grown interested in these languages because well, I feel like they are important. My hope is to find some interesting problems that can be solved idiomatically in each language. That might take years, but, it is my hope that in the future I’ll be able to write about these languages.</p>
<h1 id="https-for-this-site">HTTPS for this site</h1>
<p>Apparently HTTPS support for custom domains on Github have been a thing since earlier this year. I never got around to it but thanks to <a href="https://medium.com/@goelanirudh/add-https-to-your-namecheap-domain-hosted-on-github-pages-d66fd96308b5">this post</a> I finally enabled it.</p>
]]></summary>
</entry>
<entry>
    <title>Useful Manpages</title>
    <link href="http://funloop.org/post/2017-11-11-useful-manpages.html" />
    <id>http://funloop.org/post/2017-11-11-useful-manpages.html</id>
    <published>2017-11-11T00:00:00Z</published>
    <updated>2017-11-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-11-11</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-11-11-useful-manpages.org" title="History">*</a>
	<br>
	<a href="/tag/linux.html">linux</a>, <a href="/tag/git.html">git</a>
</div>

<p>A while ago I discovered that <a href="https://www.reddit.com/r/linux/comments/74msho/til_there_is_a_manpage_for_the_ascii_character_set/">there is a manpage for the ASCII character set</a>. It got a bunch of upvotes, and since then I wondered what other manpages were worth knowing about. Below is a small table of manpages that I found interesting.</p>
<table>
<thead>
<tr class="header">
<th>Manpage</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ascii(7)</code></td>
<td>the ASCII character set (in octal, decimal, and hex)</td>
</tr>
<tr class="even">
<td><code>units(7)</code></td>
<td>megabytes vs mebibytes, etc.</td>
</tr>
<tr class="odd">
<td><code>hier(7)</code></td>
<td>traditional filesystem hierarchy (e.g., <code>/bin</code> vs <code>/usr/bin</code>)</td>
</tr>
<tr class="even">
<td><code>file-hierarchy(7)</code></td>
<td>(systemd) filesystem hierarchy</td>
</tr>
<tr class="odd">
<td><code>operator(7)</code></td>
<td>C operator precedence rules (listed in descending order)</td>
</tr>
<tr class="even">
<td><code>console_codes(4)</code></td>
<td>Linux console escape and control sequences</td>
</tr>
<tr class="odd">
<td><code>terminal-colors.d(5)</code></td>
<td>among other things, ANSI color sequences</td>
</tr>
<tr class="even">
<td><code>boot(7)</code></td>
<td>UNIX System V Release 4 bootup process</td>
</tr>
<tr class="odd">
<td><code>daemon(7)</code></td>
<td>(systemd) how to write/package daemons</td>
</tr>
<tr class="even">
<td><code>proc(5)</code></td>
<td>proc filesystem (<code>/proc</code>)</td>
</tr>
<tr class="odd">
<td><code>ip(7)</code></td>
<td>Linux IPv4 protocol implementation (a bit low-level, but still useful)</td>
</tr>
<tr class="even">
<td><code>ipv6(7)</code></td>
<td>Linux IPv6 protocol implementation</td>
</tr>
<tr class="odd">
<td><code>socket(7)</code></td>
<td>Linux socket interface</td>
</tr>
<tr class="even">
<td><code>unix(7)</code></td>
<td>UNIX domain sockets</td>
</tr>
<tr class="odd">
<td><code>fifo(7)</code></td>
<td>named pipes</td>
</tr>
</tbody>
</table>
<p>Note that you need to run</p>
<pre><code>sudo mandb
</code></pre>
<p>to be able to invoke <code>apropos &lt;SEARCH_TERM&gt;</code> or <code>man -k &lt;SEARCH_TERM&gt;</code> (<code>man -k</code> is equivalent to <code>apropos</code> — see <code>man(1)</code>).</p>
<h2 id="git-specific">Git-specific</h2>
<p>You probably knew already that Git has many manpages dedicated to each of its subcommands, such as <code>git-clone(1)</code> or <code>git-commit(1)</code>, but did you know that it also comes with a suite of tutorials? Behold!</p>
<table>
<thead>
<tr class="header">
<th>Manpage</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>giteveryday(7)</code></td>
<td>the top ~20 useful git commands you should know</td>
</tr>
<tr class="even">
<td><code>gitglossary(7)</code></td>
<td>a glossary of all git concepts (blob object, working tree, etc.)</td>
</tr>
<tr class="odd">
<td><code>gittutorial(7)</code></td>
<td>a high-level view of using git</td>
</tr>
<tr class="even">
<td><code>gittutorial-2(7)</code></td>
<td>explains the object database and index file (git architecture internals)</td>
</tr>
<tr class="odd">
<td><code>gitcore-tutorial(7)</code></td>
<td>like <code>gittutorial-2(7)</code>, but much more detailed</td>
</tr>
<tr class="even">
<td><code>gitworkflows(7)</code></td>
<td>recommended workflows, esp. branching strategies for maintainers</td>
</tr>
</tbody>
</table>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>The Math Behind the Tower of Hanoi Problem</title>
    <link href="http://funloop.org/post/2017-05-13-tower-of-hanoi.html" />
    <id>http://funloop.org/post/2017-05-13-tower-of-hanoi.html</id>
    <published>2017-05-13T00:00:00Z</published>
    <updated>2017-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-05-13</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-05-13-tower-of-hanoi.org" title="History">*</a>
	<br>
	<a href="/tag/math.html">math</a>
</div>

<p>In the very first chapter of the book <a href="https://en.wikipedia.org/wiki/Concrete_Mathematics"><em>Concrete Mathematics</em> 2ed</a> there is a discussion about the <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi">Tower of Hanoi</a>. This post is a distillation of that discussion.</p>
<h1 id="the-problem">The Problem</h1>
<p>There are 3 rods, with 8 discs (with holes) resting on one rod; the discs are sorted in size like a pyramid, with the smallest disc on top. We want to move all discs to another rod, but with the following rules: (1) a move consists of moving a single disc onto a rod; (2) you may never place a bigger disc on top of a smaller one. A question arises — <strong>how many steps are required to move the entire tower of disks onto another rod?</strong></p>
<h1 id="finding-the-recurrence">Finding the Recurrence</h1>
<p>First consider the simplest case, without any discs. Because there are no discs to move, we cannot make any moves, and so the number of steps required is 0. We can write this as</p>
<p><span class="math display">\[
S_0 = 0
\]</span></p>
<p>with <span class="math inline">\(S\)</span> meaning the number of steps and the subscript representing the number of discs in the tower.</p>
<p>Now let’s consider how the problem scales. With 1 disc, the answer is a single step since the one disc is itself the entire tower. With 2 discs, the answer is three steps — one step to move the top (small) disc to another rod, one step to move the big disc to the destination rod, and lastly one step to move the small disc on top of the big disc. With 3 discs, the answer is seven steps — the insight here is that we treat the top two discs exactly the same as the previous problem; so we need 3 moves to move the top two to another rod, then one move to move the biggest disc to the destination rod, then again 3 moves to move the 2-disc sub-tower to the destination rod.</p>
<p>The example with 3 discs is quite telling. We can use the insights gained there to set an upper bound to the number of steps required for the general case of <span class="math inline">\(n\)</span> discs; if we take more steps than this upper bound, we would know that we made mistakes. For a tower of size <span class="math inline">\(n\)</span>, we require <span class="math inline">\(S_{n - 1}\)</span> steps to move all discs except the biggest one, then move the biggest disc, then move the sub-tower on top of that disc with (again) <span class="math inline">\(S_{n - 1}\)</span> steps. So the upper bound is</p>
<p><span class="math display">\[
\begin{equation} \label{eq:recurrence}
  S_n =
  \begin{cases}
    0                   &amp; \text{if } n = 0 \\
    2 * (S_{n - 1}) + 1 &amp; \text{if } n &gt; 0.
  \end{cases}
\end{equation}
\]</span></p>
<p>If that’s the upper bound, then is there a separate formula for the <em>lower bound</em> (optimal solution)? Nope! It’s because there must come a time in solving the puzzle where we move the biggest disc to the destination rod. To get to the biggest disc, we must have moved all discs on top of it to another rod (the sub-tower); and, after having moved the biggest disc, we must move this sub-tower back on top of that rod (back onto the biggest disc). Because of these constraints stemming the definition of the puzzle itself, we know that for <span class="math inline">\(n\)</span> &gt; 0 we must take <em>at least</em> <span class="math inline">\(2 * (S_{n - 1}) + 1\)</span> steps.</p>
<p>The upper and lower bounds agree in their formulation, and this formulation (Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>) is our recurrence. In mathematics, a <a href="https://en.wikipedia.org/wiki/Recurrence_relation">recurrence relation</a> is basically a recursively-defined equation, where a <em>base case</em> in the recurrence defines the starting point. In Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>, the base case is <span class="math inline">\(n = 0\)</span>; for <span class="math inline">\(n &gt; 0\)</span>, we define the number of steps required in a recursive manner.</p>
<p>In our discussion of finding the upper and lower bounds, there were two key concepts — the need to move the biggest disc, and the need to move the sub-tower twice (before and after moving the biggest disc). Our recurrence clearly agrees with these two concepts. The “<span class="math inline">\(+ 1\)</span>” in the non-base case is the step of moving the biggest disc, whereas the <span class="math inline">\(2 * (S_{n - 1})\)</span> is the number of steps required to move the sub-tower <em>twice</em>.</p>
<h1 id="simplifying-the-recurrence">Simplifying the Recurrence</h1>
<p>Recurrences are great, but they are painful to compute. For example, it’s not immediately clear what <span class="math inline">\(S_{11}\)</span> or <span class="math inline">\(S_{54}\)</span> evaluates to. It would be really nice if we could avoid defining <span class="math inline">\(S_n\)</span> recursively.</p>
<p>And this is where math meets science. In the scientific method, we have to come up with a hypothesis and then test that hypothesis with one or more experiments. We can do the same thing here by trying to guess the solution to the recurrence.</p>
<p>For one thing, we know that <span class="math inline">\(S_n\)</span> grows as <span class="math inline">\(n\)</span> grows (it will never be the case that <span class="math inline">\(S_n\)</span> somehow plateaus or decreases down the road). The more discs there are, the more work we have to do, right? So let’s look at small cases to see how the numbers grow, and see if there is a pattern to the growth rate of <span class="math inline">\(S_n\)</span>.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">\(n\)</span></th>
<th style="text-align: center;"><span class="math inline">\(S_n\)</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">15</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">31</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">63</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">127</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">255</td>
</tr>
</tbody>
</table>
<p>We don’t have to actually simulate the puzzle to derive these values; using the recurrence Equation <span class="math inline">\(\ref{eq:recurrence}\)</span> we start off from the first row (the base case) and then calculate our way down, reusing <span class="math inline">\(S_n\)</span> from the previous row as <span class="math inline">\(S_{n - 1}\)</span>. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>Anyway, the values of <span class="math inline">\(S_n\)</span> sure look familiar — especially if we use base 2.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">\(n\)</span></th>
<th style="text-align: right;">binary(<span class="math inline">\(S_n\)</span>)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: right;"><span class="math inline">\(0_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: right;"><span class="math inline">\(1_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: right;"><span class="math inline">\(11_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: right;"><span class="math inline">\(111_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: right;"><span class="math inline">\(1111_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: right;"><span class="math inline">\(11111_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: right;"><span class="math inline">\(111111_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: right;"><span class="math inline">\(1111111_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: right;"><span class="math inline">\(11111111_2\)</span></td>
</tr>
</tbody>
</table>
<p>It looks like our recurrence simplifies to just</p>
<p><span class="math display">\[
\begin{equation} \label{eq:solution}
  S_n = 2^n - 1 \quad \text{for } n \geq 0,
\end{equation}
\]</span></p>
<p>except it is no longer a recurrence as there is no need to define a base case. We’ll call it a <em>solution</em> to the recurrence.</p>
<h1 id="proving-the-solution">Proving the Solution</h1>
<p>Although the empirical evidence looks very good, we have not formally proved that the solution (Equation <span class="math inline">\(\ref{eq:solution}\)</span>) holds for <em>all</em> <span class="math inline">\(n\)</span>. It’s one thing to say that something is true for all <em>observed</em> cases (scientific experiment), and quite another to say that something is true for <em>all</em> cases (mathematical proof).</p>
<p>Can we prove it? Yes! Fortunately for us, Equation <span class="math inline">\(\ref{eq:recurrence}\)</span> lends itself to proof by <a href="https://en.wikipedia.org/wiki/Mathematical_induction">induction</a>. Induction requires you to first prove some number <span class="math inline">\(k_0\)</span> as a starting point (the base case) using some proposition <span class="math inline">\(P\)</span>. Then you prove that <span class="math inline">\(P\)</span> holds for <span class="math inline">\(k + 1\)</span> (the next number); i.e., show that going from <span class="math inline">\(k\)</span> to <span class="math inline">\(k + 1\)</span> does not change <span class="math inline">\(P\)</span>. This is the <em>inductive step</em>. In this way, we prove the “totality” of <span class="math inline">\(P\)</span> as it applies to all numbers in the range <span class="math inline">\([k_0, k_{m}]\)</span> and we are done. <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<p>Here we want to prove that Equation <span class="math inline">\(\ref{eq:solution}\)</span> holds for all <span class="math inline">\(n\)</span> (all natural numbers). <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> For this proof let’s rewrite Equation <span class="math inline">\(\ref{eq:solution}\)</span> to use <span class="math inline">\(k\)</span> instead of <span class="math inline">\(n\)</span>:</p>
<p><span class="math display">\[
\begin{equation} \label{eq:proposition}
  S_k = 2^k - 1 \quad \text{for } k \geq 0.
\end{equation}
\]</span></p>
<p>Equation <span class="math inline">\(\ref{eq:proposition}\)</span> is our proposition <span class="math inline">\(P\)</span>. The base case is easy enough to prove: <span class="math inline">\(S_0 = 0\)</span> because there are no disks to move. For the inductive step, we use the non-base part of our recurrence from Equation <span class="math inline">\(\ref{eq:recurrence}\)</span> to get</p>
<p><span class="math display">\[
  \begin{align}
  S_k &amp;= 2 * (S_{k - 1}) + 1 \label{eq:induct1}
  \end{align}
\]</span></p>
<p>and rewrite it in terms of <span class="math inline">\(k + 1\)</span>:</p>
<p><span class="math display">\[
  \begin{align}
  S_{k + 1} &amp;= 2 * (S_{k}) + 1. \label{eq:induct2}
  \end{align}
\]</span></p>
<p>Now the critical part: we replace <span class="math inline">\(S_k\)</span> with Equation <span class="math inline">\(\ref{eq:proposition}\)</span> (our proposition), because we assume that our proposition is true for all steps up to <span class="math inline">\(k\)</span> (but not <span class="math inline">\(k + 1\)</span>, which is what we’re trying to prove):</p>
<p><span class="math display">\[
  \begin{align}
  S_{k + 1} &amp;= 2 * (2^k - 1) + 1.
  \end{align}
\]</span></p>
<p>In case you forgot algebra, <span class="math inline">\(2 * 2^k = 2^1 * 2^k = 2^{k + 1}\)</span> and we can use this to simplify our equation.</p>
<p><span class="math display">\[
  \begin{align}
  S_{k + 1} &amp;= 2 * (2^k - 1) + 1\\
  &amp;= [2 * (2^k - 1)] + 1\\
  &amp;= [(2 * 2^k - 2)] + 1\\
  &amp;= (2^{k + 1} - 2) + 1\\
  &amp;= 2^{k + 1} - 1 \label{eq:induct3}.
  \end{align}
\]</span></p>
<p>And now we can see that Equation <span class="math inline">\(\ref{eq:induct3}\)</span> (our “evolved” proposition <span class="math inline">\(P\)</span>, if you will) is the same as our solution (Equation <span class="math inline">\(\ref{eq:solution}\)</span>), even though we increased <span class="math inline">\(k\)</span> to <span class="math inline">\(k + 1\)</span>! This is because simple substitution allows us to replace “<span class="math inline">\(k + 1\)</span>” with “<span class="math inline">\(n\)</span>”. We have completed our proof by induction. <a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a></p>
<h1 id="alternate-recurrence-and-solution">Alternate Recurrence and Solution</h1>
<p>The book goes on to offer an alternate recurrence to Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>, by adding 1 to both sides:</p>
<p><span class="math display">\[
\begin{align}
  (S_n) + 1 &amp;=
  \begin{cases}
    0 + 1                   &amp; \text{if } n = 0 \\
    2 * (S_{n - 1}) + 1 + 1 &amp; \text{if } n &gt; 0 \\
  \end{cases}\\
          &amp;=
  \begin{cases}
    1                   &amp; \text{if } n = 0 \\
    2 * (S_{n - 1}) + 2 &amp; \text{if } n &gt; 0. \label{eq:recurrence2}
  \end{cases}
\end{align}
\]</span></p>
<p>This recurrence is the same as the original, except that it adds 1 to the answer. Now we let <span class="math inline">\(W_n = (S_n) + 1\)</span> and <span class="math inline">\(W_{n - 1} = (S_{n - 1}) + 1\)</span> and rewrite everything in terms of <span class="math inline">\(W\)</span>:</p>
<p><span class="math display">\[
\begin{align}
  W_n &amp;=
  \begin{cases}
    1                   &amp; \text{if } n = 0 \\
    2 * (W_{n - 1})     &amp; \text{if } n &gt; 0. \label{eq:recurrence3}
  \end{cases}
\end{align}
\]</span></p>
<p>Notice how the “<span class="math inline">\( + 2\)</span>” in Equation <span class="math inline">\(\ref{eq:recurrence2}\)</span> goes away, because the coefficient <span class="math inline">\(2\)</span> in Equation <span class="math inline">\(\ref{eq:recurrence3}\)</span> will multiply with the “<span class="math inline">\( + 1\)</span>” from <span class="math inline">\(W_{n - 1}\)</span> to get it back. Using this alternate recurrence, it’s easy to see that the solution is just <span class="math inline">\(W_n = 2^n\)</span>, because <span class="math inline">\(W\)</span> can only grow by multiplying <span class="math inline">\(2\)</span> to itself! Hence</p>
<p><span class="math display">\[
\begin{align}
W_n = (S_n) + 1 = 2^n
\end{align}
\]</span></p>
<p>and subtracting 1 from all sides gives us</p>
<p><span class="math display">\[
\begin{align}
(W_n) - 1 =S_n = 2^n - 1.
\end{align}
\]</span></p>
<p>The lesson here is that if it is difficult to find the solution to a recurrence, we can use basic algebra rules to transform the recurrence to something more amenable. In this case, all it took was adding 1 to the original recurrence.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I thoroughly enjoyed figuring this stuff out because possibly for the first time in my life I used my programming experience (recurrence/recursion, memoization) to help myself understand mathematics — not the other way around. The other way around was never enjoyable — calculating what <code>i</code> was in some <span class="math inline">\(n\)</span>th iteration of a <code>for</code>-loop never really excited me.</p>
<p>I hope this explanation helps you better understand the first few pages of <em>Concrete Mathematics</em>; I had to read that part three times over to really “get it” (never having learned what induction is). And henceforth, I will never look at a string of consecutive 1’s in binary the same way again. 😃</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>In computer science, this process of avoiding the recalculation of previously known values is called <em>memoization</em> and is useful in generating the first N values of a recursive algorithm in <span class="math inline">\(O(N)\)</span> (linear) time.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>Note that if <span class="math inline">\(k_0 = 0\)</span>, then <span class="math inline">\([k_0, k_{m}]\)</span> is the set of all natural numbers (zero plus the positive integers).<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>There is no need to prove the recurrence (Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>) as we have already proved it in the process of deriving it.<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>In <em>Concrete Mathematics</em> 2 ed. p. 3 (where the book uses <span class="math inline">\(T_n\)</span> instead of <span class="math inline">\(S_n\)</span>), the proof is simply a one-liner: <span class="math display">\[
T_n = 2(T_{n - 1}) + 1 = 2(2^{n - 1} - 1) + 1 = 2^n - 1.
\]</span> But I find it a bit too terse for my tastes.<a href="#fnref4" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>The Fastest Way to Compute the Nth Fibonacci Number: The Doubling Method</title>
    <link href="http://funloop.org/post/2017-04-14-computing-fibonacci-numbers.html" />
    <id>http://funloop.org/post/2017-04-14-computing-fibonacci-numbers.html</id>
    <published>2017-04-14T00:00:00Z</published>
    <updated>2017-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-04-14</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-04-14-computing-fibonacci-numbers.org" title="History">*</a>
	<br>
	<a href="/tag/math.html">math</a>, <a href="/tag/programming.html">programming</a>, <a href="/tag/python.html">python</a>
</div>

<h1 id="introduction">Introduction</h1>
<p>The Fibonacci Sequence is defined as follows:</p>
<p><span class="math display">\[
\begin{align}
\mathrm{F}_{0} = 0\\
\mathrm{F}_{1} = 1\\
\mathrm{F}_{n} = \mathrm{F}_{n - 2} + \mathrm{F}_{n - 1}.
\end{align}
\]</span></p>
<p>That is, each Fibonacci number <span class="math inline">\(\mathrm{F}_{n}\)</span> is the sum of the previous two Fibonacci numbers, except the very first two numbers which are defined to be 0 and 1. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>From the definition above, it appears that computing <span class="math inline">\(\mathrm{F}_{n}\)</span> requires one to always compute <span class="math inline">\(\mathrm{F}_{n - 2}\)</span> and <span class="math inline">\(\mathrm{F}_{n - 1}\)</span>. <strong>This is false:</strong> enter the “doubling method”. <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a></p>
<h1 id="the-genesis-of-the-doubling-method">The Genesis of the Doubling Method</h1>
<p>The doubling method uses a couple of mathematical formulas derived from matrix multiplication as it applies to calculating Fibonacci numbers; it can be seen as an improvement over the matrix multiplication method, although it does not use matrix multplication itself. The matrix multiplication method uses the following formula:</p>
<p><span class="math display">\[
\begin{equation}
\begin{bmatrix}
1 &amp; 1\\
1 &amp; 0
\end{bmatrix}^n
=
\begin{bmatrix}
\mathrm{F}_{n + 1} &amp; \mathrm{F}_{n}\\
\mathrm{F}_{n} &amp; \mathrm{F}_{n - 1}
\end{bmatrix}.
\end{equation}
\]</span></p>
<p>This result is quite interesting in its own right; to find <span class="math inline">\(\mathrm{F}_{n}\)</span> you only need to raise the matrix</p>
<p><span class="math display">\[
\begin{bmatrix}
1 &amp; 1\\
1 &amp; 0
\end{bmatrix}
\]</span></p>
<p>to the <span class="math inline">\(n\)</span>th power. To be more precise, this method is matrix <em>exponentiation</em>. The only downside is that much of the answer is wasted — we don’t care about <span class="math inline">\(\mathrm{F}_{n - 1}\)</span>, not to mention how <span class="math inline">\(\mathrm{F}_{n}\)</span> is redundantly computed twice.</p>
<h2 id="thinking-in-terms-of-mathrmf_n">Thinking in Terms of <span class="math inline">\(\mathrm{F}_{n}\)</span></h2>
<p>What if we could find <span class="math inline">\(\mathrm{F}_{n}\)</span> not by multiplying or adding some numbers, but by multiplying and adding <em>other Fibonacci terms</em>? Of course, we’re not talking about adding <span class="math inline">\(\mathrm{F}_{n - 2}\)</span> and <span class="math inline">\(\mathrm{F}_{n - 1}\)</span> because that would be too slow. Let’s have a look at the matrix identity again (reversed for easier reading):</p>
<p><span class="math display">\[
\begin{equation}
\begin{bmatrix}
\mathrm{F}_{n + 1} &amp; \mathrm{F}_{n}\\
\mathrm{F}_{n} &amp; \mathrm{F}_{n - 1}
\end{bmatrix}
=
\begin{bmatrix}
1 &amp; 1\\
1 &amp; 0
\end{bmatrix}^n.
\end{equation}
\]</span></p>
<p>If we substitute in <span class="math inline">\(2n\)</span> for <span class="math inline">\(n\)</span>, we get</p>
<p><span class="math display">\[
\begin{align}
\begin{bmatrix}
\mathrm{F}_{2n + 1} &amp; \mathrm{F}_{2n}\\
\mathrm{F}_{2n} &amp; \mathrm{F}_{2n - 1}
\end{bmatrix}
&amp; =
  \begin{bmatrix}
  1 &amp; 1\\
  1 &amp; 0
  \end{bmatrix}^{2n} \\
&amp; =
  \bigg(\begin{bmatrix}
  1 &amp; 1\\
  1 &amp; 0
  \end{bmatrix}^{n}\bigg)^2
\end{align}
\]</span></p>
<p>and we can substitute in our matrix identity from above to rewrite this as</p>
<p><span class="math display">\[
\begin{align}
&amp; =
  \bigg(\begin{bmatrix}
  \mathrm{F}_{n + 1} &amp; \mathrm{F}_{n}\\
  \mathrm{F}_{n} &amp; \mathrm{F}_{n - 1}
  \end{bmatrix}\bigg)^2
\end{align}
\]</span></p>
<p>and carry out the squaring to get</p>
<p><span class="math display">\[
\begin{align}
&amp; =
  \begin{bmatrix}
  {{\mathrm{F}_{n + 1}}^2 + {\mathrm{F}_{n}}^2} &amp; {{\mathrm{F}_{n + 1}\mathrm{F}_{n}} + {\mathrm{F}_{n}\mathrm{F}_{n - 1}}}\\
  {{\mathrm{F}_{n}\mathrm{F}_{n + 1}} + {\mathrm{F}_{n - 1}\mathrm{F}_{n}}} &amp; {{\mathrm{F}_{n}}^2 + {\mathrm{F}_{n - 1}}^2}
  \end{bmatrix}.
\end{align}
\]</span></p>
<p>The top right and bottom left terms are identical; we can also rewrite them to be a bit simpler.</p>
<p><span class="math display">\[
\begin{align}
  {{\mathrm{F}_{n + 1}\mathrm{F}_{n}} + {\mathrm{F}_{n}\mathrm{F}_{n - 1}}}
&amp; =
  \mathrm{F}_{n}(\mathrm{F}_{n + 1} + \mathrm{F}_{n - 1}) \\
&amp; =
  \mathrm{F}_{n}[\mathrm{F}_{n + 1} + (\mathrm{F}_{n + 1} - \mathrm{F}_{n})] \\
&amp; =
  \mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n}).
\end{align}
\]</span></p>
<p>This simplication achieves an important task — it obviates <span class="math inline">\(\mathrm{F}_{n - 1}\)</span> by cleverly defining it as <span class="math inline">\(\mathrm{F}_{n + 1} - \mathrm{F}_{n}\)</span>. Putting everything together, whe have</p>
<p><span class="math display">\[
\begin{align}
\begin{bmatrix}
\mathrm{F}_{2n + 1} &amp; \mathrm{F}_{2n}\\
\mathrm{F}_{2n} &amp; \mathrm{F}_{2n - 1}
\end{bmatrix}
&amp; =
  \begin{bmatrix}
  {{\mathrm{F}_{n + 1}}^2 + {\mathrm{F}_{n}}^2} &amp; {\mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n})}\\
  {\mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n})} &amp; {{\mathrm{F}_{n}}^2 + {\mathrm{F}_{n - 1}}^2}
  \end{bmatrix}
\end{align}
\]</span></p>
<p>where the first row (or column) gives us two very useful identities</p>
<p><span class="math display">\[
\begin{align}
\mathrm{F}_{2n}
&amp; =
  {\mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n})} \\
\mathrm{F}_{2n + 1}
&amp; =
  {{\mathrm{F}_{n}}^2 + {\mathrm{F}_{n + 1}}^2}.
\end{align}
\]</span></p>
<p>As these identities form the heart of the doubling method, let’s call them the <em>doubling identities</em>.</p>
<p>And now we just need one more piece to formulate our doubling method; we need to borrow an idea from number theory. Given any positive integer <span class="math inline">\(n\)</span>, it is the same as either <span class="math inline">\(2m\)</span> (even) or <span class="math inline">\(2m + 1\)</span> (odd), where <span class="math inline">\(m = \lfloor\frac{n}{2}\rfloor\)</span>; for our purposes, let us call this property the “halving property”.</p>
<p>Whereas the doubling identities allow us to “double” our way into bigger numbers, the halving property allows us to halve our way down to smaller and smaller numbers. The marriage of these two concepts gives rise to the doubling method.</p>
<h1 id="the-doubling-method">The Doubling Method</h1>
<p>To compute the <span class="math inline">\(n\)</span>th Fibonacci term we break <span class="math inline">\(n\)</span> itself down into its halves (<span class="math inline">\(2m\)</span>) recursively, until we go down to <span class="math inline">\(n = 0\)</span>. At this point we multiply our way back up using the doubling identities. Because halving and doubling by themselves always calculate <span class="math inline">\(\mathrm{F}_{2m}\)</span>, we have to manually return <span class="math inline">\(\mathrm{F}_{2m + 1}\)</span> if our current sequence index number <span class="math inline">\(n\)</span> is odd.</p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling.py" mimetype=text/plain >fibonacci-doubling.py</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb1" data-input="code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling.py"><pre class="sourceCode numberSource numberLines python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">def</span> fibonacci_doubling(n):</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="co">&quot;&quot;&quot; Calculate the Nth Fibonacci number using the doubling method. &quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="cf">return</span> _fibonacci_doubling(n)[<span class="dv">0</span>]</a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5"></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">def</span> _fibonacci_doubling(n):</a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="co">&quot;&quot;&quot; Calculate Nth Fibonacci number using the doubling method. Return the</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="co">    tuple (F(n), F(n+1)).&quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span>:</a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="cf">return</span> (<span class="dv">0</span>, <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb1-12" title="12">        a, b <span class="op">=</span> _fibonacci_doubling(n <span class="op">&gt;&gt;</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-13" title="13">        c <span class="op">=</span> a <span class="op">*</span> ((b <span class="op">&lt;&lt;</span> <span class="dv">1</span>) <span class="op">-</span> a)</a>
<a class="sourceLine" id="cb1-14" title="14">        d <span class="op">=</span> a <span class="op">*</span> a <span class="op">+</span> b <span class="op">*</span> b</a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="cf">if</span> n <span class="op">&amp;</span> <span class="dv">1</span>:</a>
<a class="sourceLine" id="cb1-16" title="16">            <span class="cf">return</span> (d, c <span class="op">+</span> d)</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb1-18" title="18">            <span class="cf">return</span> (c, d)</a>
<a class="sourceLine" id="cb1-19" title="19"></a>
<a class="sourceLine" id="cb1-20" title="20"></a>
<a class="sourceLine" id="cb1-21" title="21"><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="cf">for</span> n <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">20</span>):</a>
<a class="sourceLine" id="cb1-23" title="23">        <span class="bu">print</span>(fibonacci_doubling(n))</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="co"># As a demonstration of this algorithm&#39;s speed, here is a large n.</span></a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="bu">print</span>(fibonacci_doubling(<span class="dv">10000</span>))</a></code></pre></div>
</div>
<p>Line 12 is where we do the halving. We use the right-shift operator to do this. Lines 13 and 14 are our doubling identities (I use the left-shift operator here because it feels more natural to me). The if-condition on line 15 returns <span class="math inline">\(\mathrm{F}_{2m + 1}\)</span> if <span class="math inline">\(n\)</span> was odd, and <span class="math inline">\(\mathrm{F}_{2m}\)</span> otherwise.</p>
<p>For comparison, here is an iterative version. On the one hand it avoids Python’s recursion limit, but the downside is a small loss of elegance (we have to loop twice — first to build up the halving/doubling points, and again for the main loop).</p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling-iter.py" mimetype=text/plain >fibonacci-doubling-iter.py</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb2" data-input="code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling-iter.py"><pre class="sourceCode numberSource numberLines python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">def</span> fibonacci_doubling_iter(n):</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="co">&quot;&quot;&quot; Calculate Nth Fibonacci number using the doubling method, using</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="co">    iteration. &quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb2-4" title="4">    ns <span class="op">=</span> []</a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="cf">while</span> n:</a>
<a class="sourceLine" id="cb2-6" title="6">        ns.extend([n])</a>
<a class="sourceLine" id="cb2-7" title="7">        n <span class="op">&gt;&gt;=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9">    a, b <span class="op">=</span> <span class="dv">0</span>, <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-10" title="10"></a>
<a class="sourceLine" id="cb2-11" title="11">    <span class="cf">while</span> ns:</a>
<a class="sourceLine" id="cb2-12" title="12">        n <span class="op">=</span> ns.pop()</a>
<a class="sourceLine" id="cb2-13" title="13">        c <span class="op">=</span> a <span class="op">*</span> ((b <span class="op">&lt;&lt;</span> <span class="dv">1</span>) <span class="op">-</span> a)</a>
<a class="sourceLine" id="cb2-14" title="14">        d <span class="op">=</span> a <span class="op">*</span> a <span class="op">+</span> b <span class="op">*</span> b</a>
<a class="sourceLine" id="cb2-15" title="15">        <span class="cf">if</span> n <span class="op">&amp;</span> <span class="dv">1</span>:</a>
<a class="sourceLine" id="cb2-16" title="16">            a, b <span class="op">=</span> d, c <span class="op">+</span> d</a>
<a class="sourceLine" id="cb2-17" title="17">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb2-18" title="18">            a, b <span class="op">=</span> c, d</a>
<a class="sourceLine" id="cb2-19" title="19"></a>
<a class="sourceLine" id="cb2-20" title="20">    <span class="cf">return</span> a</a></code></pre></div>
</div>
<h1 id="conclusion">Conclusion</h1>
<p>I hope you enjoyed reading about this method of calculationg Fibonacci numbers as much as I enjoyed learning the math behind it. This algorithm can be sped up if it uses a faster multiplication algorithm as <code>a</code> and <code>b</code> get very large (e.g., Karatsuba multiplication). <a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a> Time complexity is <span class="math inline">\(\Theta(\log{n})\)</span>; it reminds me of the binary search algorithm, in how the problem space is halved repeatedly. Neat!</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>We can choose to define the first two terms as 1 and 1 instead, but this distinction is needlessly arbitrary.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>There is actually a known formula for our purposes, where <span class="math display">\[ \mathrm{F}_{n} = \frac{\varphi^n - (-\varphi)^{-n}}{2\varphi - 1}\]</span> and <span class="math inline">\(\varphi = \frac{1 + \sqrt{5}}{2} \approx 1.6180339887\cdots\)</span> (the golden ratio). Unfortunately this requires arbitrary-precision floating point calculations.<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>For more discussion, see <a href="https://www.nayuki.io/page/fast-fibonacci-algorithms" class="uri">https://www.nayuki.io/page/fast-fibonacci-algorithms</a>.<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>Python already uses Karatsuba multiplication natively for large integers.<a href="#fnref4" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Calling C from Haskell</title>
    <link href="http://funloop.org/post/2017-04-02-calling-c-from-haskell.html" />
    <id>http://funloop.org/post/2017-04-02-calling-c-from-haskell.html</id>
    <published>2017-04-02T00:00:00Z</published>
    <updated>2017-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-04-02</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-04-02-calling-c-from-haskell.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/haskell.html">haskell</a>
</div>

<p>Yesterday I made a minimal working example of calling C from Haskell, where I call a simple C function to compute the greatest common denominator, or “GCD”. The Haskell portion only serves as a wrapper around the C function. This post is a brief look at the whole setup.</p>
<h1 id="the-setup">The Setup</h1>
<p>I used <code>ghc</code> 8.0.1, and <code>gcc</code> 5.4.0. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<h2 id="folder-structure">Folder Structure</h2>
<pre><code>2017-04-02-calling-c-from-haskell
├── build.sh
├── c
│   ├── gcd.c
│   └── gcd.h
└── hs
    ├── ffi.hs
    └── GCD.hs

2 directories, 5 files
</code></pre>
<h2 id="file-contents">File Contents</h2>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/c/gcd.h" mimetype=text/plain >gcd.h</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb2" data-input="code/2017-04-02-calling-c-from-haskell/c/gcd.h"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><a class="sourceLine" id="cb2-1" title="1">int gcd(int m, int r);</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/c/gcd.c" mimetype=text/plain >gcd.c</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb3" data-input="code/2017-04-02-calling-c-from-haskell/c/gcd.c"><pre class="sourceCode numberSource numberLines c"><code class="sourceCode c"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&quot;gcd.h&quot;</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="co">/* Find greatest common divisor. */</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="dt">int</span> gcd(<span class="dt">int</span> m, <span class="dt">int</span> r)</a>
<a class="sourceLine" id="cb3-5" title="5">{</a>
<a class="sourceLine" id="cb3-6" title="6">	<span class="cf">if</span> (r == <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb3-7" title="7">		<span class="cf">return</span> m;</a>
<a class="sourceLine" id="cb3-8" title="8"></a>
<a class="sourceLine" id="cb3-9" title="9">	<span class="cf">return</span> gcd(r, m % r);</a>
<a class="sourceLine" id="cb3-10" title="10">}</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/hs/GCD.hs" mimetype=text/plain >GCD.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb4" data-input="code/2017-04-02-calling-c-from-haskell/hs/GCD.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">module</span> <span class="dt">GCD</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">import</span> <span class="dt">Foreign</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">import</span> <span class="dt">Foreign.C.Types</span></a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6">foreign <span class="kw">import</span> ccall &quot;gcd&quot;</a>
<a class="sourceLine" id="cb4-7" title="7"><span class="ot">  c_gcd ::</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">CInt</span></a>
<a class="sourceLine" id="cb4-8" title="8"></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="ot">f_gcd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb4-10" title="10">f_gcd a b <span class="fu">=</span> <span class="fu">fromIntegral</span> <span class="fu">$</span> c_gcd (<span class="fu">fromIntegral</span> a) (<span class="fu">fromIntegral</span> b)</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/hs/ffi.hs" mimetype=text/plain >ffi.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb5" data-input="code/2017-04-02-calling-c-from-haskell/hs/ffi.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">import</span> <span class="dt">GCD</span></a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-4" title="4">main <span class="fu">=</span> <span class="fu">mapM_</span> (<span class="fu">print</span> <span class="fu">.</span> <span class="fu">uncurry</span> f_gcd) [(<span class="dv">8</span>, <span class="dv">12</span>), (<span class="dv">30</span>, <span class="dv">105</span>), (<span class="dv">24</span>, <span class="dv">108</span>)]</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/build.sh" mimetype=text/plain >build.sh</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb6" data-input="code/2017-04-02-calling-c-from-haskell/build.sh"><pre class="sourceCode numberSource numberLines bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" title="1"><span class="co">#!/usr/bin/env bash</span></a>
<a class="sourceLine" id="cb6-2" title="2"></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="bu">pushd</span> c</a>
<a class="sourceLine" id="cb6-4" title="4"><span class="fu">gcc</span> -c -o gcd.o gcd.c</a>
<a class="sourceLine" id="cb6-5" title="5"><span class="bu">popd</span></a>
<a class="sourceLine" id="cb6-6" title="6"></a>
<a class="sourceLine" id="cb6-7" title="7"><span class="bu">pushd</span> hs</a>
<a class="sourceLine" id="cb6-8" title="8"><span class="ex">ghc</span> --make ffi.hs ../c/gcd.o</a>
<a class="sourceLine" id="cb6-9" title="9"><span class="bu">popd</span></a></code></pre></div>
</div>
<h1 id="discussion">Discussion</h1>
<p>To compile the example, run the <code>build.sh</code> script. Here is the expected output of the built executable:</p>
<pre><code> $ ./hs/ffi
4
15
12
</code></pre>
<p>. The <code>gcd()</code> C function is easy to work with because it is a pure function without side effects. You can run the <code>ffi</code> binary against <code>valgrind</code> to make sure that we are not leaking any memory (sample output below).</p>
<pre><code> $ valgrind --error-exitcode=1 --leak-check=yes ./hs/ffi
==14582== Memcheck, a memory error detector
==14582== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==14582== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==14582== Command: ./hs/ffi
==14582==
==14582== Warning: set address range perms: large range [0x4200000000, 0x14200100000) (noaccess)
4
15
12
==14582==
==14582== HEAP SUMMARY:
==14582==     in use at exit: 0 bytes in 0 blocks
==14582==   total heap usage: 48 allocs, 48 frees, 60,006 bytes allocated
==14582==
==14582== All heap blocks were freed -- no leaks are possible
==14582==
==14582== For counts of detected and suppressed errors, rerun with: -v
==14582== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
</code></pre>
<h2 id="caveats">Caveats</h2>
<p>Below are some things I tried, but could not get to work.</p>
<ul>
<li>I tried to delete the <code>gcd.c</code> file by moving the function definition in <code>gcd.c</code> to <code>gcd.h</code> (and delete <code>gcd.c</code> entirely). I compiled the object file with <code>gcc -c -Wall -Wextra -Werror -o gcd.o gcd.h</code> but then I got this error:</li>
</ul>
<pre><code> $ ghc --make ffi.hs ../c/gcd.o
[1 of 2] Compiling GCD              ( GCD.hs, GCD.o )
[2 of 2] Compiling Main             ( ffi.hs, ffi.o )
Linking ffi ...
../c/gcd.o: file not recognized: File format not recognized
collect2: error: ld returned 1 exit status
`cc&#39; failed in phase `Linker&#39;. (Exit code: 1)
</code></pre>
<ul>
<li>In <code>GCD.hs</code> you can see the line <code>foreign import ccall &quot;gcd.h gcd&quot;﻿</code>. Instinctively I thought that the <code>gcd.h</code> in <code>﻿&quot;gcd.h gcd&quot;﻿</code> served as a kind of disambiguator, for where the <code>gcd()</code> function came from. So then I defined another function named <code>gcd()</code> in a different C header file (<code>gcd_other.h</code>), compiled it separately, but got a “multple definition” error:</li>
</ul>
<pre><code> $ ghc --make ffi.hs ../c/gcd.o ../c/gcd_other.o
[1 of 2] Compiling GCD              ( GCD.hs, GCD.o )
[2 of 2] Compiling Main             ( ffi.hs, ffi.o )
Linking ffi ...
../c/gcd_other.o: In function `gcd&#39;:
gcd_other.c:(.text+0x0): multiple definition of `gcd&#39;
../c/gcd.o:gcd.c:(.text+0x0): first defined here
collect2: error: ld returned 1 exit status
`cc&#39; failed in phase `Linker&#39;. (Exit code: 1)
</code></pre>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>The version of gcc should not matter at all – actually, any decent C compiler should work.<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Open-sourcing My Dotfiles</title>
    <link href="http://funloop.org/post/2016-12-04-open-sourcing-my-dotfiles.html" />
    <id>http://funloop.org/post/2016-12-04-open-sourcing-my-dotfiles.html</id>
    <published>2016-12-04T00:00:00Z</published>
    <updated>2016-12-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-12-04</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-12-04-open-sourcing-my-dotfiles.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>
</div>

<h1 id="newsflash">Newsflash!</h1>
<p>I just open-sourced my dotfiles! The repo is probably one of the older Git repos out there and has over 2000 commits! The <a href="https://github.com/listx/syscfg/commit/7ef106b306c1f2a5a7f622f67f1571976e8097ef">first commit</a> was made in March 10, 2009, over 7 years ago. Mind you, even by that time I had accumulated a whole suite of configs, and I even had an exotic setup with XMonad 0.8.1!</p>
<p>Here are some takeaways:</p>
<h2 id="maintain-clean-meaningful-commit-history">Maintain clean, meaningful commit history</h2>
<p>It’s nice to have clean commit history — every line of code can answer <strong>why</strong> it exists. You are doing yourself a disservice (in the long run) if you have overly terse commit messages. Generally speaking, be as verbose as you can be, but within reason. Keeping the first line of the commit message down to less than 80 characters goes a long way in setting the tone for any auxiliary paragraphs that follow.</p>
<p>I am quite proud of the richness of my commit messages. Pretty much everything makes sense and I don’t have to use Google to reason about my choices.</p>
<h2 id="keep-your-build-system-simple">Keep your build system simple</h2>
<p>I’ve used a stupidly simple build system of creating symlinks to “install” my configuration — all with the help of a single <code>Makefile</code>. It’s not very flexible, and to be honest my Shell sklls are much better than what they used to be such that I could replace this setup with a script. But alas, the need for such a change has not been serious enough to warrant it.</p>
<p>Moreover, having a simple “build” system ensures robustness; the more I get older, the more I value systems that have a long “bit-rot halflife”. I admire Knuth’s TEX system for this very same reason. And this is the same reason why I will probably not use anything higher-level than a shell script for the job.</p>
<h2 id="delete-dead-code">Delete dead code</h2>
<p>Every long-living code repository ends up collecting clutter over the years. It’s important to delete such code (and of course any corresponding comments), to keep the codebase nimble. Ultimately, the less code you have to maintain, the better.</p>
<h2 id="dont-settle">Don’t settle</h2>
<p>Software evolves. Always be on the lookout for better software, and new ways to configure them! Leverage the power of open source (free upgrades!) and make it work for you.</p>
<h1 id="do-you-track-your-configs">Do you track your configs?</h1>
<p>If not, you should definitely consider it — what have you got to lose? Keeping a configuration repo (distributed across home computers) is probably the best way for you to learn how to use a distributed source control system; indeed it was how I learned to use Git properly.</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>Replaying Vim Macros</title>
    <link href="http://funloop.org/post/2016-12-03-vim-macro-replay.html" />
    <id>http://funloop.org/post/2016-12-03-vim-macro-replay.html</id>
    <published>2016-12-03T00:00:00Z</published>
    <updated>2016-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-12-03</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-12-03-vim-macro-replay.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/emacs.html">emacs</a>, <a href="/tag/vim.html">vim</a>
</div>

<p>I’ve been using Vim (and now, Emacs with Evil mode) for years — and still, every once in a while I get a pleasant surprise. Today I learned that you can replay macros from Visual Line mode! So you don’t always have to record something like <code>j0</code> at the end of your macro to get down to the next line. I.e., after recording your macro for just 1 line, select other lines that you want to replay the macro against with Visual Line mode (<code>V</code>). To replay, do</p>
<pre><code>:&#39;&lt;,&#39;&gt;g/^/norm @q
</code></pre>
<p>(assuming that you recorded your macro into the <code>q</code> register with <code>qq...q</code>).</p>
<p>Thanks to <a href="https://twitter.com/chris_mccord/status/530770735107547136">Chris McCord</a> for the tip (seek to about 3:20 in the <a href="https://youtu.be/3wAeFiGv_yE?t=3m20s">video</a>).</p>
]]></summary>
</entry>

</feed>
