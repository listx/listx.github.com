<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Linus's Blog</title>
    <link href="http://listx.github.io/atom.xml" rel="self" />
    <link href="http://listx.github.io" />
    <id>http://listx.github.io/atom.xml</id>
    <author>
        <name>Linus Arver</name>
        <email></email>
    </author>
    <updated>2014-09-22T00:00:00Z</updated>
    <entry>
    <title>The Parking Lot Problem: A Successor to FizzBuzz?</title>
    <link href="http://listx.github.io/post/2014-09-22-parking-lot-problem.html" />
    <id>http://listx.github.io/post/2014-09-22-parking-lot-problem.html</id>
    <published>2014-09-22T00:00:00Z</published>
    <updated>2014-09-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-09-22</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-09-22-parking-lot-problem.md" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/ruby.html">ruby</a>, <a href="/tag/haskell.html">haskell</a>
</div>

<p>In one of my side projects, I encountered a pair of interesting problems, the first of which which I call the <em>Parking Lot</em> problem, and the sister problem the <em>Parking Load</em> problem. They are but toy problems, but to anyone outside of the programming field, they sound quite complicated!</p>
<p>I’ve provided “Expected Output” sections for you to try out your own solutions against, so don’t be too aggressive with the scrollbar if you want to quiz yourself!</p>
<h2 id="problem-statement">Problem Statement</h2>
<p>Imagine an infinite parking lot, where each parking space is given a natural number, starting with 0, 1, 2, 3, … to infinity. The entire lot is a single row of spaces — so that space <code>0</code> is the one closest to the entrance. There are a finite number of cars randomly parked in the lot, as people come and go as they wish. A new car has just arrived outside the lot, and the driver asks you, <em>“Where is the closest open parking space?”</em></p>
<p>The only information you have is the <em>taken</em> spaces list (<code>T</code>), which lists all the occupied parking spaces. This list is sometimes sorted — sometimes, it is not!</p>
<h2 id="expected-output">Expected Output</h2>
<p>Here is a set of expected inputs and outputs for our problem:</p>
<pre><code>Input -&gt; Output
[] -&gt; 0
[0] -&gt; 1
[0, 1] -&gt; 2
[1] -&gt; 0
[1,2,3] -&gt; 0
[0,1,2,3] -&gt; 4
[0,1,2,3,1000] -&gt; 4</code></pre>
<p>. You may notice that the input list is sorted (for readability), but recall that <code>T</code> <em>may or may not</em> be sorted! Try your own solution against these expected outputs!</p>
<h2 id="some-preliminary-observations">Some Preliminary Observations</h2>
<p>The most important thing here is <code>T</code>. If <code>T</code> is empty, then our parking lot is empty, so the answer is obviously <code>0</code>. In all other cases, we have to figure out the lowest number that is <em>absent</em> from <code>T</code>. Essentially, we can reduce the problem as follows:</p>
<ul>
<li>Find the lowest number not present in the set of integers <code>T</code>, where the lowest possible number is <code>0</code>.</li>
</ul>
<p>I used the metaphor of the parking spaces because it is more memorable, and more importantly, more familiar to the general public.</p>
<h2 id="mathematical-approach">Mathematical Approach</h2>
<p>Conceptually, the problem is very simple. Consider the infinite set <code>N</code>, which includes all natural numbers, starting from <code>0</code>. Then obviously, we can start with <code>N</code> itself, and remove every number in <code>N</code> that is also present in <code>T</code>. Then, when we are done (<code>T</code> is empty), we can look at <code>N</code> and retrieve the lowest number.</p>
<h3 id="sorting">Sorting</h3>
<p>Intuitively, we are really only interested in the first consecutive group of cars parked next to each other. Essentially, what you do is walk along from the very first parking space, <code>0</code>, and see if it is occupied. If it is occupied, you move on to the next space — if it is not occupied, you can stop because you found your answer!</p>
<p>There is no way to solve the problem without first sorting <code>T</code>.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> You can solve the problem without sorting only in the edge case where <code>T</code>’s lowest number is greater than <code>0</code> — i.e., if the car most closely parked to the entrance is not on <code>0</code>, then you do not need to bother sorting <code>T</code>, because the answer is simply <code>0</code>. And, finding the lowest number in a given set is always a <span class="math">\(O(n)\)</span> operation because you need to loop through the entire set just once, keeping track of the lowest number found.</p>
<p>In the more common case (as seen in real life), the parking space closest to the driver (the most desirable parking space) is already taken; and what’s more, the group of spaces closest to the driver is already taken. In this case, we have to proceed from space <code>0</code>, and incrementally observe every subsequent space, until we arrive at an empty parking space. The insight here is that we are treating the multitude of consecutively parked cars as one giant car parked across multiple spaces, and are just trying to find the total number of spaces this car occupies.</p>
<h2 id="ruby">Ruby</h2>
<p>I think it is time for some actual code. While I could explain how the Ruby version works, I feel that I have already expounded upon the problem enough above, so that the code here should make intuitive sense.</p>
<div class="code-and-raw">
<table class="sourceCode numberLines ruby" input="code/toy/parking-space.rb"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="sourceCode"><pre><code class="sourceCode ruby"><span class="kw">def</span> get_parking_space(t)
	t_sorted = t.sort

	i = <span class="dv">0</span>
	<span class="kw">while</span> i &lt; t_sorted.size
		<span class="kw">if</span> i &lt; t_sorted[i]
			<span class="kw">break</span>
		<span class="kw">end</span>
		i += <span class="dv">1</span>
	<span class="kw">end</span>

	<span class="kw">return</span> i
<span class="kw">end</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/toy/parking-space.rb"  mimetype=text/plain > parking-space.rb </a>
</div>
</div>
<h2 id="haskell">Haskell</h2>
<p>The Haskell version is a direct translation of the Ruby version, as an iterative approach works just fine. The only drawback is that we use <code>Int</code> instead of the arbitrarily large <code>Integer</code> type for succinctness (we can use <code>Integer</code>, but some built-in functions like <code>sort</code> only work on <code>Int</code>). However, it is interesting if only for the fact that the edge cases are made explicit — there seems to be no way to avoid “lying” to Haskell about the complexity of our problem!</p>
<div class="code-and-raw">
<table class="sourceCode numberLines haskell" input="code/toy/parking-space.hs"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.List</span>

<span class="ot">getParkingSpace ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span>
getParkingSpace ts
	<span class="fu">|</span> null ts <span class="fu">=</span> <span class="dv">0</span>
	<span class="fu">|</span> otherwise <span class="fu">=</span> loop <span class="dv">0</span> <span class="fu">$</span> sort ts
	<span class="kw">where</span>
	loop i xs
		<span class="fu">|</span> i <span class="fu">==</span> length xs <span class="fu">=</span> i
		<span class="fu">|</span> i <span class="fu">&lt;</span> xs <span class="fu">!!</span> i <span class="fu">=</span> i
		<span class="fu">|</span> otherwise <span class="fu">=</span> loop (i <span class="fu">+</span> <span class="dv">1</span>) xs</code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/toy/parking-space.hs"  mimetype=text/plain > parking-space.hs </a>
</div>
</div>
<h2 id="low-level-interlude">Low-Level Interlude</h2>
<p>Did you realize that the basic concept here is the same as finding the least significant bit (LSB)? I.e., if the parking lot is one giant computer word, and a <code>1</code> bit represents an available parking space, then we are simply trying to find the LSB (the index of the bit being the same thing as the parking space number). This is such a common scenario, that there are native hardware instructions for this on most all CPUs. The canonical name for this operation is <a href="http://en.wikipedia.org/wiki/Find_first_set"><em>find first set</em></a> or <em>find first one</em>.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> In Linux, you can do <code>man ffs</code> to learn about how to use it in your C program.</p>
<p>Of course, the parking lot in our problem is of infinite size, which makes the size of <code>T</code> arbitrarily large; alas, we cannot use <code>ffs</code> here.</p>
<h1 id="the-parking-load-problem">The Parking Load Problem</h1>
<p>An interesting related problem is what I call the <em>Parking Load</em> problem. The scenario is the same as in the <em>Parking Lot</em> problem, but with the following twist: if the last (most far away) parked car determines the bounds of the parking lot (i.e., it is no longer considered infinitely large), then how many parking spaces are available?</p>
<p>Interestingly, this problem is easier to solve than the first problem. This seems paradoxical — surely, finding the first available parking space is easier than counting every single available space! But it is true — this problem is indeed easier — because we can solve the problem <em>without sorting</em>.</p>
<p>If we talk in terms of our “Low-Level Interlude,” this is essentially the same as saying, “Count the number of <code>1</code> bits.” There are very clever ways of counting bits, but that is not our concern, and so I will present a naive solution in Ruby.</p>
<h2 id="expected-output-1">Expected Output</h2>
<p>Like in the previous problem, below are some expected outputs for you to test your own version against.</p>
<pre><code>Input -&gt; Output
[] -&gt; &quot;N/A&quot;
[0] -&gt; 0
[0,1] -&gt; 0
[0,1,3] -&gt; 1
[999] -&gt; 999
[1,5,999] -&gt; 997</code></pre>
<p>We return “N/A” for the empty case because this condition does not make sense under the terms of the problem, which defines the bounds of the parking lot based on the car farthest away; if there are no cars to begin with, the problem cannot be posed.</p>
<h2 id="ruby-1">Ruby</h2>
<p>Without further ado, here is the Ruby solution.</p>
<div class="code-and-raw">
<table class="sourceCode numberLines ruby" input="code/toy/parking-spaces.rb"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
</pre></td><td class="sourceCode"><pre><code class="sourceCode ruby"><span class="kw">def</span> get_parking_spaces(t)
	<span class="kw">if</span> t.empty?
		<span class="kw">return</span> <span class="st">&quot;N/A&quot;</span>
	<span class="kw">else</span>
		<span class="kw">return</span> (t.max - t.size) + <span class="dv">1</span>
	<span class="kw">end</span>
<span class="kw">end</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/toy/parking-spaces.rb"  mimetype=text/plain > parking-spaces.rb </a>
</div>
</div>
<h2 id="haskell-1">Haskell</h2>
<p>The Haskell version is not much different.</p>
<div class="code-and-raw">
<table class="sourceCode numberLines haskell" input="code/toy/parking-spaces.hs"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="ot">getParkingSpaces ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">Int</span>
getParkingSpaces t
	<span class="fu">|</span> null t <span class="fu">=</span> <span class="dt">Left</span> <span class="st">&quot;N/A&quot;</span>
	<span class="fu">|</span> otherwise <span class="fu">=</span> <span class="dt">Right</span> <span class="fu">$</span> (maximum t) <span class="fu">-</span> (length t) <span class="fu">+</span> <span class="dv">1</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/toy/parking-spaces.hs"  mimetype=text/plain > parking-spaces.hs </a>
</div>
</div>
<h2 id="a-successor-to-fizzbuzz">A Successor to FizzBuzz?</h2>
<p>For some reason, I get a strong feeling that these problems are much more interesting than <a href="http://en.wikipedia.org/wiki/Fizz_buzz">FizzBuzz</a>. The fact that we talk about an <em>infinitely large</em> parking lot will probably throw a lot of newbies and naive thinkers off the right track. You have to be especially careful about edge cases, such as the empty list in the second Haskell version. I believe that good coders have a keen sense of edge cases, because correct algorithms must withstand them without blowing up. Just review the Haskell solutions and notice all of the edge cases that we have to look out for!</p>
<p>You might even get some crazy answers that consider at length related nonessential tangents and Big-O notation, but fail to realize just how simple, at least conceptually, the problem becomes once you sort <code>T</code>. And, I like these problems more than FizzBuzz because there are so many interesting points about it. For example, you can ask a simple related question: if you were the keeper of this parking lot, what kind of data structure would you use to keep track of the taken parking spaces? And of course, there are very conspicuous low-level analogues that more experienced coders can relate to.</p>
<p>I hope you enjoyed reading about these problems. Maybe you can quiz your friend about it, and see how they respond!</p>
<p>Happy hacking!</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>You can, for example, loop from <code>0</code> to infinity and then see if this number exists in <code>T</code> — but this is probably the worst way to solve the problem, at least from a computational perspective. E.g., if it takes <span class="math">\(O(n)\)</span> to search through <code>T</code> to see if some integer <code>i</code> exists in it, then this algorithm has <span class="math">\(O(n^2)\)</span> complexity because you need to run the search for every single integer in <code>T</code>.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>A closely related operation is <a href="http://en.wikipedia.org/wiki/Two&#39;s_complement">two’s complement</a> arithmetic. You can read about it from the <a href="http://en.wikipedia.org/wiki/Find_first_set">“Find first set”</a> article on Wikipedia.<a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>My First Contribution to Git</title>
    <link href="http://listx.github.io/post/2014-09-09-my-first-contribution-to-git.html" />
    <id>http://listx.github.io/post/2014-09-09-my-first-contribution-to-git.html</id>
    <published>2014-09-09T00:00:00Z</published>
    <updated>2014-09-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-09-09</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-09-09-my-first-contribution-to-git.md" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/git.html">git</a>
</div>

<p>I am happy to say that my <a href="http://thread.gmane.org/gmane.comp.version-control.git/254705">first</a> <a href="http://thread.gmane.org/gmane.comp.version-control.git/255050">patches</a> were <a href="https://github.com/git/git/commit/4645b014c5c82a3b75337">recently merged</a> into the master Git branch! Now, I am by no means a C or Git expert, so the patches only dealt with changes to the documentation. I did not know anyone involved with Git in real life; nor did I have any experience submitting patches to a big project like Git. So, how did I do it?</p>
<h2 id="dead-simple-fix">Dead Simple Fix</h2>
<p>It all started when I typed in <code>man git init</code> and found this line:</p>
<pre><code>The template directory used will (in order):</code></pre>
<p>. Obviously, there was a missing word “be” in that sentence. I could not believe that such a glaring error was present in such a high profile project like Git. Then again, if you think about it, you only invoke <code>git init</code> once per project (to initialize a Git repository), so the vast majority of users have but a cursory glance at the manpage — that is, if they even bother at all to consult the manpages for such a basic task.</p>
<p>Anyway, my initial reaction was “Aha! I will fix this typo and submit my first patch to Git!”. I thought fixing something so simple and obvious would surely have no trouble getting into the main branch. But then, something stirred inside me, and compelled me to look for similar errors in the manpage. Judging by the pace of things, my next patch to Git might take one, two, five years (or forever?), and the thought of becoming a one-shot, one-commit, one-word-fix contributor made my ego twitch. And besides, it felt a bit stupid to just submit a two-letter (“b” and “e”) fix. I thought to myself, “Maybe there are other low-hanging fruits to pluck?”</p>
<h2 id="real-work">Real Work</h2>
<p>So, I set a medium-term goal to myself: read the entire <code>git init</code> manpage, with a singular focus on clarity. I spotted more typographical errors, and even some confusing parts that a Git newbie would have trouble with. <code>git init</code>, after all, is a very basic, fundamental operation that all newcomers to Git would probably have questions about. It might even be the first thing that newbies might look up in the docs!</p>
<p>First things first. I cloned the <a href="https://github.com/git/git">master Git repository</a> from GitHub. I then created a new branch to record my work; in the end, I created 7 commits. I read Git’s documentation on how to submit patches, and also consulted contribution advice for the Linux Kernel project in the form of <a href="http://youtu.be/LLBrBBImJt4">Greg Kroah-Hartman’s excellent talk</a>. The Linux Kernel is where Git’s real action is (tens of thousands of contributors, all using Git!), so it made sense to check out the Kernel’s way of doing things.</p>
<p>I used <code>git rebase -i</code> countless times until I got everything sorted out. I even reordered the commits to have the <a href="https://github.com/git/git/commit/6e1ccacbedf084971f095816f4450c4b607607c5">most basic one</a> (all typographical changes) be the first one, in case they wanted to merge just a few of them and reject the rest.</p>
<p>After re-reading everything for the eighth time, I sent an email to the official mailing list with <code>git send-email</code>. I checked <code>git blame</code> for the lines I touched to CC everyone that could be directly affected by my changes. After a few days, I got a response back — from the principal maintainer of Git, Junio Hamano, no less!</p>
<h2 id="the-response">The Response?</h2>
<p>He was very polite, and true to his duty as maintainer, very thorough. You can see the discussion that took place over at the <a href="http://thread.gmane.org/gmane.comp.version-control.git/254705">mailing list archive</a>. I sent off my second version of my 7-commit patch series after a few days, and waited.</p>
<p>And waited. I waited two weeks, but alas, my new patch series was not getting any further feedback. I was concerned that my changes were simply forgotten. A nagging thought annoyed me — “What if I miss the current merge window<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>?” In mild desperation, I sent an email directly to Junio to remind him about my patches. Still no response. A couple more weeks passed, and I almost forgot about my patches…</p>
<p>Until today! I got an email from <code>tip4commit.com</code> telling me that I was given some miniscule fraction of a bitcoin for my contribution to the Git project. It felt like some strange sort of scam, but even if it was, whoever wrote that automated emailing script did their homework on the Github API because lo and behold, my patches were indeed merged into the mainline!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Well, as they say, if you don’t know how to code but still want to contribute to an open source project, you should work on the documentation! I assume that I did not get any feedback after the initial code review because the maintainer, Junio, was busy with other matters. If I think about it now, he does get tons of patches and needs to do countless merges, containing countless commits, to make a new release of Git.</p>
<p>So, when contributing to open source, try working on the documentation first. Improving the documentation not only benefits all newcomers to the project, but also helps you understand the project better — a win win! And, be patient with your patches — especially if the project you are contributing to has a busy schedule.</p>
<p>Happy hacking!</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This is the period of time when the maintainer of a project accepts patches for the next release.<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>Reverse Polish Notation (RPN) Calculator in Ruby and Haskell</title>
    <link href="http://listx.github.io/post/2014-09-05-rpn-calculator.html" />
    <id>http://listx.github.io/post/2014-09-05-rpn-calculator.html</id>
    <published>2014-09-05T00:00:00Z</published>
    <updated>2014-09-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-09-05</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-09-05-rpn-calculator.md" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/ruby.html">ruby</a>, <a href="/tag/haskell.html">haskell</a>
</div>

<p>A friend of mine is in DevBootCamp, an intensive coding school program designed to get students ready for real world job placement. Anyway, he was telling me how he was given an extra credit assignment: implement a RPN calculator which supports 3 functions — add, subtract, and multiply — on integer numbers. I.e., write a function <code>evaluate()</code> that when given a string such as <code>&quot;3 4 + 8 *&quot;</code> gives the result <code>56</code>. He gave me his Ruby solution; in response, I wrote my own Ruby version and decided soon thereafter to write an equivalent Haskell version, because, why not?</p>
<h2 id="ruby">Ruby</h2>
<p>First, the Ruby version:</p>
<div class="code-and-raw">
<table class="sourceCode numberLines ruby" input="code/toy/rpn.rb"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="sourceCode"><pre><code class="sourceCode ruby"><span class="kw">def</span> evaluate(equation_str)
	stack = []
	equation_str.split.each <span class="kw">do</span> |term|
		<span class="kw">case</span> term
		<span class="kw">when</span> <span class="ot">/^\d+?$/</span>
			stack.push(term.to_i)
		<span class="kw">when</span> <span class="st">&quot;+&quot;</span>, <span class="st">&quot;-&quot;</span>, <span class="st">&quot;*&quot;</span>
			<span class="kw">if</span> stack.size &lt; <span class="dv">2</span>
				raise <span class="st">&quot;stack too small for operator application&quot;</span>
			<span class="kw">else</span>
				b = stack.pop
				a = stack.pop
				op = term.to_sym
				c = b.send(op, a)
				stack.push(c)
			<span class="kw">end</span>
		<span class="kw">else</span>
			raise <span class="st">&quot;invalid input `</span><span class="ot">#{</span>term<span class="ot">}</span><span class="st">&#39;&quot;</span>
		<span class="kw">end</span>
	<span class="kw">end</span>
	stack
<span class="kw">end</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/toy/rpn.rb"  mimetype=text/plain > rpn.rb </a>
</div>
</div>
<p>Pretty straightforward, yes? The <code>terms</code> variable holds an array of numbers and operators. We use a calculator stack (aptly named, <code>stack</code>) to untangle the RPN in a stack-based way.</p>
<p>In the <code>each</code> loop, the actions depend on what <code>term</code> looks like. If <code>term</code> is a number in string form, we convert it into a real number with <code>String#to_i</code>, and push it into <code>stack</code>. If <code>term</code> is one of the 3 recognized operators, we remove 2 terms <code>a</code> and <code>b</code> from <code>stack</code> and apply the necessary operation on it with Ruby’s magic <code>Object#send</code> method, and push the new term <code>c</code> back into <code>stack</code> for further operations (if any, in later iterations of the <code>while</code> loop). Otherwise, we reject the input as an invalid term.</p>
<h2 id="haskell">Haskell</h2>
<p>Here is the Haskell version:</p>
<div class="code-and-raw">
<table class="sourceCode numberLines haskell" input="code/toy/rpn.hs"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Char</span> (isDigit)

<span class="kw">data</span> <span class="dt">Term</span>
	<span class="fu">=</span> <span class="dt">TermInt</span> <span class="dt">Integer</span>
	<span class="fu">|</span> <span class="dt">TermOp</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>)

<span class="ot">evaluate ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]
evaluate <span class="fu">=</span> evalTerms <span class="fu">.</span> map mkTerm <span class="fu">.</span> words

<span class="ot">mkTerm ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Term</span>
mkTerm termStr <span class="fu">=</span> <span class="kw">case</span> termStr <span class="kw">of</span>
	<span class="st">&quot;+&quot;</span> <span class="ot">-&gt;</span> <span class="dt">TermOp</span> (<span class="fu">+</span>)
	<span class="st">&quot;-&quot;</span> <span class="ot">-&gt;</span> <span class="dt">TermOp</span> (<span class="fu">-</span>)
	<span class="st">&quot;*&quot;</span> <span class="ot">-&gt;</span> <span class="dt">TermOp</span> (<span class="fu">*</span>)
	_
		<span class="fu">|</span> and <span class="fu">$</span> map isDigit termStr <span class="ot">-&gt;</span> <span class="dt">TermInt</span> <span class="fu">$</span> read termStr
		<span class="fu">|</span> otherwise <span class="ot">-&gt;</span> error <span class="fu">$</span> <span class="st">&quot;invalid input `&quot;</span> <span class="fu">++</span> termStr <span class="fu">++</span> <span class="st">&quot;&#39;&quot;</span>

<span class="ot">evalTerms ::</span> [<span class="dt">Term</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]
evalTerms <span class="fu">=</span> foldl modifyStack []
	<span class="kw">where</span>
	modifyStack stack term <span class="fu">=</span> <span class="kw">case</span> term <span class="kw">of</span>
		<span class="dt">TermInt</span> n <span class="ot">-&gt;</span> n <span class="fu">:</span> stack
		<span class="dt">TermOp</span> op <span class="ot">-&gt;</span> <span class="kw">case</span> stack <span class="kw">of</span>
			(a<span class="fu">:</span>b<span class="fu">:</span>_) <span class="ot">-&gt;</span> op a b <span class="fu">:</span> drop <span class="dv">2</span> stack
			_ <span class="ot">-&gt;</span> error <span class="st">&quot;stack too small for operator application&quot;</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/toy/rpn.hs"  mimetype=text/plain > rpn.hs </a>
</div>
</div>
<p>Probably the first thing to note is that we define a robust data type, <code>Term</code>, to encapsulate the values held in a given RPN string. We take advantage of Haskell’s functions-as-first-class-values ability, and define the <code>TermOp</code> constructor with it (i.e., it needs an arithmetic function <code>(Integer -&gt; Integer -&gt; Integer)</code> as an argument).</p>
<p>The next thing to notice is that the <code>evaluate</code> function is composed of smaller helper functions, <code>mkTerm</code> and <code>evalTerms</code>. <code>mkTerm</code> simply converts a <code>String</code> type into an appropriate <code>Term</code> type. <code>evalTerms</code> takes a list of <code>Term</code> values, and reduces it as much as possible by applying the <code>modifyStack</code> function over it with <code>foldl</code> (Haskell’s version of a single-pass loop).</p>
<p>When <code>modifyStack</code> encounters a <code>TermInt</code>, it pushes the number into the stack. When it encounters a <code>TermOp</code>, it applies that operator to the first 2 items in <code>stack</code>, and pushes this result back into <code>stack</code>. We use pattern matching with <code>(a:b:_)</code> to pull out the <code>a</code> and <code>b</code> values from the stack — the expression <code>(a:b:_)</code> means a value that matches either <span class="math">\([x_1, x_2]\)</span>, or <span class="math">\([x_1, x_2, ... , x_n]\)</span>, because the <code>_</code> operator matches anything, including the empty list <code>[]</code> used to finalize list creation. The <code>drop 2 stack</code> is necessary because Haskell’s types by default are immutable.</p>
<h2 id="thoughts">Thoughts</h2>
<p>I much prefer the Haskell version.</p>
<p>The separation of concerns is a big win — we can easily create helper functions like <code>mkTerm</code> and <code>evalTerms</code> because of Haskell’s purity<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>. Haskell embraces the use of algebraic data types (i.e., <code>Term</code> here), and perhaps this preference lends itself to the use of helper functions that convert things from one type to another. Ruby does not have types, at least in the sense of Haskell types, so to artificially create such concepts and to implement them would be difficult.<a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> I mean, I really want to write equivalent <code>mkTerm</code> and <code>evalTerms</code> methods in Ruby, but my beginner skills prevent me from doing it in a simple, straightforward way. I know enough about coding to abandon “solutions” that require circuitous, complex design.</p>
<p>I also like how all the functions are pure and thus easy to reason about with the type signatures. Refactoring code like this is a dream.</p>
<p>In short, algebraic data types, the clean delegation of subtasks to helper functions, and purity make the Haskell version easier to reason about and maintain in the long run.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Haskell’s <em>purity</em> is a term of art. Look it up!<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>The closest thing to Haskell types in Ruby, in my mind, are Ruby objects. Certainly, Ruby knows the difference between two objects belonging to different classes, but to do that here would make the code much longer and offer little benefit.<a href="#fnref2">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>Find Lines with 80+ Columns in Multiple Files</title>
    <link href="http://listx.github.io/post/2014-08-11-find-files-with-80%2B-columns.html" />
    <id>http://listx.github.io/post/2014-08-11-find-files-with-80%2B-columns.html</id>
    <published>2014-08-11T00:00:00Z</published>
    <updated>2014-08-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-08-11</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-08-11-find-files-with-80+-columns.md" title="History">*</a>
	<br>
	<a href="/tag/linux.html">linux</a>, <a href="/tag/programming.html">programming</a>
</div>

<p>It’s nice to follow the 80-columns-per-line rule<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>, but what if you have some lingering project that has yet to conform?</p>
<p>Just go to that project’s sources directory and do</p>
<div class="code-and-raw">
<table class="sourceCode numberLines bash" input="code/find-80-cols.sh"><tr class="sourceCode"><td class="lineNumbers"><pre>1
</pre></td><td class="sourceCode"><pre><code class="sourceCode bash"><span class="kw">find</span> . -type f -exec sh -c <span class="st">&quot;expand -t 8 {} | grep -n </span><span class="dt">\&quot;</span><span class="st">.\{81\}</span><span class="dt">\&quot;</span><span class="st">&quot;</span> <span class="dt">\;</span> -print</code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/find-80-cols.sh"  mimetype=text/plain > find-80-cols.sh </a>
</div>
</div>
<p>.</p>
<p>The call to <code>expand</code> is necessary because different people use different widths for tabs. That is, we are trying to find files with 80+ <em>columns</em> (as they appear to humans), not 80+ <em>characters</em> (as they appear to the computer).</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>See the <a href="https://www.kernel.org/doc/Documentation/CodingStyle">Linux Kernel Coding Style</a>, “Chapter 2: Breaking long lines and strings”.<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>Solving the "NVRM: API mismatch" Problem on Arch Linux</title>
    <link href="http://listx.github.io/post/2014-06-04-nvrm-api-mismatch.html" />
    <id>http://listx.github.io/post/2014-06-04-nvrm-api-mismatch.html</id>
    <published>2014-06-04T00:00:00Z</published>
    <updated>2014-06-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-06-04</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-06-04-nvrm-api-mismatch.md" title="History">*</a>
	<br>
	<a href="/tag/arch.html">arch</a>, <a href="/tag/linux.html">linux</a>, <a href="/tag/nvidia.html">nvidia</a>
</div>

<p>Sometimes when you do a system upgrade on Arch, Xorg will die on a reboot and you’ll get this kernel error (available with <code>dmesg</code>):</p>
<table class="sourceCode numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
</pre></td><td class="sourceCode"><pre><code class="sourceCode">NVRM: API mismatch: the client has the version XXX.XX, but
NVRM: this kernel module has the version YYY.YY.  Please
NVRM: make sure that this kernel module and all NVIDIA driver
NVRM: components have the same version.</code></pre></td></tr></table>
<p>. This is usually the case when you upgrade your <code>linux</code> package, followed by upgrading your <code>nvidia</code> package. The problem is that the new kernel image references your older <code>nvidia</code> package (when it executed <code>mkinitcpio -p linux</code> before <code>nvidia</code> got upgraded). There are two possible solutions:</p>
<ol style="list-style-type: decimal">
<li>Simply remake your kernel image against your newly upgraded <code>nvidia</code> package. Run <code>mkinitcpio -p linux</code> again, and reboot.</li>
<li>In the alternative, downgrade to your previous set of <code>nvidia</code> drivers, located in <code>/var/cache/pacman/pkg/</code>.</li>
</ol>
<p>Hope this helps someone out there. =)</p>
]]></summary>
</entry>
<entry>
    <title>Quad Monitor Setup</title>
    <link href="http://listx.github.io/post/2014-05-20-quad-monitor-setup.html" />
    <id>http://listx.github.io/post/2014-05-20-quad-monitor-setup.html</id>
    <published>2014-05-20T00:00:00Z</published>
    <updated>2014-05-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-05-20</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-05-20-quad-monitor-setup.md" title="History">*</a>
	<br>
	<a href="/tag/linux.html">linux</a>, <a href="/tag/hardware.html">hardware</a>, <a href="/tag/nvidia.html">nvidia</a>, <a href="/tag/xmonad.html">xmonad</a>
</div>

<p>I got my two QNIX QX2710 LED Evolution II SE Matte 27&quot; 2560x1440 Samsung PLS WQHD monitors and incorporated them into my existing dual Acer X222W 22&quot; 1680x1050 setup. I put the two QNIXes in the middle, and put the Acers on the left and right edges. All four are in “portrait” orientation, because I primarily code on my computer. A single Gigabyte GeForce GTX 750 Ti OC 2GB GDDR5 2DVI/2HDMI card powers all four monitors; the QNIXes use the DVI ports, while the Acers use the HDMI ports via two HDMI-to-DVI(female) adapters. I bought this card because of the simplicity of the four ports — just DVI and HDMI.</p>
<p>As for the stands, I just bought another dual monitor stand and put it next to my existing dual monitor stand; each stand holds a QNIX and an Acer on each arm. The fact that the stands are subject to differently weighted monitors (27&quot; monitor on one arm and a 22&quot; on another) does not really affect them negatively. The desk in the image below is 140mm wide, in case you want to have a sense of how tight two dual-monitor stands would fit on your own desk.</p>
<p><img src="../img/quad-monitor.jpg" alt="Quad monitor setup" title="Quad monitor setup" width="100%"></p>
<p>Using four monitors sounds difficult, but it’s a breeze with Xinerama and Xmonad. The hardest part was figuring out the correct <code>xorg.conf</code> configuration file. It was difficult because the QNIX monitors, being cheap, do not work out of the box, because the latest Nvidia driver (version 337.12) does not detect the correct resolution. What’s worse, the QNIXes do not support anything other than their native 2560x1440 resolution, so you’ll get blank screens if you try to just use these monitors without tweaking some <code>xorg.conf</code> settings. I actually ended up googling to find the correct <code>Modeline</code> value for <code>xorg.conf</code> for my QNIX, at 96hz refresh rate.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> You could try using the <code>cvt</code> program included with <code>xorg-server</code>, but when I tried it out on my own it generated different numbers and my QNIXes couldn’t handle those numbers.</p>
<p>Here is my <code>xorg.conf</code>:</p>
<div class="code-and-raw">
<table class="sourceCode numberLines xorg" input="code/quad-monitor-portrait.xorg.conf"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
</pre></td><td class="sourceCode"><pre><code class="sourceCode xorg">#<span class="co"> nvidia-settings: X configuration file generated by nvidia-settings</span>
#<span class="co"> nvidia-settings:  version 337.12  (buildmeister@swio-display-x64-rhel04-11)  Fri Apr  4 15:17:43 PDT 2014</span>

<span class="fu">Section</span> <span class="st">&quot;ServerLayout&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Layout0&quot;</span>
    Screen<span class="kw">      </span><span class="dv">0</span><span class="kw">  </span><span class="dt">&quot;Qnix1&quot;</span><span class="kw"> </span><span class="dv">2490</span><span class="kw"> </span><span class="dv">0</span>
    Screen<span class="kw">      </span><span class="dv">1</span><span class="kw">  </span><span class="dt">&quot;Acer1&quot;</span><span class="kw"> </span><span class="dv">3930</span><span class="kw"> </span><span class="dv">300</span>
    Screen<span class="kw">      </span><span class="dv">2</span><span class="kw">  </span><span class="dt">&quot;Acer2&quot;</span><span class="kw"> </span><span class="dv">0</span><span class="kw"> </span><span class="dv">300</span>
    Screen<span class="kw">      </span><span class="dv">3</span><span class="kw">  </span><span class="dt">&quot;Qnix2&quot;</span><span class="kw"> </span><span class="dv">1050</span><span class="kw"> </span><span class="dv">0</span>
    Option<span class="kw">         </span><span class="dt">&quot;Xinerama&quot;</span><span class="kw"> </span><span class="dt">&quot;1&quot;</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Monitor&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Monitor0&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;QNIX&quot;</span>
    ModelName<span class="kw">      </span><span class="dt">&quot;QX2710&quot;</span>
    DisplaySize<span class="kw">     </span><span class="dv">597</span><span class="kw">    </span><span class="dv">336</span>
    HorizSync<span class="kw">       </span><span class="fl">88.8</span><span class="kw"> - </span><span class="fl">160.0</span>
    VertRefresh<span class="kw">     </span><span class="fl">59.5</span><span class="kw"> - </span><span class="fl">120.0</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440&quot;</span><span class="kw">          </span><span class="fl">241.50</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2608</span><span class="kw"> </span><span class="dv">2640</span><span class="kw"> </span><span class="dv">2720</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1481</span><span class="kw"> +</span><span class="ot">hsync</span><span class="kw"> -</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_60&quot;</span><span class="kw">       </span><span class="fl">312.25</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2752</span><span class="kw"> </span><span class="dv">3024</span><span class="kw"> </span><span class="dv">3488</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1493</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_75&quot;</span><span class="kw">       </span><span class="fl">397.25</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2760</span><span class="kw"> </span><span class="dv">3040</span><span class="kw"> </span><span class="dv">3520</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1506</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_85&quot;</span><span class="kw">       </span><span class="fl">454.75</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2768</span><span class="kw"> </span><span class="dv">3048</span><span class="kw"> </span><span class="dv">3536</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1514</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_96&quot;</span><span class="kw">       </span><span class="fl">400.00</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2608</span><span class="kw"> </span><span class="dv">2640</span><span class="kw"> </span><span class="dv">2744</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1512</span><span class="kw"> +</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPMS&quot;</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Monitor&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Monitor1&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;Unknown&quot;</span>
    ModelName<span class="kw">      </span><span class="dt">&quot;Acer X222W&quot;</span>
    HorizSync<span class="kw">       </span><span class="fl">31.0</span><span class="kw"> - </span><span class="fl">81.0</span>
    VertRefresh<span class="kw">     </span><span class="fl">56.0</span><span class="kw"> - </span><span class="fl">75.0</span>
    #<span class="co"> Generated via &quot;cvt 1680 1050&quot; with the Acer monitor plugged in; `cvt` is</span>
    #<span class="co"> part of xorg-server 1.15.1-1 package on Arch Linux</span>
    ModeLine<span class="kw"> </span><span class="dt">&quot;1680x1050_60.00&quot;</span><span class="kw">  </span><span class="fl">146.25</span><span class="kw">  </span><span class="dv">1680</span><span class="kw"> </span><span class="dv">1784</span><span class="kw"> </span><span class="dv">1960</span><span class="kw"> </span><span class="dv">2240</span><span class="kw">  </span><span class="dv">1050</span><span class="kw"> </span><span class="dv">1053</span><span class="kw"> </span><span class="dv">1059</span><span class="kw"> </span><span class="dv">1089</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPMS&quot;</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Monitor&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Monitor2&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;Unknown&quot;</span>
    ModelName<span class="kw">      </span><span class="dt">&quot;Acer X222W&quot;</span>
    HorizSync<span class="kw">       </span><span class="fl">31.0</span><span class="kw"> - </span><span class="fl">81.0</span>
    VertRefresh<span class="kw">     </span><span class="fl">56.0</span><span class="kw"> - </span><span class="fl">75.0</span>
    ModeLine<span class="kw"> </span><span class="dt">&quot;1680x1050_60.00&quot;</span><span class="kw">  </span><span class="fl">146.25</span><span class="kw">  </span><span class="dv">1680</span><span class="kw"> </span><span class="dv">1784</span><span class="kw"> </span><span class="dv">1960</span><span class="kw"> </span><span class="dv">2240</span><span class="kw">  </span><span class="dv">1050</span><span class="kw"> </span><span class="dv">1053</span><span class="kw"> </span><span class="dv">1059</span><span class="kw"> </span><span class="dv">1089</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPMS&quot;</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Monitor&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Monitor3&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;QNIX&quot;</span>
    ModelName<span class="kw">      </span><span class="dt">&quot;QX2710&quot;</span>
    DisplaySize<span class="kw">     </span><span class="dv">597</span><span class="kw">    </span><span class="dv">336</span>
    HorizSync<span class="kw">       </span><span class="fl">88.8</span><span class="kw"> - </span><span class="fl">160.0</span>
    VertRefresh<span class="kw">     </span><span class="fl">59.5</span><span class="kw"> - </span><span class="fl">120.0</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440&quot;</span><span class="kw">          </span><span class="fl">241.50</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2608</span><span class="kw"> </span><span class="dv">2640</span><span class="kw"> </span><span class="dv">2720</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1481</span><span class="kw"> +</span><span class="ot">hsync</span><span class="kw"> -</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_60&quot;</span><span class="kw">       </span><span class="fl">312.25</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2752</span><span class="kw"> </span><span class="dv">3024</span><span class="kw"> </span><span class="dv">3488</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1493</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_75&quot;</span><span class="kw">       </span><span class="fl">397.25</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2760</span><span class="kw"> </span><span class="dv">3040</span><span class="kw"> </span><span class="dv">3520</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1506</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_85&quot;</span><span class="kw">       </span><span class="fl">454.75</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2768</span><span class="kw"> </span><span class="dv">3048</span><span class="kw"> </span><span class="dv">3536</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1514</span><span class="kw"> -</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    ModeLine<span class="kw">       </span><span class="dt">&quot;2560x1440_96&quot;</span><span class="kw">       </span><span class="fl">400.00</span><span class="kw"> </span><span class="dv">2560</span><span class="kw"> </span><span class="dv">2608</span><span class="kw"> </span><span class="dv">2640</span><span class="kw"> </span><span class="dv">2744</span><span class="kw"> </span><span class="dv">1440</span><span class="kw"> </span><span class="dv">1443</span><span class="kw"> </span><span class="dv">1448</span><span class="kw"> </span><span class="dv">1512</span><span class="kw"> +</span><span class="ot">hsync</span><span class="kw"> +</span><span class="ot">vsync</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPMS&quot;</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Device&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;DVI-port-top&quot;</span>
    Driver<span class="kw">         </span><span class="dt">&quot;nvidia&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;NVIDIA Corporation&quot;</span>
    BoardName<span class="kw">      </span><span class="dt">&quot;GeForce GTX 750 Ti&quot;</span>
    BusID<span class="kw">          </span><span class="dt">&quot;PCI:2:0:0&quot;</span>
    Screen<span class="kw">          </span><span class="dv">0</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEdidDpi&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPI&quot;</span><span class="kw"> </span><span class="dt">&quot;108 x 108&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoLogo&quot;</span><span class="kw"> </span><span class="dt">&quot;1&quot;</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Device&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;HDMI-port-right&quot;</span>
    Driver<span class="kw">         </span><span class="dt">&quot;nvidia&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;NVIDIA Corporation&quot;</span>
    BoardName<span class="kw">      </span><span class="dt">&quot;GeForce GTX 750 Ti&quot;</span>
    BusID<span class="kw">          </span><span class="dt">&quot;PCI:2:0:0&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEdidDpi&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPI&quot;</span><span class="kw"> </span><span class="dt">&quot;90 x 90&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoLogo&quot;</span><span class="kw"> </span><span class="dt">&quot;1&quot;</span>
    Screen<span class="kw">          </span><span class="dv">1</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Device&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;HDMI-port-left&quot;</span>
    Driver<span class="kw">         </span><span class="dt">&quot;nvidia&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;NVIDIA Corporation&quot;</span>
    BoardName<span class="kw">      </span><span class="dt">&quot;GeForce GTX 750 Ti&quot;</span>
    BusID<span class="kw">          </span><span class="dt">&quot;PCI:2:0:0&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEdidDpi&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPI&quot;</span><span class="kw"> </span><span class="dt">&quot;90 x 90&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoLogo&quot;</span><span class="kw"> </span><span class="dt">&quot;1&quot;</span>
    Screen<span class="kw">          </span><span class="dv">2</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Device&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;DVI-port-bottom&quot;</span>
    Driver<span class="kw">         </span><span class="dt">&quot;nvidia&quot;</span>
    VendorName<span class="kw">     </span><span class="dt">&quot;NVIDIA Corporation&quot;</span>
    BoardName<span class="kw">      </span><span class="dt">&quot;GeForce GTX 750 Ti&quot;</span>
    BusID<span class="kw">          </span><span class="dt">&quot;PCI:2:0:0&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEdidDpi&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;DPI&quot;</span><span class="kw"> </span><span class="dt">&quot;108 x 108&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoLogo&quot;</span><span class="kw"> </span><span class="dt">&quot;1&quot;</span>
    Screen<span class="kw">          </span><span class="dv">3</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Screen&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Qnix1&quot;</span>
    Device<span class="kw">         </span><span class="dt">&quot;DVI-port-top&quot;</span>
    Monitor<span class="kw">        </span><span class="dt">&quot;Monitor0&quot;</span>
    DefaultDepth<span class="kw">    </span><span class="dv">24</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDID&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDDPI&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDFreqs&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ExactModeTimingsDVI&quot;</span><span class="kw"> </span><span class="dt">&quot;True&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ModeValidation&quot;</span><span class="kw"> </span><span class="dt">&quot;AllowNonEdidModes, NoVertRefreshCheck, NoHorizSyncCheck, NoMaxSizeCheck, NoMaxPClkCheck, NoEDIDModes&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoBandWidthTest&quot;</span><span class="kw"> </span><span class="dt">&quot;true&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;metamodes&quot;</span><span class="kw"> </span><span class="dt">&quot;DVI-I-1: 2560x1440_96 +0+0 {rotation=left}&quot;</span>
    <span class="fu">SubSection</span>     <span class="st">&quot;Display&quot;</span>
        Depth<span class="kw">       </span><span class="dv">24</span>
    <span class="fu">EndSubSection</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Screen&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Acer1&quot;</span>
    Device<span class="kw">         </span><span class="dt">&quot;HDMI-port-right&quot;</span>
    Monitor<span class="kw">        </span><span class="dt">&quot;Monitor1&quot;</span>
    DefaultDepth<span class="kw">    </span><span class="dv">24</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDID&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDDPI&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDFreqs&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ExactModeTimingsDVI&quot;</span><span class="kw"> </span><span class="dt">&quot;True&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ModeValidation&quot;</span><span class="kw"> </span><span class="dt">&quot;AllowNonEdidModes, NoVertRefreshCheck, NoHorizSyncCheck, NoMaxSizeCheck, NoMaxPClkCheck, NoEDIDModes&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoBandWidthTest&quot;</span><span class="kw"> </span><span class="dt">&quot;true&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;metamodes&quot;</span><span class="kw"> </span><span class="dt">&quot;HDMI-0: 1680x1050_60.00 +0+0 {rotation=right}&quot;</span>
    <span class="fu">SubSection</span>     <span class="st">&quot;Display&quot;</span>
        Depth<span class="kw">       </span><span class="dv">24</span>
    <span class="fu">EndSubSection</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Screen&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Acer2&quot;</span>
    Device<span class="kw">         </span><span class="dt">&quot;HDMI-port-left&quot;</span>
    Monitor<span class="kw">        </span><span class="dt">&quot;Monitor2&quot;</span>
    DefaultDepth<span class="kw">    </span><span class="dv">24</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDID&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDDPI&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDFreqs&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ExactModeTimingsDVI&quot;</span><span class="kw"> </span><span class="dt">&quot;True&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ModeValidation&quot;</span><span class="kw"> </span><span class="dt">&quot;AllowNonEdidModes, NoVertRefreshCheck, NoHorizSyncCheck, NoMaxSizeCheck, NoMaxPClkCheck, NoEDIDModes&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoBandWidthTest&quot;</span><span class="kw"> </span><span class="dt">&quot;true&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;metamodes&quot;</span><span class="kw"> </span><span class="dt">&quot;HDMI-1: 1680x1050_60.00 +0+0 {rotation=left}&quot;</span>
    <span class="fu">SubSection</span>     <span class="st">&quot;Display&quot;</span>
        Depth<span class="kw">       </span><span class="dv">24</span>
    <span class="fu">EndSubSection</span>
<span class="fu">EndSection</span>

<span class="fu">Section</span> <span class="st">&quot;Screen&quot;</span>
    Identifier<span class="kw">     </span><span class="dt">&quot;Qnix2&quot;</span>
    Device<span class="kw">         </span><span class="dt">&quot;DVI-port-bottom&quot;</span>
    Monitor<span class="kw">        </span><span class="dt">&quot;Monitor3&quot;</span>
    DefaultDepth<span class="kw">    </span><span class="dv">24</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDID&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDDPI&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;UseEDIDFreqs&quot;</span><span class="kw"> </span><span class="dt">&quot;False&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ExactModeTimingsDVI&quot;</span><span class="kw"> </span><span class="dt">&quot;True&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;ModeValidation&quot;</span><span class="kw"> </span><span class="dt">&quot;AllowNonEdidModes, NoVertRefreshCheck, NoHorizSyncCheck, NoMaxSizeCheck, NoMaxPClkCheck, NoEDIDModes&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;NoBandWidthTest&quot;</span><span class="kw"> </span><span class="dt">&quot;true&quot;</span>
    Option<span class="kw">         </span><span class="dt">&quot;metamodes&quot;</span><span class="kw"> </span><span class="dt">&quot;DVI-D-0: 2560x1440_96 +0+0 {rotation=left}&quot;</span>
    <span class="fu">SubSection</span>     <span class="st">&quot;Display&quot;</span>
        Depth<span class="kw">       </span><span class="dv">24</span>
    <span class="fu">EndSubSection</span>
<span class="fu">EndSection</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/quad-monitor-portrait.xorg.conf"  mimetype=text/plain > quad-monitor-portrait.xorg.conf </a>
</div>
</div>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>I tried using the higher refresh rate modelines, but they resulted in my monitors going crazy (extreme artifacting, lines shrieking irregularly with different colors, etc.).<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>Linus's Haskell Coding Style (LHCS)</title>
    <link href="http://listx.github.io/post/2014-05-02-linus-haskell-coding-style.html" />
    <id>http://listx.github.io/post/2014-05-02-linus-haskell-coding-style.html</id>
    <published>2014-05-02T00:00:00Z</published>
    <updated>2014-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-05-02</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-05-02-linus-haskell-coding-style.md" title="History">*</a>
	<br>
	<a href="/tag/haskell.html">haskell</a>, <a href="/tag/programming.html">programming</a>
</div>

<p>Haskell is my favorite programming language. However, unlike mainstream languages (C, Java, Ruby, etc.), there are no known “coding styles” for it. C has the venerable Linux Kernel Coding Style <a href="https://www.kernel.org/doc/Documentation/CodingStyle">LKCS</a>, among many others. I really like LKCS because it is designed to be as readable as possible, and is actually pretty simple (no fancy indentation/brace rules). I just wish there was something like LKCS for Haskell, mainly because every time I open up Haskell code somebody else wrote, it is plagued with gargantuan amounts of indentation. It really has gotten out of hand. So, I hereby propose some rules to reduce the level of indentation, whether you use tabs or spaces.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<p>NOTE: I use 4-character-wide tabs for Haskell; your browser may not render this correctly, but bear with me.</p>
<h2 id="chapter-1-indentation">Chapter 1: Indentation</h2>
<h3 id="wherever-possible-use-minimal-hanging-indentation">Wherever possible, use minimal hanging indentation</h3>
<p>That is, indent as little as possible.</p>
<h4 id="where-clause"><code>where</code> clause</h4>
<p>Whenever you use a <code>where</code> clause, use it like this:</p>
<pre><code>...
f x y
	where
	f = ...
	x = ...
	y = ...
	...</code></pre>
<p>That is, put <code>where</code> on its own line, and then avoid any additional indentation for all definitions that follow.</p>
<h4 id="guards">Guards</h4>
<p>Use guards like this:</p>
<pre><code>someArbitraryFunctionName x y z
	| x == 0 = ...
	| y == 0 = ...
	| z == 0 = ...
	| otherwise = ...</code></pre>
<p>not like this:</p>
<pre><code>someArbitraryFunctionName x y z | x == 0 = ...
                                | y == 0 = ...
                                | z == 0 = ...
                                | otherwise = ...</code></pre>
<p>I.e., put guards on their own line with a single indent.</p>
<h4 id="case-expressions"><code>case</code> expressions</h4>
<p>Do not vertically-align the different cases.</p>
<p>Do</p>
<pre><code>foo x = case x of
	Abcdef y -&gt; ...
	Foo y -&gt; ...
	Abracadabra y -&gt; ...</code></pre>
<p>instead of</p>
<pre><code>foo x = case x of
	Abcdef y      -&gt; ...
	Foo y         -&gt; ...
	Abracadabra y -&gt; ...</code></pre>
<p>. The only time you should vertically align <em>anything</em> is for lists, or perhaps long tuples.</p>
<h4 id="lists">Lists</h4>
<p>Align lists as follows:</p>
<pre><code>someLongList =
	[ abcd
	, efghi
	, jkl
	, m
	, nopqrstu
	, vwxyz
	]</code></pre>
<p>. You may align long tuples in a similar manner.</p>
<h4 id="do-notation"><code>do</code> notation</h4>
<p>Use ``hanging’’ do-notation:</p>
<pre><code>main = do
	x &lt;- foo
	y z</code></pre>
<p>instead of</p>
<pre><code>main = do x &lt;- foo
          y z</code></pre>
<p>(which tries to align the <code>x</code> and <code>y</code> together)</p>
<p>or</p>
<pre><code>main = do
          x &lt;- foo
          y z</code></pre>
<p>. When writing <code>let</code> statements inside <code>do</code> notation, write the keyword <code>let</code> on its own line, and indent any subsequent <code>let</code>-bindings.</p>
<h2 id="chapter-2-misc-guidelines">Chapter 2: Misc Guidelines</h2>
<h3 id="always-use-explicit-type-signatures">Always use explicit type signatures</h3>
<p>Everyone reading your code will appreciate it. Don’t force me to load up your code in GHCi to figure out how to use it with (:t) — <strong>stop wasting everyone’s time</strong>.</p>
<h3 id="refrain-from-infix-notation">Refrain from infix notation</h3>
<p>Sometimes infix notation makes code shorter, but it gets confusing when you use the same function with and without it. Also, in many cases prefix notation is simply shorter because you don’t have to use the two backtick characters around the function name. Use infix notation as often as you’d use GOTO in C.</p>
<h3 id="prefer-where-over-let">Prefer <code>where</code> over <code>let</code></h3>
<p>This is because if you use <code>where</code> clauses, the high-level code comes first, followed by <code>where</code> and the various smaller components that make up the preceding code. Macro-to-micro reading/understanding is almost always superior. Using <code>where</code> clauses also has the benefit of allowing you to more easily move out helper functions defined as part of a <code>where</code> block into their own standalone functions if they grow too big. If you use <code>let</code> expressions, you run the risk of including variables in the parent function block’s scope, which makes “detaching” them harder later on.</p>
<h3 id="do-not-use-multiline-----comment-blocks">Do not use multiline {- -} comment blocks</h3>
<p>Haddock prefers single-line comments, anyway.</p>
<h3 id="use-two-groups-of-imports-system-wide-and-package-wide-and-have-each-group-alphabetically-ordered">Use two groups of imports: system-wide and package-wide (and have each group alphabetically ordered)</h3>
<p>Import all external library modules in their own ``paragraph’’, followed by those modules of your own library; e.g., do</p>
<pre><code>import Control.Monad
import Data.Maybe
import Data.Text

import MyModule.One
import MyModule.Two</code></pre>
<p>.</p>
<h3 id="place-one-pragma-per-line-in-alphabetical-order">Place one pragma per line, in alphabetical order</h3>
<p>Do it like this:</p>
<pre><code>{-# LANGUAGE SomeBadExtension #-}
{-# LANGUAGE SomeCoolExtension #-}
{-# LANGUAGE SomeScaryExtension #-}
{-# LANGUAGE SomeUglyExtension #-}
{-# LANGUAGE StrangeExtensionNobodyUnderstands #-}</code></pre>
<h3 id="try-to-use-as-few-pragmas-as-possible">Try to use as few pragmas as possible</h3>
<p>Do not use 20 language extensions when you don’t have to. Saving a handful of keystrokes is not a good reason to use a multitude of extensions.</p>
<h3 id="when-writing-documentation-prefer-high-level-documentation-over-line-by-line-documentation">When writing documentation, prefer high-level documentation over line-by-line documentation</h3>
<p>If you have a 20-line function, write how it works with a high-level overview. Haskell is a pure language so it’s very easy to tell how the small pieces work. So, explain the bigger pieces, and <em>why</em> they are necessary as written.</p>
<h3 id="breaking-long-lines-and-strings">Breaking long lines and strings</h3>
<p>We follow LKCS’s 80-character column limit.</p>
<p>If you must, break long lines into sensible chunks. If a function has numerous arguments, you may put each argument on its own line. If you want to break up a long chain of functions, break them up like this:</p>
<pre><code>foo x y z = head
	. init
	. blahblah y
	. funcMX x
	$ abcd z</code></pre>
<p>, with each function on its own line, with the function composition operator <code>.</code> as the leading character, similar to how the comma <code>,</code> is the leading character for breaking up long lists.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>I prefer tabs for indentation, and spaces for alignment (which does happen once in a blue moon).<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>OpenGL from Haskell (#3: Matrices)</title>
    <link href="http://listx.github.io/post/2014-03-19-opengl-haskell-3-matrices.html" />
    <id>http://listx.github.io/post/2014-03-19-opengl-haskell-3-matrices.html</id>
    <published>2014-03-19T00:00:00Z</published>
    <updated>2014-03-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-03-19</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-03-19-opengl-haskell-3-matrices.md" title="History">*</a>
	<br>
	<a href="/tag/haskell.html">haskell</a>, <a href="/tag/opengl.html">opengl</a>
</div>

<p>The following is my translation/adaptation of <a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/">tutorial #2</a> at <a href="http://www.opengl-tutorial.org" class="uri">http://www.opengl-tutorial.org</a>. My <a href="2014-03-15-opengl-from-haskell.html">last post</a> was a translation of tutorial #2, which dealt with triangles — this is the reason why this post’s title is called “#3: Matrices”. The end result of this tutorial is a 3D triangle with 3 different colored vertices that are interpolated smoothly by OpenGL.</p>
<p>My version again uses the code from <a href="https://github.com/YPares/Haskell-OpenGL3.1-Tutos" class="uri">https://github.com/YPares/Haskell-OpenGL3.1-Tutos</a>. The <code>Data.Vec</code> import is for the <a href="http://hackage.haskell.org/package/Vec">Vec</a> package. Like my last post, my code here does does not use <code>Control.Applicative</code> puts everything, including the GLSL shaders directly into the code. The <code>RankNTypes</code> and <code>TypeOperators</code> GHC extensions are only there to suppress warnings from using <code>ghc --make -Wall</code>; if you don’t want to use these extensions, just remove the type signature for the <code>vec3</code> function near the bottom.</p>
<p>I have also removed the use of backticks for Haskell’s infix notation (<code>`...`</code>). It’s not because I like using parentheses — I just don’t like using infix notation because it runs against the argument handling order of normal functions found everywhere else.</p>
<p>Also, I have fixed YPares’s original <code>lookAt</code> function which is actually <a href="https://github.com/YPares/Haskell-OpenGL3.1-Tutos/commit/7a027b927d061fbd26138cb7357c40c4cacbc927">broken as of commit 7a027b927d061fbd26138cb7357c40c4cacbc927</a>; you will need my version if you wish to pursue the later tutorials that actually test the validity of this function, such as the keyboard/mouse input tutorial #6 from <a href="http://www.opengl-tutorial.org" class="uri">http://www.opengl-tutorial.org</a>.</p>
<p>The code here is released into the Public Domain.</p>
<div class="code-and-raw">
<table class="sourceCode numberLines haskell" input="code/opengl/matrices.hs"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE PackageImports #-}</span>
<span class="ot">{-# LANGUAGE RecordWildCards #-}</span>
<span class="ot">{-# LANGUAGE RankNTypes #-}</span>
<span class="ot">{-# LANGUAGE TypeOperators #-}</span>
<span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span>
<span class="kw">import </span><span class="dt">Data.Vec</span>
<span class="kw">import </span><span class="dt">Foreign</span>
<span class="kw">import </span><span class="dt">Foreign.C.String</span>
<span class="kw">import </span><span class="dt">Foreign.C.Types</span>
<span class="kw">import qualified</span> &quot;<span class="dt">GLFW</span>-b&quot; <span class="dt">Graphics.UI.GLFW</span> <span class="kw">as</span> <span class="dt">GLFW</span>
<span class="kw">import </span><span class="dt">Graphics.Rendering.OpenGL.Raw</span>
<span class="kw">import </span><span class="dt">System.Exit</span>

<span class="kw">data</span> <span class="dt">GLIDs</span> <span class="fu">=</span> <span class="dt">GLIDs</span>
	{<span class="ot"> progId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> vertexArrayId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> vertexAttrib ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> vertexBufferId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> colorAttrib ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> colorBufferId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> mvpMatrixUniform ::</span> <span class="fu">!</span><span class="dt">GLint</span>
	}

<span class="ot">withNewPtr ::</span> <span class="dt">Storable</span> b <span class="ot">=&gt;</span> (<span class="dt">Ptr</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> b
withNewPtr f <span class="fu">=</span> alloca (\p <span class="ot">-&gt;</span> f p <span class="fu">&gt;&gt;</span> peek p)

<span class="ot">initialize ::</span> <span class="dt">IO</span> <span class="dt">GLFW.Window</span>
initialize <span class="fu">=</span> <span class="kw">do</span>
	ok <span class="ot">&lt;-</span> GLFW.init
	when (not ok) <span class="fu">$</span> <span class="kw">do</span>
		_ <span class="ot">&lt;-</span> fail <span class="st">&quot;Failed to initialize GLFW&quot;</span>
		exitFailure
	mapM_ GLFW.windowHint
		[ <span class="dt">GLFW.WindowHint&#39;Samples</span> <span class="dv">4</span> <span class="co">-- 4x antialiasing</span>
		, <span class="dt">GLFW.WindowHint&#39;ContextVersionMajor</span> <span class="dv">3</span> <span class="co">-- OpenGL 3.3</span>
		, <span class="dt">GLFW.WindowHint&#39;ContextVersionMinor</span> <span class="dv">3</span>
		, <span class="dt">GLFW.WindowHint&#39;OpenGLProfile</span> <span class="dt">GLFW.OpenGLProfile&#39;Core</span>
		]

	win <span class="ot">&lt;-</span> GLFW.createWindow <span class="dv">800</span> <span class="dv">600</span> <span class="st">&quot;Window Title&quot;</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span>
	when (isNothing win) <span class="fu">$</span> <span class="kw">do</span>
		_ <span class="ot">&lt;-</span> fail <span class="st">&quot;Failed to create OpenGL window&quot;</span>
		GLFW.terminate
		exitFailure
	<span class="kw">let</span>
		win&#39; <span class="fu">=</span> fromJust win
	GLFW.makeContextCurrent win
	GLFW.setStickyKeysInputMode win&#39; <span class="dt">GLFW.StickyKeysInputMode&#39;Enabled</span>
	return win&#39;

<span class="ot">initializeGL ::</span> <span class="dt">IO</span> <span class="dt">GLIDs</span>
initializeGL <span class="fu">=</span> <span class="kw">do</span>
	glClearColor <span class="dv">0</span> <span class="dv">0</span> <span class="fl">0.4</span> <span class="dv">0</span>
	progId <span class="ot">&lt;-</span> loadProgram
		(<span class="st">&quot;vertexShader2&quot;</span>, vertexShader2)
		(<span class="st">&quot;fragmentShader2&quot;</span>, fragmentShader2)
	v <span class="ot">&lt;-</span> withCString <span class="st">&quot;vertexPosition_modelspace&quot;</span>
		<span class="fu">$</span> glGetAttribLocation progId
	c <span class="ot">&lt;-</span> withCString <span class="st">&quot;vertexColor&quot;</span> <span class="fu">$</span> glGetAttribLocation progId
	m <span class="ot">&lt;-</span> withCString <span class="st">&quot;MVP&quot;</span> <span class="fu">$</span> glGetUniformLocation progId
	vertexAttrib <span class="ot">&lt;-</span> findAttribUniform v <span class="st">&quot;vertexPosition_modelspace&quot;</span>
	colorAttrib <span class="ot">&lt;-</span> findAttribUniform c <span class="st">&quot;vertexColor&quot;</span>
	mvpMatrixUniform <span class="ot">&lt;-</span> findAttribUniform m <span class="st">&quot;MVP&quot;</span>
	vertexArrayId <span class="ot">&lt;-</span> newVAO
	vertexBufferId <span class="ot">&lt;-</span> fillNewBuffer vertexBufferData
	colorBufferId <span class="ot">&lt;-</span> fillNewBuffer colorBufferData
	return <span class="dt">GLIDs</span>{<span class="fu">..</span>}
	<span class="kw">where</span>
<span class="ot">	vertexBufferData ::</span> [<span class="dt">GLfloat</span>]
	vertexBufferData <span class="fu">=</span>
		<span class="co">-- x, y, z</span>
		[ <span class="fu">-</span><span class="dv">1</span>, <span class="fu">-</span><span class="dv">1</span>, <span class="dv">0</span>
		,  <span class="dv">1</span>, <span class="fu">-</span><span class="dv">1</span>, <span class="dv">0</span>
		,  <span class="dv">0</span>,  <span class="dv">1</span>, <span class="dv">0</span>
		]
<span class="ot">	colorBufferData ::</span> [<span class="dt">GLfloat</span>]
	colorBufferData <span class="fu">=</span>
		[ <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">0</span>
		, <span class="dv">0</span>, <span class="dv">1</span>, <span class="dv">0</span>
		, <span class="dv">0</span>, <span class="dv">0</span>, <span class="dv">1</span>
		]
	findAttribUniform x name <span class="fu">=</span> <span class="kw">if</span> x <span class="fu">&lt;</span> <span class="dv">0</span>
		<span class="kw">then</span> error <span class="fu">$</span> <span class="st">&quot;`&quot;</span> <span class="fu">++</span> name <span class="fu">++</span> <span class="st">&quot;&#39; cannot be found!&quot;</span>
		<span class="kw">else</span> return <span class="fu">$</span> fromIntegral x

<span class="ot">freeResources ::</span> <span class="dt">GLIDs</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
freeResources <span class="dt">GLIDs</span>{<span class="fu">..</span>} <span class="fu">=</span> <span class="kw">do</span>
	with vertexBufferId <span class="fu">$</span> glDeleteBuffers <span class="dv">1</span>
	with colorBufferId <span class="fu">$</span> glDeleteBuffers <span class="dv">1</span>
	with vertexArrayId <span class="fu">$</span> glDeleteVertexArrays <span class="dv">1</span>

<span class="ot">newVAO ::</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
newVAO <span class="fu">=</span> <span class="kw">do</span>
	vaId <span class="ot">&lt;-</span> withNewPtr (glGenVertexArrays <span class="dv">1</span>)
	glBindVertexArray vaId
	return vaId

<span class="ot">fillNewBuffer ::</span> [<span class="dt">GLfloat</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
fillNewBuffer xs <span class="fu">=</span> <span class="kw">do</span>
	bufId <span class="ot">&lt;-</span> withNewPtr (glGenBuffers <span class="dv">1</span>)
	glBindBuffer gl_ARRAY_BUFFER bufId
	withArrayLen xs func <span class="co">-- give given vertices to OpenGL</span>
	return bufId
	<span class="kw">where</span>
	func len ptr <span class="fu">=</span> glBufferData
		gl_ARRAY_BUFFER
		(fromIntegral (len <span class="fu">*</span> sizeOf (undefined<span class="ot"> ::</span> <span class="dt">GLfloat</span>)))
		(<span class="ot">ptr ::</span> <span class="dt">Ptr</span> <span class="dt">GLfloat</span>)
		gl_STATIC_DRAW

<span class="ot">bindBufferToAttrib ::</span> <span class="dt">GLuint</span> <span class="ot">-&gt;</span> <span class="dt">GLuint</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
bindBufferToAttrib bufId attribLoc <span class="fu">=</span> <span class="kw">do</span>
	glEnableVertexAttribArray attribLoc
	glBindBuffer gl_ARRAY_BUFFER bufId
	glVertexAttribPointer
		attribLoc <span class="co">-- attribute location in the shader</span>
		<span class="dv">3</span> <span class="co">-- 3 components per vertex</span>
		gl_FLOAT <span class="co">-- coord type</span>
		(fromBool <span class="dt">False</span>) <span class="co">-- normalize?</span>
		<span class="dv">0</span> <span class="co">-- stride</span>
		nullPtr <span class="co">-- vertex buffer offset</span>

<span class="ot">loadProgram ::</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="ot">-&gt;</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
loadProgram vertShader fragShader <span class="fu">=</span> <span class="kw">do</span>
	shaderIds <span class="ot">&lt;-</span> mapM (uncurry loadShader)
		[ (gl_VERTEX_SHADER, vertShader)
		, (gl_FRAGMENT_SHADER, fragShader)
		]
	progId <span class="ot">&lt;-</span> glCreateProgram
	putStrLn <span class="st">&quot;Linking program&quot;</span>
	mapM_ (glAttachShader progId) shaderIds
	glLinkProgram progId
	_ <span class="ot">&lt;-</span> checkStatus
		gl_LINK_STATUS glGetProgramiv glGetProgramInfoLog progId
	mapM_ glDeleteShader shaderIds
	return progId

<span class="ot">loadShader ::</span> <span class="dt">GLenum</span> <span class="ot">-&gt;</span> (<span class="dt">String</span>, <span class="dt">String</span>) <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
loadShader shaderTypeFlag (name, code) <span class="fu">=</span> <span class="kw">do</span>
	shaderId <span class="ot">&lt;-</span> glCreateShader shaderTypeFlag
	withCString code <span class="fu">$</span> \codePtr <span class="ot">-&gt;</span>
		with codePtr <span class="fu">$</span> \codePtrPtr <span class="ot">-&gt;</span>
			glShaderSource shaderId <span class="dv">1</span> codePtrPtr nullPtr
	putStrLn <span class="fu">$</span> <span class="st">&quot;Compiling shader `&quot;</span> <span class="fu">++</span> name <span class="fu">++</span> <span class="st">&quot;&#39;&quot;</span>
	glCompileShader shaderId
	_ <span class="ot">&lt;-</span> checkStatus
		gl_COMPILE_STATUS glGetShaderiv glGetShaderInfoLog shaderId
	return shaderId

<span class="ot">checkStatus ::</span> (<span class="dt">Integral</span> a1, <span class="dt">Storable</span> a1)
	<span class="ot">=&gt;</span> <span class="dt">GLenum</span>
	<span class="ot">-&gt;</span> (t <span class="ot">-&gt;</span> <span class="dt">GLenum</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> a1 <span class="ot">-&gt;</span> <span class="dt">IO</span> a)
	<span class="ot">-&gt;</span> (t <span class="ot">-&gt;</span> a1 <span class="ot">-&gt;</span> <span class="dt">Ptr</span> a3 <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">Foreign.C.Types.CChar</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a2)
	<span class="ot">-&gt;</span> t
	<span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Bool</span>
checkStatus statusFlag glGetFn glInfoLogFn componentId <span class="fu">=</span> <span class="kw">do</span>
	<span class="kw">let</span>
		fetch info <span class="fu">=</span> withNewPtr (glGetFn componentId info)
	status <span class="ot">&lt;-</span> liftM toBool <span class="fu">$</span> fetch statusFlag
	logLength <span class="ot">&lt;-</span> fetch gl_INFO_LOG_LENGTH
	when (logLength <span class="fu">&gt;</span> <span class="dv">0</span>) <span class="fu">$</span>
		allocaArray0 (fromIntegral logLength) <span class="fu">$</span> \msgPtr <span class="ot">-&gt;</span> <span class="kw">do</span>
			_ <span class="ot">&lt;-</span> glInfoLogFn componentId logLength nullPtr msgPtr
			msg <span class="ot">&lt;-</span> peekCString msgPtr
			(<span class="kw">if</span> status <span class="kw">then</span> putStrLn <span class="kw">else</span> fail) msg
	return status

<span class="ot">fragmentShader2 ::</span> <span class="dt">String</span>
fragmentShader2 <span class="fu">=</span> unlines
	[ <span class="st">&quot;#version 330 core&quot;</span>
	, <span class="st">&quot;in vec3 fragmentColor;&quot;</span>
	, <span class="st">&quot;out vec3 finalColor;&quot;</span>
	, <span class="st">&quot;void main()&quot;</span>
	, <span class="st">&quot;{&quot;</span>
		, <span class="st">&quot;finalColor= fragmentColor;&quot;</span>
	, <span class="st">&quot;}&quot;</span>
	]

<span class="ot">vertexShader2 ::</span> <span class="dt">String</span>
vertexShader2 <span class="fu">=</span> unlines
	[ <span class="st">&quot;#version 330 core&quot;</span>
	<span class="co">-- Input vertex data, different for all executions of this shader.</span>
	, <span class="st">&quot;in vec3 vertexPosition_modelspace;&quot;</span>
	, <span class="st">&quot;in vec3 vertexColor;&quot;</span>
	<span class="co">-- Values that stay constant for the whole mesh</span>
	, <span class="st">&quot;uniform mat4 MVP;&quot;</span>
	, <span class="st">&quot;out vec3 fragmentColor;&quot;</span>
	, <span class="st">&quot;void main()&quot;</span>
	, <span class="st">&quot;{&quot;</span>
		, <span class="st">&quot;fragmentColor = vertexColor;&quot;</span>
		, <span class="st">&quot;vec4 v = vec4(vertexPosition_modelspace, 1);&quot;</span>
		, <span class="st">&quot;gl_Position = MVP * v;&quot;</span>
	, <span class="st">&quot;}&quot;</span>
	]

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
	win <span class="ot">&lt;-</span> initialize
	glids <span class="ot">&lt;-</span> initializeGL
	inputLoop win glids
	freeResources glids
	GLFW.terminate
	return ()

<span class="ot">inputLoop ::</span> <span class="dt">GLFW.Window</span> <span class="ot">-&gt;</span> <span class="dt">GLIDs</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
inputLoop win glids <span class="fu">=</span> <span class="kw">do</span>
	drawStuff glids
	GLFW.swapBuffers win
	GLFW.pollEvents
	keyState <span class="ot">&lt;-</span> GLFW.getKey win <span class="dt">GLFW.Key&#39;Escape</span>
	closeWindow <span class="ot">&lt;-</span> GLFW.windowShouldClose win
	when (keyState <span class="fu">/=</span> <span class="dt">GLFW.KeyState&#39;Pressed</span> <span class="fu">&amp;&amp;</span> closeWindow <span class="fu">==</span> <span class="dt">False</span>) <span class="fu">$</span>
		inputLoop win glids

<span class="ot">drawStuff ::</span> <span class="dt">GLIDs</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
drawStuff <span class="dt">GLIDs</span>{<span class="fu">..</span>} <span class="fu">=</span> <span class="kw">do</span>
	glClear gl_COLOR_BUFFER_BIT
	glClear gl_DEPTH_BUFFER_BIT
	glUseProgram progId
	<span class="co">-- the (fromBool True) is because we are ROW-first (Data.Vec)</span>
	with mvpMatrix
		<span class="fu">$</span> glUniformMatrix4fv mvpMatrixUniform <span class="dv">1</span> (fromBool <span class="dt">True</span>)
		<span class="fu">.</span> castPtr
	bindBufferToAttrib vertexBufferId vertexAttrib
	bindBufferToAttrib colorBufferId colorAttrib
	glDrawArrays gl_TRIANGLES <span class="dv">0</span> <span class="dv">3</span>
	glDisableVertexAttribArray colorAttrib
	glDisableVertexAttribArray vertexAttrib

<span class="co">-- Some higher-order math helper functions. Depending on what math</span>
<span class="co">-- library you use, you&#39;d use the functions that comes with that</span>
<span class="co">-- library. The functions here are from the Data.Vec package.</span>
<span class="ot">vec3 ::</span> forall a a1 a2<span class="fu">.</span> a <span class="ot">-&gt;</span> a1 <span class="ot">-&gt;</span> a2 <span class="ot">-&gt;</span> a <span class="fu">:.</span> (a1 <span class="fu">:.</span> (a2 <span class="fu">:.</span> ()))
vec3 x y z <span class="fu">=</span> x <span class="fu">:.</span> y <span class="fu">:.</span> z<span class="fu">:.</span> ()

<span class="ot">mvpMatrix ::</span> <span class="dt">Mat44</span> <span class="dt">GLfloat</span>
mvpMatrix <span class="fu">=</span> multmm (multmm projection view) model
	<span class="kw">where</span>
	projection <span class="fu">=</span> perspective <span class="fl">0.1</span> <span class="dv">100</span> (pi<span class="fu">/</span><span class="dv">4</span>) (<span class="dv">4</span><span class="fu">/</span><span class="dv">3</span>)
	view <span class="fu">=</span> lookAt (vec3 <span class="dv">4</span> <span class="dv">3</span> <span class="dv">3</span>) (vec3 <span class="dv">0</span> <span class="dv">0</span> <span class="dv">0</span>) (vec3 <span class="dv">0</span> <span class="dv">1</span> <span class="dv">0</span>)
	model <span class="fu">=</span> identity

<span class="co">-- The closest relative to this function is Data.Vec&#39;s `rotationLookAt`. We just</span>
<span class="co">-- mirror the code found in the GLM library (glm.g-truc.net). An additional</span>
<span class="co">-- resource is Jeremiah van Oosten&#39;s &quot;Understanding the View Matrix&quot;, found at</span>
<span class="co">-- http://3dgep.com/?p=1700.</span>
<span class="ot">lookAt ::</span> <span class="dt">Floating</span> a <span class="ot">=&gt;</span> <span class="dt">Vec3</span> a <span class="ot">-&gt;</span> <span class="dt">Vec3</span> a <span class="ot">-&gt;</span> <span class="dt">Vec3</span> a <span class="ot">-&gt;</span> <span class="dt">Mat44</span> a
lookAt eye target up <span class="fu">=</span> x <span class="fu">:.</span> y <span class="fu">:.</span> z <span class="fu">:.</span> h <span class="fu">:.</span> ()
	<span class="kw">where</span>
	forward <span class="fu">=</span> normalize <span class="fu">$</span> target <span class="fu">-</span> eye
	right <span class="fu">=</span> normalize <span class="fu">$</span> cross forward up
	up&#39; <span class="fu">=</span> cross right forward
	x <span class="fu">=</span> snoc right (<span class="fu">-</span>(dot right eye))
	y <span class="fu">=</span> snoc up&#39; (<span class="fu">-</span>(dot up&#39; eye))
	z <span class="fu">=</span> snoc (<span class="fu">-</span>forward) (dot forward eye)
	h <span class="fu">=</span> <span class="dv">0</span> <span class="fu">:.</span> <span class="dv">0</span> <span class="fu">:.</span> <span class="dv">0</span> <span class="fu">:.</span> <span class="dv">1</span> <span class="fu">:.</span> ()</code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/opengl/matrices.hs"  mimetype=text/plain > matrices.hs </a>
</div>
</div>
]]></summary>
</entry>
<entry>
    <title>OpenGL from Haskell</title>
    <link href="http://listx.github.io/post/2014-03-15-opengl-from-haskell.html" />
    <id>http://listx.github.io/post/2014-03-15-opengl-from-haskell.html</id>
    <published>2014-03-15T00:00:00Z</published>
    <updated>2014-03-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-03-15</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-03-15-opengl-from-haskell.md" title="History">*</a>
	<br>
	<a href="/tag/haskell.html">haskell</a>, <a href="/tag/opengl.html">opengl</a>
</div>

<p>The following is my translation/adaptation of <a href="http://www.opengl-tutorial.org/beginners-tutorials/tutorial-2-the-first-triangle/">tutorial #2</a> at <a href="http://www.opengl-tutorial.org" class="uri">http://www.opengl-tutorial.org</a>. It draws a single red triangle on the screen with a dark blue background. It takes quite a bit of boilerplate code just to get something on the screen!</p>
<p>My version uses the code from <a href="https://github.com/YPares/Haskell-OpenGL3.1-Tutos" class="uri">https://github.com/YPares/Haskell-OpenGL3.1-Tutos</a>, but does not use <code>Control.Applicative</code> and also does not put the shaders containing GLSL in a separate text file. Everything is self-contained in one file, and it only uses the <code>PackageImports</code> and <code>RecordWildCards</code> GHC extensions. The <code>PackageImports</code> is only necessary if you have both <a href="http://hackage.haskell.org/package/GLFW">GLFW</a> and <a href="http://hackage.haskell.org/package/GLFW-b">GLFW-b</a> Hackage packages installed in your system (as they have a name clash of <code>Graphics.UI.GLFW</code>, you need to disambiguate this import by specifying the package name). The <code>RecordWildCards</code> extension is pretty standard and exists purely for syntactic sugar (no type-level hoops and such) — if you don’t know about it you should google it.</p>
<p>I went ahead and added type signatures for all top-level functions — something that many Haskell tutorial writers hate doing for some strange, unknown reason.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> Also, I ran the code through <code>ghc --make -Wall</code> and silenced all warnings.</p>
<p>I hereby release it into the Public Domain. From what I can tell, YPares’s code doesn’t have a license… I think this should be OK.</p>
<div class="code-and-raw">
<table class="sourceCode numberLines haskell" input="code/opengl/triangle.hs"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="ot">{-# LANGUAGE PackageImports #-}</span>
<span class="ot">{-# LANGUAGE RecordWildCards #-}</span>
<span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span>

<span class="kw">import </span><span class="dt">Control.Monad</span>
<span class="kw">import </span><span class="dt">Data.Maybe</span>
<span class="kw">import </span><span class="dt">Foreign</span>
<span class="kw">import </span><span class="dt">Foreign.C.String</span>
<span class="kw">import </span><span class="dt">Foreign.C.Types</span>
<span class="kw">import qualified</span> &quot;<span class="dt">GLFW</span>-b&quot; <span class="dt">Graphics.UI.GLFW</span> <span class="kw">as</span> <span class="dt">GLFW</span>
<span class="kw">import </span><span class="dt">Graphics.Rendering.OpenGL.Raw</span>
<span class="kw">import </span><span class="dt">System.Exit</span>

<span class="kw">data</span> <span class="dt">GLIDs</span> <span class="fu">=</span> <span class="dt">GLIDs</span>
	{<span class="ot"> progId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> vertexArrayId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	,<span class="ot"> vertexBufferId ::</span> <span class="fu">!</span><span class="dt">GLuint</span>
	}

<span class="ot">withNewPtr ::</span> <span class="dt">Storable</span> b <span class="ot">=&gt;</span> (<span class="dt">Ptr</span> b <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> b
withNewPtr f <span class="fu">=</span> alloca (\p <span class="ot">-&gt;</span> f p <span class="fu">&gt;&gt;</span> peek p)

<span class="ot">initialize ::</span> <span class="dt">IO</span> <span class="dt">GLFW.Window</span>
initialize <span class="fu">=</span> <span class="kw">do</span>
	ok <span class="ot">&lt;-</span> GLFW.init
	when (not ok) <span class="fu">$</span> <span class="kw">do</span>
		_ <span class="ot">&lt;-</span> fail <span class="st">&quot;Failed to initialize GLFW&quot;</span>
		exitFailure
	mapM_ GLFW.windowHint
		[ <span class="dt">GLFW.WindowHint&#39;Samples</span> <span class="dv">4</span> <span class="co">-- 4x antialiasing</span>
		, <span class="dt">GLFW.WindowHint&#39;ContextVersionMajor</span> <span class="dv">3</span> <span class="co">-- OpenGL 3.3</span>
		, <span class="dt">GLFW.WindowHint&#39;ContextVersionMinor</span> <span class="dv">3</span>
		<span class="co">-- we don&#39;t want the old OpenGL</span>
		, <span class="dt">GLFW.WindowHint&#39;OpenGLProfile</span> <span class="dt">GLFW.OpenGLProfile&#39;Core</span>
		]

	win <span class="ot">&lt;-</span> GLFW.createWindow <span class="dv">800</span> <span class="dv">600</span> <span class="st">&quot;Window Title&quot;</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span>
	when (isNothing win) <span class="fu">$</span> <span class="kw">do</span>
		_ <span class="ot">&lt;-</span> fail <span class="st">&quot;Failed to create OpenGL window&quot;</span>
		GLFW.terminate
		exitFailure
	<span class="kw">let</span>
		win&#39; <span class="fu">=</span> fromJust win
	GLFW.makeContextCurrent win

	GLFW.setStickyKeysInputMode win&#39; <span class="dt">GLFW.StickyKeysInputMode&#39;Enabled</span>

	return win&#39;

<span class="ot">initializeGL ::</span> <span class="dt">IO</span> <span class="dt">GLIDs</span>
initializeGL <span class="fu">=</span> <span class="kw">do</span>
	glClearColor <span class="dv">0</span> <span class="dv">0</span> <span class="fl">0.4</span> <span class="dv">0</span>
	progId <span class="ot">&lt;-</span> loadProgram vertexShader1 fragmentShader1
	vaId <span class="ot">&lt;-</span> newVAO
	bufId <span class="ot">&lt;-</span> fillNewBuffer vertexBufferData
	return <span class="fu">$</span> <span class="dt">GLIDs</span>
		{ progId <span class="fu">=</span> progId
		, vertexArrayId <span class="fu">=</span> vaId
		, vertexBufferId <span class="fu">=</span> bufId
		}

<span class="ot">freeResources ::</span> <span class="dt">GLIDs</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
freeResources <span class="dt">GLIDs</span>{<span class="fu">..</span>} <span class="fu">=</span> <span class="kw">do</span>
	with vertexBufferId <span class="fu">$</span> glDeleteBuffers <span class="dv">1</span>
	with vertexArrayId <span class="fu">$</span> glDeleteVertexArrays <span class="dv">1</span>

<span class="ot">newVAO ::</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
newVAO <span class="fu">=</span> <span class="kw">do</span>
	vaId <span class="ot">&lt;-</span> withNewPtr (glGenVertexArrays <span class="dv">1</span>)
	glBindVertexArray vaId
	return vaId

<span class="ot">fillNewBuffer ::</span> [<span class="dt">GLfloat</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
fillNewBuffer xs <span class="fu">=</span> <span class="kw">do</span>
	bufId <span class="ot">&lt;-</span> withNewPtr (glGenBuffers <span class="dv">1</span>)
	glBindBuffer gl_ARRAY_BUFFER bufId
	withArrayLen xs func <span class="co">-- give given vertices to OpenGL</span>
	return bufId
	<span class="kw">where</span>
	func len ptr <span class="fu">=</span> glBufferData
		gl_ARRAY_BUFFER
		(fromIntegral (len <span class="fu">*</span> sizeOf (undefined<span class="ot"> ::</span> <span class="dt">GLfloat</span>)))
		(<span class="ot">ptr ::</span> <span class="dt">Ptr</span> <span class="dt">GLfloat</span>)
		gl_STATIC_DRAW

<span class="ot">bindBufferToAttrib ::</span> <span class="dt">GLuint</span> <span class="ot">-&gt;</span> <span class="dt">GLuint</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
bindBufferToAttrib bufId attribLoc <span class="fu">=</span> <span class="kw">do</span>
	glEnableVertexAttribArray attribLoc
	glBindBuffer gl_ARRAY_BUFFER bufId
	glVertexAttribPointer
		attribLoc <span class="co">-- attribute location in the shader</span>
		<span class="dv">3</span> <span class="co">-- 3 components per vertex</span>
		gl_FLOAT <span class="co">-- coord type</span>
		(fromBool <span class="dt">False</span>) <span class="co">-- normalize?</span>
		<span class="dv">0</span> <span class="co">-- stride</span>
		nullPtr <span class="co">-- vertex buffer offset</span>

<span class="ot">loadProgram ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
loadProgram vertShader fragShader <span class="fu">=</span> <span class="kw">do</span>
	shaderIds <span class="ot">&lt;-</span> mapM (uncurry loadShader)
		[ (gl_VERTEX_SHADER, vertShader)
		, (gl_FRAGMENT_SHADER, fragShader)
		]
	progId <span class="ot">&lt;-</span> glCreateProgram
	putStrLn <span class="st">&quot;Linking program&quot;</span>
	mapM_ (glAttachShader progId) shaderIds
	glLinkProgram progId
	_ <span class="ot">&lt;-</span> checkStatus
		gl_LINK_STATUS glGetProgramiv glGetProgramInfoLog progId
	mapM_ glDeleteShader shaderIds
	return progId

<span class="ot">loadShader ::</span> <span class="dt">GLenum</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">GLuint</span>
loadShader shaderTypeFlag code <span class="fu">=</span> <span class="kw">do</span>
	shaderId <span class="ot">&lt;-</span> glCreateShader shaderTypeFlag
	withCString code <span class="fu">$</span> \codePtr <span class="ot">-&gt;</span>
		with codePtr <span class="fu">$</span> \codePtrPtr <span class="ot">-&gt;</span>
			glShaderSource shaderId <span class="dv">1</span> codePtrPtr nullPtr
	putStrLn <span class="st">&quot;Compiling shader...&quot;</span>
	glCompileShader shaderId
	_ <span class="ot">&lt;-</span> checkStatus
		gl_COMPILE_STATUS glGetShaderiv glGetShaderInfoLog shaderId
	return shaderId

<span class="ot">checkStatus ::</span> (<span class="dt">Integral</span> a1, <span class="dt">Storable</span> a1)
	<span class="ot">=&gt;</span> <span class="dt">GLenum</span>
	<span class="ot">-&gt;</span> (t <span class="ot">-&gt;</span> <span class="dt">GLenum</span> <span class="ot">-&gt;</span> <span class="dt">Ptr</span> a1 <span class="ot">-&gt;</span> <span class="dt">IO</span> a)
	<span class="ot">-&gt;</span> (t <span class="ot">-&gt;</span> a1 <span class="ot">-&gt;</span> <span class="dt">Ptr</span> a3 <span class="ot">-&gt;</span> <span class="dt">Ptr</span> <span class="dt">Foreign.C.Types.CChar</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a2)
	<span class="ot">-&gt;</span> t
	<span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Bool</span>
checkStatus statusFlag glGetFn glInfoLogFn componentId <span class="fu">=</span> <span class="kw">do</span>
	<span class="kw">let</span>
		fetch info <span class="fu">=</span> withNewPtr (glGetFn componentId info)
	status <span class="ot">&lt;-</span> liftM toBool <span class="fu">$</span> fetch statusFlag
	logLength <span class="ot">&lt;-</span> fetch gl_INFO_LOG_LENGTH
	when (logLength <span class="fu">&gt;</span> <span class="dv">0</span>) <span class="fu">$</span>
		allocaArray0 (fromIntegral logLength) <span class="fu">$</span> \msgPtr <span class="ot">-&gt;</span> <span class="kw">do</span>
			_ <span class="ot">&lt;-</span> glInfoLogFn componentId logLength nullPtr msgPtr
			msg <span class="ot">&lt;-</span> peekCString msgPtr
			(<span class="kw">if</span> status <span class="kw">then</span> putStrLn <span class="kw">else</span> fail) msg
	return status

<span class="ot">fragmentShader1 ::</span> <span class="dt">String</span>
fragmentShader1 <span class="fu">=</span> unlines
	[ <span class="st">&quot;#version 330 core&quot;</span>
	, <span class="st">&quot;out vec3 color;&quot;</span>
	, <span class="st">&quot;void main()&quot;</span>
	, <span class="st">&quot;{&quot;</span>
		, <span class="st">&quot;color =  vec3(1,0,0);&quot;</span> <span class="co">-- paint it red!</span>
	, <span class="st">&quot;}&quot;</span>
	]

<span class="ot">vertexShader1 ::</span> <span class="dt">String</span>
vertexShader1 <span class="fu">=</span> unlines
	[ <span class="st">&quot;#version 330 core&quot;</span>
	, <span class="st">&quot;layout(location = 0) in vec3 vPosition_modelspace;&quot;</span>
	, <span class="st">&quot;void main()&quot;</span>
	, <span class="st">&quot;{&quot;</span>
		, <span class="st">&quot;gl_Position.xyz = vPosition_modelspace;&quot;</span>
		, <span class="st">&quot;gl_Position.w = 1.0;&quot;</span>
	, <span class="st">&quot;}&quot;</span>
	]


<span class="ot">vertexBufferData ::</span> [<span class="dt">GLfloat</span>]
vertexBufferData <span class="fu">=</span>
	<span class="co">-- x, y, z</span>
	[ <span class="fu">-</span><span class="dv">1</span>, <span class="fu">-</span><span class="dv">1</span>, <span class="dv">0</span>
	,  <span class="dv">1</span>, <span class="fu">-</span><span class="dv">1</span>, <span class="dv">0</span>
	,  <span class="dv">0</span>,  <span class="dv">1</span>, <span class="dv">0</span>
	]

<span class="ot">main ::</span> <span class="dt">IO</span> ()
main <span class="fu">=</span> <span class="kw">do</span>
	win <span class="ot">&lt;-</span> initialize
	glids <span class="ot">&lt;-</span> initializeGL
	inputLoop win glids
	freeResources glids
	GLFW.terminate
	return ()

<span class="ot">inputLoop ::</span> <span class="dt">GLFW.Window</span> <span class="ot">-&gt;</span> <span class="dt">GLIDs</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
inputLoop win glids <span class="fu">=</span> <span class="kw">do</span>
	drawStuff glids
	GLFW.swapBuffers win
	GLFW.pollEvents
	keyState <span class="ot">&lt;-</span> GLFW.getKey win <span class="dt">GLFW.Key&#39;Escape</span>
	closeWindow <span class="ot">&lt;-</span> GLFW.windowShouldClose win
	when (keyState <span class="fu">/=</span> <span class="dt">GLFW.KeyState&#39;Pressed</span> <span class="fu">&amp;&amp;</span> closeWindow <span class="fu">==</span> <span class="dt">False</span>) <span class="fu">$</span>
		inputLoop win glids

<span class="ot">drawStuff ::</span> <span class="dt">GLIDs</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
drawStuff <span class="dt">GLIDs</span>{<span class="fu">..</span>} <span class="fu">=</span> <span class="kw">do</span>
	glClear gl_COLOR_BUFFER_BIT
	glClear gl_DEPTH_BUFFER_BIT
	glUseProgram progId
	bindBufferToAttrib vertexBufferId <span class="dv">0</span>
	glDrawArrays gl_TRIANGLES <span class="dv">0</span> <span class="dv">3</span> <span class="co">-- for attrib array 0, draw 3 vertices</span>
	glDisableVertexAttribArray <span class="dv">0</span> <span class="co">-- disable attrib array 0</span></code></pre></td></tr></table>
<div class="raw-link">
<a  class="raw"  href= "/code/opengl/triangle.hs"  mimetype=text/plain > triangle.hs </a>
</div>
</div>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Seriously, why do so many Haskell tutorials omit function type signatures?<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>cabal2pkgbuild: A Replacement for `cabal2arch`</title>
    <link href="http://listx.github.io/post/2014-01-24-cabal2pkgbuild.html" />
    <id>http://listx.github.io/post/2014-01-24-cabal2pkgbuild.html</id>
    <published>2014-01-24T00:00:00Z</published>
    <updated>2014-01-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2014-01-24</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2014-01-24-cabal2pkgbuild.md" title="History">*</a>
	<br>
	<a href="/tag/arch.html">arch</a>, <a href="/tag/linux.html">linux</a>, <a href="/tag/haskell.html">haskell</a>, <a href="/tag/cblrepo.html">cblrepo</a>
</div>

<p>I have open-sourced the <code>maintain_cblrepo.sh</code> script I originally published <a href="2014-01-06-using-cblrepo-in-arch-linux.html">in this post</a>. You can find the repository <a href="https://github.com/listx/cabal2pkgbuild">here</a>.</p>
<p>The script is under the BSD 2-clause license. I was thinking of putting it in the public domain, but I think it’s much easier to just use the BSD license.<a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a></p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>SQLite, perhaps the most influential public domain project, has a practice of requiring all contributors to write a statement explicitly declaring that they knowingly submit their patches/improvements into the public domain. I am too lazy to do the same, so BSD license it is.<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>

</feed>
