<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Linus's Blog</title>
    <link href="http://funloop.org/atom.xml" rel="self" />
    <link href="http://funloop.org" />
    <id>http://funloop.org/atom.xml</id>
    <author>
        <name>Linus Arver</name>
        <email></email>
    </author>
    <updated>2016-12-03T00:00:00Z</updated>
    <entry>
    <title>Replaying Vim Macros</title>
    <link href="http://funloop.org/post/2016-12-03-vim-macro-replay.html" />
    <id>http://funloop.org/post/2016-12-03-vim-macro-replay.html</id>
    <published>2016-12-03T00:00:00Z</published>
    <updated>2016-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-12-03</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-12-03-vim-macro-replay.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/emacs.html">emacs</a>, <a href="/tag/vim.html">vim</a>
</div>

<p>I’ve been using Vim (and now, Emacs with Evil mode) for years — and still, every once in a while I get a pleasant surprise. Today I learned that you can replay macros from Visual Line mode! So you don’t always have to record something like <code>j0</code> at the end of your macro to get down to the next line. I.e., after recording your macro for just 1 line, select other lines that you want to replay the macro against with Visual Line mode (<code>V</code>). To replay, do</p>
<pre><code>:&#39;&lt;,&#39;&gt;g/^/norm @q
</code></pre>
<p>(assuming that you recorded your macro into the <code>q</code> register with <code>qq...q</code>).</p>
<p>Thanks to <a href="https://twitter.com/chris_mccord/status/530770735107547136">Chris McCord</a> for the tip (seek to about 3:20 in the <a href="https://youtu.be/3wAeFiGv_yE?t=3m20s">video</a>).</p>
]]></summary>
</entry>
<entry>
    <title>Shelling Out From Latex</title>
    <link href="http://funloop.org/post/2016-10-30-shelling-out-from-latex.html" />
    <id>http://funloop.org/post/2016-10-30-shelling-out-from-latex.html</id>
    <published>2016-10-30T00:00:00Z</published>
    <updated>2016-10-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-10-30</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-10-30-shelling-out-from-latex.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/tex.html">tex</a>
</div>

<h1 id="the-problem">The Problem</h1>
<p>For years, whenever I wanted to interact with the outer shell environment from Latex, I would use one of two methods:</p>
<ol>
<li>perform some shell step separately from Latex and inject it into the Latex sources, or</li>
<li>save it somewhere else and pull it in from Latex with <code>\input{foo}</code>.</li>
</ol>
<p>But I learned recently that it can be done much more simply, if you are willing to use Luatex!</p>
<h1 id="enter-luatex">Enter Luatex</h1>
<p>Let’s assume that you keep your Latex document in source control and want to inject the Git hash into the document. First, define a new command called <code>\shell</code>.</p>
<pre><code>% Call shell! See http://tex.stackexchange.com/a/114939/30920.
\newcommand\shell[1]{\directlua{
    local handle, err = io.popen([[#1]])
    if not handle then
        tex.print(err)
        os.exit(1)
    end
    local result = handle:read(&quot;*a&quot;)
    handle:close()
    tex.print(result)
}}
</code></pre>
<p>Then use it like this:</p>
<pre><code>\shell{TZ=&#39;America/Los_Angeles&#39; date}

\shell{git describe --always}%
\shell{(( $(git --no-pager diff 2&gt;/dev/null | wc -l) + $(git --no-pager diff --cached 2&gt;/dev/null | wc -l) &gt; 0 )) &amp;&amp; echo &#39;*&#39;}
</code></pre>
<p>. I then use <code>lualatex --shell-escape foo.tex</code> to compile it. This is actual code from a Luatex document of mine.</p>
<p>I am not sure which shell program gets invoked, but for most things it should not matter much.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Now you know how to shell out from Latex!</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>My Esrille Layout: The ZQ Layout</title>
    <link href="http://funloop.org/post/2016-10-01-my-esrille-layout.html" />
    <id>http://funloop.org/post/2016-10-01-my-esrille-layout.html</id>
    <published>2016-10-01T00:00:00Z</published>
    <updated>2016-10-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-10-01</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-10-01-my-esrille-layout.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/c.html">c</a>, <a href="/tag/hardware.html">hardware</a>
</div>

<h1 id="the-zq-keyoard-layout">The ZQ Keyoard Layout</h1>
<p>I’ve spent quite some time on keyboards in my previous posts, and this post is no different. After several months of tweaking my <a href="./2016-04-14-esrille-nisse-keyboard.html">original layout</a>, I have more or less settled on the final design. You can get the sources at my repo <a href="https://github.com/listx/new-keyboard">here</a>.</p>
<p>Is for the name “ZQ”, it was originally chosen from the way these keys were arranged; the location of these keys have since changed, but the name has stuck.</p>
<h2 id="base-layer">Base Layer</h2>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    ! # * □ □         □ □ / ~ $
□ □ ; y o p v 1     1 m f t r _ □ □
□ 2 a i e u w 3     2 h j k l n 3 □ &lt;--- Home row
  4 z x q &#39; &quot;         b d g c s 4
      5 6 7 8 9     5 , 6 7 8 &lt;--------- Thumb row

Left-side legend

1) PageUp
2) Escape
3) Tab
4) Shift
5) Insert
6) Super (Windows key)
7) Space
8) Caps Lock (remapped with xmodmap to Hyper key)
9) Control

Right-side legend

1) PageDown
2) Return
3) Delete
4) Shift
5) FN2
6) FN
7) Alt
8) Right Alt (aka &quot;AltGr&quot; for US International Layout)
</code></pre>
<h2 id="fn-layer">FN Layer</h2>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ □ □ □         □ □ □ □ □
□ □ ? 7 8 9 = a     a ` \ . : &amp; □ □
□ □ - 4 5 6 + ^     @ b { ( ) } □ □ &lt;--- Home row
  □ 0 1 2 3 %         | [ &lt; &gt; ] □
      □ □ b □ □     □ □ □ □ □ &lt;--------- Thumb row

Left-side legend

a) Home
b) Space

Right-side legend

a) End
b) Backspace
</code></pre>
<h2 id="fn2-layer">FN2 Layer</h2>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ □ □ □         □ □ □ □ □
□ □ l g h i □ □     □ □ □ □ □ □ □ □
□ □ k d e f □ □     □ a b c d □ □ □ &lt;--- Home row
  □ j a b c □         □ □ □ □ □ □
      □ □ □ □ □     □ □ □ □ □ &lt;--------- Thumb row

Left-side legend

a) F1
b) F2
c) F3
d) F4
e) F5
f) F6
g) F7
h) F8
i) F9
j) F10
k) F11
l) F12

Right-side legend

a) Left Arrow
b) Down Arrow
c) Up Arrow
d) Right Arrow
</code></pre>
<h2 id="keycap-arrangement">Keycap Arrangement</h2>
<p>I have not covered this topic before, but I think it is worth mentioning. On the underside of each keycap, there is a number; presumably for the row that the keycap is designed for. I’ve rearranged the default keycap placement to better reflect how I use my keys. The biggest change from the default Esrille setup is that I vertically flip the thumb row keys, so that they are “upside-down”. I find this arrangement more comfortable for my thumbs.</p>
<pre><code>    n n n n n n     n n n n n n
    n n n n n         n n n n n
n 3 3 3 3 3 3 n     n 3 3 3 3 3 3 n
3 3 2 2 2 2 2 n     n 2 2 2 2 2 3 3 &lt;--- Home row
  1 2 1 1 1 2         2 1 1 1 2 1
      1 1 1 1 1     1 1 1 1 1 &lt;--------- Thumb row*

Legend

n) No number
1) Row 1
2) Row 2
3) Row 3

*The thumb row keycaps are flipped upside-down for better comfort.
</code></pre>
<h1 id="typing-speed">Typing Speed</h1>
<p>After some time, I realized that the end goal was to design a layout that was not more “optimal” in the sense of mechanical efficiency, but rather to design something more <em>comfortable</em> to use. I can readily say that even at this early stage, I tend to like this layout more over Qwerty because my hands stay put as I type. The only time I move my wrists from their default position is when I need to reach the six keys up top in the base layer (<code>!#*/~$</code>).</p>
<p>It may turn out that this new layout does not really improve raw typing speed; but really I don’t care because home-row access to parentheses and the backspace key are too good to let go.</p>
<h1 id="other-thoughts">Other Thoughts</h1>
<p>The design has changed quite a bit in these past few months. After some initial trials, I realized that the arrangement recommended by my <a href="https://github.com/listx/keylo">program</a> was not really optimized the way I wanted it to be. For one, the corpus I fed into the program was not very good because it didn’t realy reflect my real-world use-case; I use Vim-style HJKL keys almost everywhere, and really to get a truly representative histogram of keypresses, I should have used a keylogger for some months to record my actual usage. As time was of the essence, I decided to just evolve the layout gradually, tweaking bits I found annoying.</p>
<p>One hurdle was simply trying to avoid using the same finger in succession. In the current ZQ layout, the right index finger is charged with six keys: MHBFJD. It took a lot of trial and error to arrive at this combination.</p>
<p>I also just kept the original Qwerty placement of the HJKL keys. The main reason is that I use these keys all the time, so much that they deserve their original home-row placement. And, actually they helped in reducing same-finger consecutiveness (J and K are rare letters in English).</p>
<p>Another point of concern was the interaction of some key combinations like YN and &lt;Return&gt;. It is common to type either Y or N and press &lt;Return&gt; immediately after, when dealing with interactive torminal programs. The same goes for some UNIX-y combinations like <code>~/</code> for the home directory in the filesystem, or <code>*</code> and <code>/</code> for interactive search in vim(1) and less(1), respectvely. The current design of ZQ strives to make these combinations easy to type.</p>
<p>Lastly, I paid a great deal of attention for certain common letter combinations — in particular, “gh”, “ch”, “sh”, “th”, and “wh”. Because I decided to keep HJKL keys on the home row, and because H was assigned to the right index finger, I had to make sure that I place the GCSTW keys either on the left side of the keyboard (as I did with “W”), or place them for the other fingers. This effort alone resulted in dictating where most of the keys ended up.</p>
<p>After all that’s been said, time will tell if I truly do end up using this layout. I have a friend who uses Dvorak for work and Qwerty for gaming; perhaps I’ll end up in a similar boat.</p>
]]></summary>
</entry>
<entry>
    <title>The Parking Lot Problem, or "Smallest Free Number"</title>
    <link href="http://funloop.org/post/2016-09-24-parking-lot-problem-revisited.html" />
    <id>http://funloop.org/post/2016-09-24-parking-lot-problem-revisited.html</id>
    <published>2016-09-24T00:00:00Z</published>
    <updated>2016-09-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-09-24</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-09-24-parking-lot-problem-revisited.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/haskell.html">haskell</a>
</div>

<p>Almost exactly two years ago, I discussed what I called the <a href="./2014-09-22-parking-lot-problem.html">Parking Lot Problem</a>. Recently I discovered that it is a widely-known problem, enough to be featured in the very first chapter of <em>Pearls of Functional Algorithm Design</em> (2010) by Richard Bird — where it is simply called “smallest free number”. In this post, I want to go over Bird’s explanations in more detail; my aim is to spare you the effort in deciphering his opaque writing style.</p>
<p>Bird presents two solutions — an imperative, array-based solution and a functional solution based on divide-and-conquer.</p>
<h1 id="problem-statement">Problem Statement</h1>
<p>Bird describes the problem as “computing the smallest natural number not in a given finite set <em>X</em> of natural numbers”. Here, <strong>natural numbers</strong> means the set of all positive integers and zero, or just <code>[0..]</code> in Haskell.</p>
<p>I would like to add some further terminology. Let us think of the set <em>X</em> as <code>xs</code> (a list of elements in <em>X</em>), and call the set of all free numbers as the <em>free set</em>. Using our original parking lot analogy, the infinite parking lot is the set of all natural numbers, <em>X</em> is the list of parked spots (occupied), and finally the <em>free set</em> is the list of all unoccupied (open) parking spots.</p>
<h1 id="naive-list-based-solution">Naive list-based solution</h1>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-09-24-parking-lot-problem-revisited/naive.hs"><table class="sourceCode numberLines haskell"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.List</span> ((\\))

<span class="ot">minfreeNaive ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span>
minfreeNaive xs <span class="fu">=</span> head ([<span class="dv">0</span><span class="fu">..</span>] \\ xs)</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-09-24-parking-lot-problem-revisited/naive.hs"  mimetype=text/plain > naive.hs </a>
</div>
</div>
<p>The worst case of <strong>minfreeNaive</strong> is <span class="math inline">\(\Theta(n^2)\)</span>, because it translates into imperative pseudocode as follows:</p>
<pre><code># Algorithm P1
minfreeNaive(xs)
{
  let freeSpots = array from 0 to infinity
  let i = all natural numbers 0 to infinity
  let j = i
  let xs_max_idx = xs.length - 1

  for (i = 0;; i++) {
    for (j = 0; j &lt; xs_max_idx; j++) {
      if (i == xs[j]) {
        remove i from freeSpots
      }
    }

    if (i &gt; xs_max_idx) {
      break
    }
  }

  return freeSpots.first_one
}
</code></pre>
<p>. Now imagine if <strong>xs</strong> looks like <strong>[9,8,7,6,5,4,3,2,1,0]</strong>. Then the first iteration of the outer <strong>i</strong> for-loop would check all 10 values in <strong>xs</strong>, until finally hitting the last value in <strong>xs</strong>, 0 to remove that 0 from <strong>candidates</strong>. Then the second iteration would check all values 9 through 2, until removing <strong>1</strong> from candidates. And so on, until it removed 9 as well. So, the total number of times that single <strong>if</strong> statement gets executed is</p>
<p><span class="math display">\[
10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55
\]</span></p>
<p>. The formula for the sum of all positive, consecutive integers 1 through N is</p>
<p><span class="math display">\[
\frac{n(n + 1)}{2} = \frac{n^2 + n}{2}.
\]</span></p>
<p>In Big-O notation, the above reduces to just <span class="math inline">\(n^2\)</span> because of the first term <span class="math inline">\(n^2\)</span> in <span class="math inline">\(n^2 + n\)</span>. <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> As a side note, the above equation has a colorful history in mathematics, <a href="https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss#Anecdotes">anecdotally attributed to Gauss</a>.</p>
<h1 id="interlude-key-insight-of-the-problem">Interlude: Key insight of the problem</h1>
<p>Bird says the following:</p>
<blockquote>
<p>The key fact for both the array-based and divide and conquer solutions is that not every number in the range [ 0 .. <em>length xs</em> ] can be in <em>xs</em>. Thus the smallest number not in <em>xs</em> is the smallest number not in <em>filter (&lt;= n) xs</em>, where <em>n = length xs</em>.</p>
</blockquote>
<p>. Let’s examine the first sentence. Consider <code>length xs = 1</code>. That is, what if <code>xs</code> is only 1 element big (only 1 car is parked in the lot)? Intuitively, it appears that we don’t need to perform millions and millions of checks. Since we know that there is only 1 car parked, we just need to consider if that car is in Parking Spot 0 (the first free spot, or <em>PS0</em>). If it is, then we can assign the next slot, PS1. Otherwise, we can assign PS0 itself. If there are 2 cars parked (<code>length xs = 2</code>), in total we need only consider the first 2 spots, PS0, PS1 — if those are both taken, then the answer is PS2.</p>
<p>This leads us to the main theorem of this problem (let’s call it the <strong>Fullness Theorem</strong>):</p>
<blockquote>
<p>For any <strong>n</strong> cars parked, we can consider the spots numbered <code>[0..(n-1)]</code>; if all of those spots are full, we can assign spot <strong>n</strong> itself.</p>
</blockquote>
<p>(This statement may seem elementary, but it plays a crucial role in the divide-and-conquer approach discussed later.) Now, since <code>length [0..(n-1)]</code> coincidentally happens to be just <strong>n</strong>, the total number of spots taken into consideration for this problem is <strong>n + 1</strong> — parking spots <code>[0..(n-1)]</code> and spot <code>n</code> itself. And so we can reduce the free set to just <code>[0..(n-1)] ++ [n]</code>, or the equivalent <code>[0 .. length xs]</code> and ignore all other possible free spots. <a href="#fn2" class="footnoteRef" id="fnref2"><sup>2</sup></a> To restate, our answer to the original problem statement lies somewhere in this range <code>[0 .. length xs]</code>, which we will call <strong>reducedFrees</strong>.</p>
<p>Now let’s look at the second sentence. It describes the set <code>filter (&lt;n) xs</code>, which we will call <strong>reducedXs</strong>. <a href="#fn3" class="footnoteRef" id="fnref3"><sup>3</sup></a> The set <strong>reducedXs</strong> is found by removing all elements in <strong>xs</strong> that are too big for our problem size of <strong>n + 1</strong> spots — i.e., beyond the range in <strong>reducedFrees</strong>.</p>
<h1 id="improved-array-based-solution">Improved array-based solution</h1>
<p>Using the insight gained above, we can restate the problem as follows:</p>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-09-24-parking-lot-problem-revisited/array2.hs"><table class="sourceCode numberLines haskell"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Array</span> (<span class="dt">Array</span>, elems)
<span class="kw">import </span><span class="dt">Data.Array.ST</span> (runSTArray, newArray, writeArray)

<span class="ot">checklist ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span>
checklist xs <span class="fu">=</span> runSTArray <span class="fu">$</span> <span class="kw">do</span>
	a <span class="ot">&lt;-</span> newArray (<span class="dv">0</span>, n) <span class="dt">False</span>
	sequence [writeArray a x <span class="dt">True</span> <span class="fu">|</span> x <span class="ot">&lt;-</span> xs, x <span class="fu">&lt;</span> n]
	return a
	<span class="kw">where</span>
	n <span class="fu">=</span> length xs

<span class="ot">search ::</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
search <span class="fu">=</span>  length <span class="fu">.</span> takeWhile id <span class="fu">.</span> elems

<span class="ot">minfreeArray2 ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span>
minfreeArray2 <span class="fu">=</span> search <span class="fu">.</span> checklist</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-09-24-parking-lot-problem-revisited/array2.hs"  mimetype=text/plain > array2.hs </a>
</div>
</div>
<p>.</p>
<p>Bird says “[t]he function <em>search</em> takes an array of Booleans, converts the array into a list of Booleans and returns the length of the longest initial segment consisting of <em>True</em> entries. This number will be the position of the first <em>False</em> entry.” This is true, and we’ll soon see why this is the case.</p>
<p>In order to understand how <strong>minfreeArray1</strong> works, let’s first examine a further simplification of the problem. Conceptually we are only interested in the very first group of consecutively parked cars (if it exists at all), because as soon as this first group of cars ends, we are at the lowest-numbered free parking spot. In binary, we can represent an empty spot as 0 and a parked car as 1. The set of parked cars in <strong>reducedXs</strong> might look something like this (using a <code>.</code> for <code>0</code>):</p>
<pre class="example"><code>111111.11.1.111.1.111.111.11.1......1.1.111.1
^^^^^^
</code></pre>
<p>. Although there are many groups of parked cars, we are only interested in the <strong>first</strong> group, denoted by the hat signs. Consider another example:</p>
<pre class="example"><code>.111.1.111.11...
 ^^^
</code></pre>
<p>. In this there is the triplet of cars, but it starts after an empty spot at PS0. Lastly let’s consider</p>
<pre class="example"><code>..........1..111111.111.1.1.111.1
          ^
</code></pre>
<p>; again, the first group of cars (in this case just 1 car) is preceded by an empty spot (actually, many such empty spots). In the last two examples, the answer is simply 0, for the very first spot PS0. For all other cases, the first group of cars starts from PS0, and extends some arbitrary number of spots, until “breaking” by an available spot. So there are two cases really as far as <strong>reducedXs</strong> is concerned:</p>
<ol>
<li>there is a contiguous group of car(s) from PS0 onwards, or</li>
<li>PS0 is empty.</li>
</ol>
<p>The algorithm then is simply <code>length $ takeWhile (==True) checklist</code>, where <code>checklist</code> is a list of Boolean values with a 1:1 mapping of the parking spots, in order (with <code>True</code> representing a parked car and <code>False</code> representing an empty spot). If we’re in case 2) as above, then we get 0 because <code>takeWhile</code> never grows. If we’re in case 1), <code>takeWhile</code> keeps growing until the first empty spot; coincidentally, the length of <code>takeWhile</code>’s return list happens to be the index of the next free spot, we can just use the size of the return list of <code>takeWhile</code> as-is.</p>
<p>And this is exactly what the <code>search</code> function does in the algorithm Bird describes. <code>elems</code> returns all the elements of an Array. <code>takeWhile</code> grows a list so long as the given predicate evaluates to <strong>True</strong>; since we already have Booleans, we can just use <strong>id</strong>. All we need to give as an argument to <code>search</code> is a Boolean list that is ordered from PS0 to PSn (the range of <strong>reducedXs</strong>). This conversion of a list of unordered natural numbers into a sorted list of Boolean values in the range covered by <strong>reducedXs</strong> is handled by <code>checklist</code>.</p>
<p>Bird uses the library function <code>Data.Array.accumArray</code> to populate <code>checklist</code>. <code>accumArray</code> takes a list of index-value pairs, and if there are multiple pairs with the same index, combines the values of those pairs using the accumulating function. A common use case of <code>accumArray</code> is to use it to create a histogram of values, by using <code>(+)</code> as the accumulating function (so that all values at a particular index are summed together). In the <code>checklist</code> implementation by Bird, the accumulating function is <code>(||)</code> (logical OR function) to account for the possibility of duplicate numbers in <code>xs</code>. E.g., if <code>xs = [1, 2, 1]</code>, then the ordered pairs are <code>[(0, False), (1, True), (2, True), (1, True)]</code>, and <code>checklist</code> evaluates to <code>[False, True, True]</code>, because the <code>True</code> value in the two instances of <code>(1, True)</code> are simply OR-ed together by <code>(||)</code>.</p>
<h2 id="using-accumarray-to-sort-numbers">Using <code>accumArray</code> to sort numbers</h2>
<p>Bird mentions that you can use <code>accumArray</code> to sort positive integers. The code is as follows:</p>
<div class="sourceCode" rundoc-language="haskell" rundoc-results="session"><pre class="sourceCode haskell rundoc-block"><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Array</span> (<span class="dt">Array</span>, accumArray)

<span class="ot">countlist ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Int</span>
countlist xs <span class="fu">=</span> accumArray (<span class="fu">+</span>) <span class="dv">0</span> (<span class="dv">0</span>, n) (zip xs (repeat <span class="dv">1</span>))

sort xs <span class="fu">=</span> concat [ replicate k x <span class="fu">|</span> (x, k) <span class="ot">&lt;-</span> assocs <span class="fu">$</span> countlist xs ]</code></pre></div>
<p>. (Bird defines <code>sort</code> without the use of <code>assocs</code> which gives a list of tuples of the form <code>(index, element-at-index)</code>, but that is in error.) The way it works is, <code>countlist</code> essentially builds a histogram of numbers we want to sort. So, given <code>[0, 6, 2, 0, 0]</code>, we get <code>[(0,3),(2,1),(6,1)]</code>. We then use <code>replicate</code> in <code>sort</code> to “unpack” each element of the histogram. Continuing with the example, <code>(0,3)</code> becomes <code>[0, 0, 0]</code>, <code>(2,1)</code> becomes <code>[2]</code>, and so on. Since the result looks like <code>[[0,0,0],[2],[6]]</code> we have to <code>concat</code> it to get <code>[0,0,0,2,6]</code>, our sorted list.</p>
<h2 id="sorting-for-free">Sorting for “free”</h2>
<p>It should be reiterated here that ultimately we want to have an ordered list of Booleans that preserves the occupied parking spot information in the original list of “taken” spots. The way in which <code>checklist</code> performs the conversion of unordered numbers into a nice list of Booleans in the range <code>[0..n]</code> is virtually identical in design to the algorithm described by Jon Bentley in the very first chapter of his book <em>Programming Pearls</em> (2nd Ed., 2000). There Bentley used a bitmap to represent a Boolean array because of strict memory requirements — but otherwise the spirit of the data structure remains the same.</p>
<h1 id="further-improved-array-based-solution">(Further improved) Array-based solution</h1>
<p>Bird’s final array-based algorithm uses the ST Monad to squeeze out some more performance of the <code>checklist</code> function. Here is the code:</p>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-09-24-parking-lot-problem-revisited/array2.hs"><table class="sourceCode numberLines haskell"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.Array</span> (<span class="dt">Array</span>, elems)
<span class="kw">import </span><span class="dt">Data.Array.ST</span> (runSTArray, newArray, writeArray)

<span class="ot">checklist ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span>
checklist xs <span class="fu">=</span> runSTArray <span class="fu">$</span> <span class="kw">do</span>
	a <span class="ot">&lt;-</span> newArray (<span class="dv">0</span>, n) <span class="dt">False</span>
	sequence [writeArray a x <span class="dt">True</span> <span class="fu">|</span> x <span class="ot">&lt;-</span> xs, x <span class="fu">&lt;</span> n]
	return a
	<span class="kw">where</span>
	n <span class="fu">=</span> length xs

<span class="ot">search ::</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
search <span class="fu">=</span>  length <span class="fu">.</span> takeWhile id <span class="fu">.</span> elems

<span class="ot">minfreeArray2 ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span>
minfreeArray2 <span class="fu">=</span> search <span class="fu">.</span> checklist</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-09-24-parking-lot-problem-revisited/array2.hs"  mimetype=text/plain > array2.hs </a>
</div>
</div>
<p>. The use of the ST monad here reduces memory overhead, and according to Bird it is the most efficient approach using an imperative style on top of arrays.</p>
<h1 id="divide-and-conquer-via-recursion">Divide and Conquer via Recursion</h1>
<p>Ah, recursion. Bird describes the following divide-and-conquer algorithm as a faster alternative to <code>accumArray</code>. <a href="#fn4" class="footnoteRef" id="fnref4"><sup>4</sup></a></p>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-09-24-parking-lot-problem-revisited/divideAndConquer.hs"><table class="sourceCode numberLines haskell"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="sourceCode"><pre><code class="sourceCode haskell"><span class="kw">import </span><span class="dt">Data.List</span> (partition)

<span class="ot">minfreeRecurse ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span>
minfreeRecurse xs <span class="fu">=</span> minfrom <span class="dv">0</span> (length xs, xs)

<span class="ot">minfrom ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span>, [<span class="dt">Int</span>]) <span class="ot">-&gt;</span> <span class="dt">Int</span>
minfrom a (n, xs)
	<span class="fu">|</span> (n <span class="fu">==</span> <span class="dv">0</span>) <span class="fu">=</span> a
	<span class="fu">|</span> (m <span class="fu">==</span> b <span class="fu">-</span> a) <span class="fu">=</span> minfrom b (n <span class="fu">-</span> m, bs)
	<span class="fu">|</span> otherwise <span class="fu">=</span> minfrom a (m, as)
	<span class="kw">where</span>
	(as, bs) <span class="fu">=</span> partition (<span class="fu">&lt;</span>b) xs
	b <span class="fu">=</span> a <span class="fu">+</span> (div n <span class="dv">2</span>) <span class="fu">+</span> <span class="dv">1</span>
	m <span class="fu">=</span> length as</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-09-24-parking-lot-problem-revisited/divideAndConquer.hs"  mimetype=text/plain > divideAndConquer.hs </a>
</div>
</div>
<p>The overall idea is that we can define the problem <code>minimum of ([0..] \\ xs)</code> by dividing up <code>xs</code> into 2 halves, and then look into the correct sub-part for the solution. Notice that we are partitioning the <code>xs</code> (soley the list of parked spots), and <em>not</em> the parking lot itself.</p>
<p>For example, we can divide up <code>xs</code> into <code>as</code> and <code>bs</code>, where <code>(as, bs) = partition (&lt;b) xs</code>. (The <code>partition</code> library function simply splits up a given list into 2 subsets, those that satisfy the given condition, and those that do not.) Deciding which partition to look at is simple: look in the upper partition if the lower partition (containing the smaller-numbered parking spots) is full.</p>
<p>The line <code>(n == 0) = a</code> merely means that, if the list of cars is empty, simply choose the lowest number (which is, by definition, <code>a</code>). The line <code>(m == b - a) = minfrom b (n -m, bs)</code> chooses the bigger partition of the two partitions, on the condition <code>(m == b - a)</code>. This condition asks whether the <em>length</em> of <code>as</code> (the first partition) equal to the distance of <code>b - a</code> — in other words, whether <code>as</code> fills up the entire range <code>[a..(b-1)]</code>. If it does fill up the entire range, then this parking lot subsection is completely packed with cars, so there is no point in looking; we must look into the other partition (<code>[b..]</code>) for the first empty spot. Otherwise, we look into the first partition.</p>
<p>The hard part here is choosing the value of <code>b</code> (the pivot at which we decide to partition <code>xs</code>). By definition, our partitions are <code>as</code> and <code>bs</code>, where <code>(as, bs) = partition (&lt;b) xs</code>.) There are two things we want:</p>
<ul>
<li>minimum difference in size between <code>as</code> and <code>bs</code>, and</li>
<li>nonzero length partition for the first partition <code>as</code>.</li>
</ul>
<p>We want minimal size difference between <code>as</code> and <code>bs</code> because otherwise we might end up calling <code>minfrom</code> many times; we want it so that whether we use <code>as</code> or <code>bs</code> (in whichever sequence), we deal with smaller and smaller lists of parked cars. The only way to do this is to divide the list of cars by half each time. This is where we get <code>div n 2</code>. This is, more or less, the spirit of binary search.</p>
<p>The requirement of the second condition is more subtle — we want to avoid taking a zero-length partition for <code>as</code>, because our main conditional <code>m == b - a</code> relies on the fact that this distance, <code>b - a</code>, is nonzero. This is because it must ask the question, “do the parking spots in the first partition fill up all spots in the range that it can cover?”, and this question loses its meaning if we give it an empty partition. Seen another way, the statement <code>partition (&lt;b) xs</code>, and the act of choosing those <code>xs</code> that are <code>b</code> or bigger <em>if the first partition is completely full</em>, is the recursive analogue of the Fullness Theorem. Whereas the Fullness Theorem did not really help much in the iterative array-based solution, it plays a key role in this recursive solution, because it correctly describes how to partition <code>xs</code> with minimum fuss. The phrase “otherwise assign spot <strong>n</strong> itself” in that Theorem translates to choosing the non-full, bigger partition, because it starts with spot <strong>n</strong> — the only twist here is that instead of assigning spot <strong>n</strong> directly, we re-assign ourselves a new problem of looking for parking spots <em>starting</em> with spot <strong>n</strong>. To be clear, this partitioning scheme merely discards consecutive runs of parked cars, about <code>div n 2</code> spots at a time.</p>
<p>For demonstrative purposes, let’s consider what would happen if we ignored what we just said and really did define <code>b</code> as</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">b <span class="fu">=</span> a <span class="fu">+</span> (div n <span class="dv">2</span>)</code></pre></div>
<p>for the case of <code>xs = [0]</code> and <code>n = 1</code>; we would start off with</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">minfrom <span class="dv">0</span> (<span class="dv">1</span>, [<span class="dv">0</span>])</code></pre></div>
<p>and</p>
<p><span class="math display">\[
b = 0 + (\mathrm{div}\;1\,2) = 0 + 0 = 0,
\]</span></p>
<p>such that</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">partition (<span class="fu">&lt;</span><span class="dv">0</span>) [<span class="dv">0</span>] <span class="co">-- ([], [0])</span>
<span class="co">-- as = []</span>
<span class="co">-- m = 0</span>
<span class="co">-- bs = [0]</span>
<span class="co">-- n = 1</span></code></pre></div>
<p>and since</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">(m <span class="fu">==</span> b <span class="fu">-</span> a) <span class="co">-- (0 == 0 - 0) true!</span></code></pre></div>
<p>we would in turn execute</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">minfrom b (n <span class="fu">-</span> m, bs) <span class="co">-- minfrom 0 (1, [0])</span></code></pre></div>
<p>, resulting in an infinite loop! Thus the correct way to choose <code>b</code> is with</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell">b <span class="fu">=</span> a <span class="fu">+</span> (div n <span class="dv">2</span>) <span class="fu">+</span> <span class="dv">1</span></code></pre></div>
<h2 id="running-time">Running time</h2>
<p>Bird gives the running time as <span class="math inline">\(\Theta(n)\)</span>. He offers this cryptic phrase:</p>
<blockquote>
<p>… the number of steps <span class="math inline">\(T(n)\)</span> for evaluating <em>minfrom 0 xs</em> when <em>n = length xs</em> satisfies <span class="math inline">\(T(n) = T(n\,div\,2) + \Theta(n)\)</span>, with the solution <span class="math inline">\(T(n) = \Theta(n)\)</span>.</p>
</blockquote>
<p>Alas, I am not sure what this means. Here’s my own justification of why we have running time <span class="math inline">\(\Theta(n)\)</span>. The two most expensive operations in the recursive algorithm are <code>m = length as</code> and <code>partition (&lt;b) xs</code>. The thing is that both of these calculations take <span class="math inline">\(\Theta(n)\)</span> time, and both occur only once each, for every call to <code>minfrom</code>. Now, <code>minfrom</code> calculates <code>length as</code>, but <em>it does not calculate</em> <code>length bs</code>. This is again, because of the Fullness Theorem — we only care about the first partition being completely packed with cars. Thus, we never really calculate <code>m = length as</code> over the same range. The worst case is an input like <code>xs = [0..1000]</code> where the entire range of concern is packed with cars; in this case we would calculate the length of <code>[0..500]</code>, then see that it’s full and choose the second partition. We’d then choose <code>[501..750]</code>, and so on, such that the sum of these calculations effectively cost as much as <code>length xs</code>, or <span class="math inline">\(n\)</span> itself.</p>
<h2 id="connection-to-parking-load-problem">Connection to “Parking Load” problem</h2>
<p>In my sister post, I also described a similar problem, dubbed the Parking Load problem. At the time, I was quite surprised at how the answer was much simpler and easier to calculate. From the insight I gained from the Fullness Theorem, I think it is clear why that is the case. Indeed, the Parking Load problem is just a slight wrinkle of the Fullness Theorem, where <code>n</code> (number of parked cars) is known, but <code>b</code> (the endpoint of the “partition”), if you will, is unknown. The problem is to simply compute <span class="math inline">\(b + 1 - n\)</span>. (We have to add 1 to <code>b</code> because we use 0-based indexing.) I love it when you can explain something in a new way — don’t you?</p>
<h1 id="conclusion">Conclusion</h1>
<p>I think this lays to rest (for now) the intricacies of the Parking Lot problem, or as Bird puts it, finding the smallest free number. Still, I like my parking lot analogy better because I believe it’s important to talk about problems in a way that can be related to the real world.</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Big-O only cares about growth of the algorithm; the <span class="math inline">\(n^2\)</span> will come to dominate the growth rate as <span class="math inline">\(n\)</span> gets bigger.<a href="#fnref1">↩</a></p></li>
<li id="fn2"><p>It is for this reason, apart from looping indefinitely, that justifies the <strong>break</strong> condition for the outer loop in Algorithm P1.<a href="#fnref2">↩</a></p></li>
<li id="fn3"><p>Bird wrote (&lt;=n) as the filter condition, but this is in error. The simpler <code>(&lt;n)</code> does the job just as well.<a href="#fnref3">↩</a></p></li>
<li id="fn4"><p>According to Bird, it is 20% faster than the array-based algorithm.<a href="#fnref4">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>TexLive 2016 with Docker</title>
    <link href="http://funloop.org/post/2016-08-28-texlive-with-docker.html" />
    <id>http://funloop.org/post/2016-08-28-texlive-with-docker.html</id>
    <published>2016-08-28T00:00:00Z</published>
    <updated>2016-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-08-28</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-08-28-texlive-with-docker.org" title="History">*</a>
	<br>
	<a href="/tag/linux.html">linux</a>, <a href="/tag/tex.html">tex</a>, <a href="/tag/docker.html">docker</a>
</div>

<h1 id="motivation">Motivation</h1>
<p>When I first started using TeX, my main OS was Arch Linux. This was fine until I switched to NixOS a couple years ago — I found that NixOS’s packaging of <a href="https://en.wikipedia.org/wiki/TeX_Live">TexLive</a> was not as current as Arch Linux.</p>
<p>This is still the case today.</p>
<p>As much as I love using NixOS, creating a Nix package of a very large project like TexLive is no joke.</p>
<h1 id="enter-docker">Enter Docker</h1>
<p>Containerization makes sense for small, do-one-thing-well services like webservers and such, but it makes even more sense for big, complicated <em>collections</em> of packages like TexLive. There are hundreds (thousands?) of components in TexLive: individual TeX packages, fonts, typesetting engines, etc. Thankfully, Arch Linux maintainers do a great of keeping up with upstream packages, and TexLive is no exception!</p>
<p>I’ve created a <a href="https://github.com/listx/texlive-docker">new Github project</a> (simply called <code>texlive-docker</code>) to house the Dockerfiles I use to create TexLive images — all built on top of Arch Linux as the base image. The project uses <a href="https://travis-ci.org/listx/texlive-docker">TravisCI</a> to upload images to <a href="https://hub.docker.com/r/listx/texlive/tags/">Docker Hub</a>.</p>
<p>Be sure to have a look at the <a href="https://github.com/listx/texlive-docker/blob/master/README.md">README</a> for suggestions on usage.</p>
<h1 id="closing-thoughts">Closing Thoughts</h1>
<p>If you have any suggestions for improvement (please bear in mind that we want to keep the images as simple as possible), please let me know in the Github issue tracker.</p>
<p>Happy TeX-ing!</p>
]]></summary>
</entry>
<entry>
    <title>Improved git-diff(1)</title>
    <link href="http://funloop.org/post/2016-07-17-git-diff-improved.html" />
    <id>http://funloop.org/post/2016-07-17-git-diff-improved.html</id>
    <published>2016-07-17T00:00:00Z</published>
    <updated>2016-07-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-07-17</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-07-17-git-diff-improved.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>
</div>

<h1 id="motivation">Motivation</h1>
<p>Like most people, I use git daily. For many years, I used to have these two aliases:</p>
<pre class="shell"><code>alias gdf=&quot;git diff&quot;
alias gdfc=&quot;git diff --cached&quot;
</code></pre>
<p>Last year I started working professionally as a developer and I began to work on many different repos at the same time. Oftentimes I would do either a <code>git diff</code> or <code>git diff --cached</code>, then come back to it 10 minutes later but then forget whether the diff had a <code>--cached</code> flag or not. I needed to script some more git helpers functions!</p>
<h1 id="implementation">Implementation</h1>
<p>I created a new shell function called <code>gdf</code> to replace the two aliases above. It works by first showing you the <code>git diff</code> output, then the <code>git diff --cached</code> output. For both outputs, a vertical colored “ribbon” is printed on the left margin to denote whether it’s the working tree (<code>git diff</code>) or index (<code>git diff --cached</code> aka “staging area”). The name of the repo is prepended/appended to the output as well to further disambiguate it. Here are the functions:</p>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-07-17-git-diff-improved/gdf"><table class="sourceCode numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="sourceCode"><pre><code class="sourceCode">#!/usr/bin/env zsh

gdf()
{
	not_git_repo &amp;&amp; return

	local c_blue=&quot;\x1b[1;34m&quot;
	local c_green=&quot;\x1b[1;32m&quot;
	local c_magenta=&quot;\x1b[1;35m&quot;
	local ce=&quot;\x1b[0m&quot;

	local git_repo=$(git_find_repo)
	local tag=&quot;    ${c_blue}-- $git_repo --${ce}\n&quot;
	local git_diff=$(git diff --color=always)
	local git_diff_c=$(git diff --cached --color=always)

	if [[ -z &quot;$git_diff&quot; &amp;&amp; -z &quot;$git_diff_c&quot; ]]; then
		printf &quot;${c_green}NO CHANGES!$ce\n\n&quot;
		gst
	else
		local msg=&quot;&quot;
		if [[ -n &quot;$git_diff&quot; ]]; then
			# The sed &#39;/^$/d&#39; below is to remove the extra trailing whitespace
			# line that seems to get added into `git diff&#39; but not `git diff
			# --cached&#39;.
			msg=&quot;$tag&quot;
			msg+=$(vertical_label \
				&quot;git diff --color=always | sed &#39;/^$/d&#39;&quot; \
				&quot;TREE ------------------------ &quot; \
				&quot;$c_green&quot;)
			msg+=&quot;\n$tag&quot;
			printf $msg | less
		fi

		if [[ -n &quot;$git_diff_c&quot; ]]; then
			msg=&quot;$tag&quot;
			msg+=$(vertical_label \
				&quot;git diff --cached --color=always&quot; \
				&quot;INDEX ------------------------ &quot; \
				&quot;$c_magenta&quot;)
			msg+=&quot;\n$tag&quot;
			printf $msg | less
		fi

		gst
	fi
}</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-07-17-git-diff-improved/gdf"  mimetype=text/plain > gdf </a>
</div>
</div>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-07-17-git-diff-improved/vertical_label"><table class="sourceCode numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="sourceCode"><pre><code class="sourceCode">#!/usr/bin/env zsh

vertical_label()
{
	c=$3
	ce=&quot;\x1b[0m&quot;
	label=$2
	i=1
	# The `s/^/x/&#39; marks each line&#39;s beginning with a non-whitespace character
	# `x&#39; so that when we pipe it to the `read&#39; zsh builtin, we read all leading
	# indentation as well (otherwise we lose it). The `s/\t/ /g&#39; standardizes
	# all tab characters to four spaces; this is purely for visual aesthetics.
	eval $1 | sed  &#39;s/^/x/ ; s/\t/    /g ; s/%/%%%%/g&#39; | while read -r line; do
		case $label[$i] in
		&quot; &quot;) printf &quot;  &quot; ;;
		&quot;-&quot;) printf &quot; $c\u2503$ce&quot; ;;
		*) printf &quot; $c$label[$i]$ce&quot; ;;
		esac
		line_without_x=$line[2,-1]
		printf &quot;  ${line_without_x//\\/\\\\\\\\}\n&quot;
		((i+=1))
		if (( i &gt; $#label )); then
			i=1
		fi
	done
}</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-07-17-git-diff-improved/vertical_label"  mimetype=text/plain > vertical_label </a>
</div>
</div>
<div class="code-and-raw">
<div class="sourceCode" input="code/2016-07-17-git-diff-improved/git_find_repo"><table class="sourceCode numberLines"><tr class="sourceCode"><td class="lineNumbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="sourceCode"><pre><code class="sourceCode">#!/usr/bin/env zsh

git_find_repo()
{
	while [[ ! -d .git ]]; do
		cd ..
		if [[ $PWD == / ]]; then
			echo &quot;error: .git folder not found&quot;
			return
		fi
	done
	echo ${PWD##*/}
}</code></pre></td></tr></table></div>
<div class="raw-link">
<a  class="raw"  href= "/code/2016-07-17-git-diff-improved/git_find_repo"  mimetype=text/plain > git_find_repo </a>
</div>
</div>
<p>I use Zsh as my shell, so I wrote the above in Zsh. I simply drop these files inside my autoloaded directory, which is defined like this:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="ot">fpath=(</span>~/.zsh/func <span class="ot">$fpath)</span> <span class="co"># add ~/.zsh/func to $fpath</span>
<span class="kw">autoload</span> -U ~/.zsh/func/*<span class="kw">(</span>:t<span class="kw">)</span> <span class="co"># load all functions in ~/.zsh/func</span></code></pre></div>
<p>Here is some sample output (used in the course of writing this blog post):</p>
<div class="sourceCode"><pre class="sourceCode diff"><code class="sourceCode diff">   -- blog --
T  diff --git a/post/2016-07-17-git-diff-improved.org b/post/2016-07-17-git-diff-improved.org
R  index 631bcf4..9f6fbac 100644
E  --- a/post/2016-07-17-git-diff-improved.org
E  +++ b/post/2016-07-17-git-diff-improved.org
   @@ -7,7 +7,7 @@ tags: programming
┃
┃   * Motivation
┃
┃  -Like most people, I use git every day.
┃  +Like most people, I use git daily.
┃   For many years, I used to have these two aliases:
┃
┃   #+begin_src shell
┃  @@ -15,9 +15,9 @@ alias gdf=&quot;git diff&quot;
┃   alias gdfc=&quot;git diff --cached&quot;
┃   #+end_src
┃
┃  -Last year, I started working professionally as a developer, and I began to work on many different repos at the same time.
┃  +Last year I started working professionally as a developer and I began to work on many different repos at the same time.
┃   Oftentimes I would do either a ~git diff~ or ~git diff --cached~, then come back to it 10 minutes later but then forget whether the diff had a ~--cached~ flag or not.
┃  -So, I needed to script some more git helpers functions!
┃  +I needed to script some more git helpers functions!
┃
┃   * Implementation
┃
┃  @@ -41,9 +41,11 @@ autoload -U ~/.zsh/func/*(:t) # load all functions in ~/.zsh/func
┃   Here is some sample output:
┃
┃   #+begin_src diff
   + foo
T   #+end_src
R
E   #+begin_src diff
E  +
    + bar
┃    #+end_src
┃
┃   * Conclusion
   -- blog --</code></pre></div>
<div class="sourceCode"><pre class="sourceCode diff"><code class="sourceCode diff">   -- blog --
I  diff --git a/post/2016-07-17-git-diff-improved.org b/post/2016-07-17-git-diff-improved.org
N  index dc2fca4..631bcf4 100644
D  --- a/post/2016-07-17-git-diff-improved.org
E  +++ b/post/2016-07-17-git-diff-improved.org
X  @@ -38,6 +38,14 @@ fpath=(~/.zsh/func $fpath) # add ~/.zsh/func to $fpath
    autoload -U ~/.zsh/func/*(:t) # load all functions in ~/.zsh/func
┃   #+end_src
┃
┃  +Here is some sample output:
┃  +
┃  +#+begin_src diff
┃  +#+end_src
┃  +
┃  +#+begin_src diff
┃  +#+end_src
┃  +
┃   * Conclusion
┃
┃   I&#39;ve been a happy ~gdf~ user for some months now.
   -- blog --</code></pre></div>
<h1 id="conclusion">Conclusion</h1>
<p>I’ve been a happy <code>gdf</code> user for some months now. The only “downside” is that because of the vertical ribbon (and the repo name at the top/bottom), the output is no longer readable by <code>patch</code> (or copy-pastable into a diff-reading utility/service). But, this is a minor grievance at best as one can easily invoke the low-level <code>git diff</code> or <code>git diff --cached</code> directly to get the raw (<code>patch</code>-able) output.</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>Software Development Philosophy</title>
    <link href="http://funloop.org/post/2016-04-29-software-development-philosophy.html" />
    <id>http://funloop.org/post/2016-04-29-software-development-philosophy.html</id>
    <published>2016-04-29T00:00:00Z</published>
    <updated>2016-04-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-04-29</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-04-29-software-development-philosophy.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>
</div>

<p>I’ve been meaning to write about software development best practices for a while now. Here are some things that I believe in, after having distilled countless blog posts, comments, and arguments over the years.</p>
<h1 id="take-version-control-seriously">1: Take version control seriously</h1>
<p>Learning how to use version control was easily one of the big eye-opening events in my technical journey. I get sad when I see commit messages without any real explanation such as “Ugh!” or “Oops”.</p>
<p>Although modern version control systems have many technical benefits (distributed nature allowing parallel collaboration, guaranteed data integrity, etc), I believe that the overruling importance of version control is <strong>history preservation</strong>. Reading the commit history of a well-maintained project is a pleasure: each commit explains why that commit was necessary at the time it was written, with references to other documents, bug reports, etc. If you have fine-grained commits, you can go back in time to reproduce bugs, or even use things like <strong>git-bisect</strong> to figure out which commit introduced a bug. If you are working to fix a regression that was introduced “around two months ago,” the last thing you want to do is look at 2-month old commits with useless commit messages.</p>
<h1 id="be-consistent">2: Be consistent</h1>
<p>No one can deny the power of simplicity. On the other hand, how do we achieve simplicity?</p>
<p>Start by being consistent. There are multiple domains of “consistency” in a software project but here are some basic ones: coding style, naming convention, and comments. Yes, comments have to be written in a particular way as well! Let’s look at each in turn.</p>
<h2 id="coding-style">Coding style</h2>
<p>The simplest form of consistency is coding style. Every project must have some general consensus for coding style. Although 100% adherence may not be practical, you should at least make all <em>new</em> code follow the same convention. Automated linters can help in this area.</p>
<h2 id="naming-convention">Naming convention</h2>
<p>This is a superset of coding style. If you have variable names, they should be consistently named. If you use the term <strong>cfg</strong> in one variable or function, you should use it everywhere; do not use <strong>conf</strong> or <strong>config</strong> elsewhere.</p>
<p>For functions, quite often in imperative languages they perform some action. And naturally, the action is performed on something. Now, where do we put the verb and the direct object? It doesn’t really matter, but be consistent!</p>
<p>For the following functions, notice how the verb comes before the object, consistently:</p>
<ul>
<li><code>init_config()</code></li>
<li><code>init_hash()</code></li>
<li><code>mark_foo()</code></li>
<li><code>gen_foo()</code></li>
</ul>
<p>. I believe that such subtle details do matter in the long run.</p>
<h2 id="comments">Comments</h2>
<p>Too often I find random-looking comments strewn across a single file — some one-liners, some just one word, etc. Comments should be written in a consistent style, too!</p>
<p>Comments form the backbone of documentation for anyone not intimately familiar with the codebase. Thus, comments should never assume that the reader knows the basics of what’s going on. Rather, comments should strive to explain things to the layman, the outsider.</p>
<p>Writing comments in this style does not mean that you should always repeat everything from zero; instead, explain the general bird’s eye view in one place, and refer to this introductory view. Also, avoid writing one-liner comments if you can, as they encourage laziness and half-baked explanations (how much meaning can you really convey in 1 line?); write a nice explanation for each “atomic” unit of code — this is typically one function definition.</p>
<p>Lastly, do not comment out code and check it into a commit! This is a habit of the era before version control became popular. If you really want to save commented code, at least preface it with an explanation. Mystery dead code is the worst!</p>
<h1 id="have-one-source-of-truth">3: Have one source of truth</h1>
<p>This is another way of saying the DRY principle (“Do not Repeat Yourself”) which I find somewhat vague. I hereby coin this rule as the HOST principle (“Have One Source of Truth”).</p>
<p>Under the HOST principle, if you are working with multiple components that depend on each other, it’s important to establish who is the original source for which things. Any component that feeds from the source of truth must act subserviently to the originator, as far as that piece of truth is concerned. The Object-Oriented Programming model encapsulates this with public and private methods; in the purely functional model this is less of a concern because of the lack of side effects.</p>
<p>This is the one principle that gets overlooked time and again. It’s probably because the HOST principle can be violated in so many ways. Below are some typical violations.</p>
<h2 id="global-variables">Global variables</h2>
<p>Whereas global <strong>constants</strong> would be fine, global <strong>variables</strong> by their very nature allow anything to edit the originating source of truth. The result, all too often, is spaghetti code where it is unclear which function has authority over another function.</p>
<h2 id="non-modularity">Non-modularity</h2>
<p>A common mistake is when people do not make things modular and just copy/paste large files making minor changes between each one. For example, let’s say that there exists 3 different developer environments — “development”, “staging”, and “production” — and that each one shares about 90% of the configuration values, with the other 10% changing depending on the environment. You should not write 3 separate files; instead, you should keep in source control 1 file with all of the various values, and have some other process automatically generate the individual environment-specific configuration file. This way, you don’t have to edit 3 files when you make some global change that affects all environments.</p>
<h2 id="lack-of-testing">Lack of testing</h2>
<p>In the ideal world, every program ships with a contract, telling the user that the program will do X, Y, and Z, in such and such a way under such and such conditions. This contract would be the source of truth about a program’s intended behavior at runtime. Alas, such “contracts” do not exist, at least at the program-behavior-at-runtime level. <a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a> While excellent documentation, commit history, and even community-driven “best practices” all attempt to define how a program behaves and what to expect, they still bow down to the test suite. This is because tests, by their very nature, are written expressly to keep in line the behavior of a program over its lifetime.</p>
<p>Not all projects can have the traditional test suite covering every corner case (e.g., the Linux Kernel is one such project). But most projects can. At the very least, you should have some standard practice or system of ensuring that your program is stable and behaves as intended.</p>
<h1 id="accuracy-is-more-important-than-performance">4: Accuracy is more important than performance</h1>
<p>Ultimately, software is written to perform some <strong>task</strong>. If your software does not perform that task, it is useless. Your code should care foremost about correctness (being free from bugs).</p>
<p>Whereas performance can always be improved given a naive (but correct) implementation, it is not so the other way around — a highly-performant yet buggy implementation cannot be easily debugged while maintaining existing performance benchmarks.</p>
<h1 id="be-cautious-of-new-code">5: Be cautious of new code</h1>
<p>Old code exists because it worked last year, last month, two weeks ago, and yesterday. Let that sink in. At the end of the day, something that works makes the <strong>user</strong> happy.</p>
<p>If you have a new design or some new way of doing something, it better be superior to the old way. It should be as clear as night and day. Typically, new code is in bug fixes, where the “night and day” difference is obvious. But sometimes it is in new features or even in refactored code — and still, it should be judged against the same high standards.</p>
<p>When I <a href="./2014-09-09-my-first-contribution-to-git.html">submitted my patch to fix some Git documentation</a> some years back, I originally submitted 7 commits. Of the 7, one of them was a patch to update the itemized list syntax; it was purely a change of form, not function. The maintainer (Junio Hamano) questioned this patch, and it was eventually dropped because I really could not make a good case for it. I keep thinking about this encounter once in a while, and remind myself that even something as harmless a documentation change should be treated with caution.</p>
<p>All projects require new code — and this is how projects grow. Growth has to be done in moderation and with great care — this is how software must evolve. We can analogize software growth as mutation over time, with each commit as a particular “mutation”. We choose the best ones (thanks to distributed VCS branching/merging!) one at a time, easing growing pains. Commits with far-reaching changes are the worst type of mutations and should be avoided; an exception is if you have changes that delete more code than add code — these are golden if they can be vetted and proven to work, as they can cut bloat and slim down the codebase.</p>
<h1 id="conclusion">Conclusion</h1>
<p>In the real world, it’s hard to cross all your t’s and dot your i’s — I am no exception with regard to my own projects at home and at work. If I had to pick only one rule from the five above, it would be the first (treat version control seriously). Maybe I am biased because I love Git. Still, it’s hard to argue against having version control; the rest of the guidelines above can be argued against under particular circumstances, but version control remains sacrosanct. Version control is king!</p>
<div class="footnotes">
<hr />
<ol>
<li id="fn1"><p>This is one reason why I love purity in Haskell so much — pure functions guarantee their inputs and outputs! It’s like coding with little mini-contracts everywhere!<a href="#fnref1">↩</a></p></li>
</ol>
</div>
]]></summary>
</entry>
<entry>
    <title>My Quest for Keyboard Perfection: The Esrille Nisse</title>
    <link href="http://funloop.org/post/2016-04-14-esrille-nisse-keyboard.html" />
    <id>http://funloop.org/post/2016-04-14-esrille-nisse-keyboard.html</id>
    <published>2016-04-14T00:00:00Z</published>
    <updated>2016-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-04-14</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-04-14-esrille-nisse-keyboard.org" title="History">*</a>
	<br>
	<a href="/tag/hardware.html">hardware</a>, <a href="/tag/esrille.html">esrille</a>, <a href="/tag/cherry%20mx.html">cherry mx</a>
</div>

<p>About a year ago, I preordered an ErgoDox keyboard from Massdrop. Unfortunately, that order was delayed for months; frustrated and disillusioned with the experience, I searched for an alternative. Eventually I settled on the <a href="https://www.esrille.com/keyboard/">Esrille Nisse</a>. It was more expensive than the ErgoDox, but it looked more ergonomic so I took a leap of faith and decided to buy it. I am glad I did!</p>
<p>I’ve had the Nisse since last October, but did not use it right away. I spent many days spread across six months customizing the firmware and also writing my own keyboard layout optimization program to make the most out of my new keyboard. Every time I thought I had finally settled on a design, I thought of ways of improving it. My initial stab at a first iteration of my custom layout was completed just days ago; I’m just happy to write about it as I promised at the <a href="./2016-01-04-status-update.html">beginning of the year</a>!</p>
<p>Here is a brief review of the Nisse on build quality, comfort, and price, followed by a section on how I’ve customized it (to the extreme!) and my thoughts on going down this path.</p>
<h1 id="build-quality">Build Quality</h1>
<p>The Nisse has a thin outer metal case. You can easily remove the case by undoing a handful of screws. While it doesn’t give an impression of the same kind of build strength as a Filco or Unicomp, it feels well-designed. There is no backplate for the key switches, and this gives the keyboard a much lighter feel. I personally would like it to have a thicker case and backplate, but I imagine that that would move the keyboard up to a much higher price point.</p>
<h1 id="comfort">Comfort</h1>
<p>I ordered mine with Cherry MX Brown switches, and they felt fine. I write in the past tense because, during my long wait for the ErgoDox, I had ordered a set of aftermarket Cherry MX springs which are much stiffer than the stock Brown springs (rated at 67 grams). I swapped out the springs and enjoy them so far; they somewhat imitate the much stiffer buckling spring switches found in the Unicomp but without the loud clicking noise. I should add that I also added 3mm thick O-rings around the stem of each keycap to reduce not only noise but keypress travel to reasonable effect.</p>
<p>Overall, I really love the thumb row of keys. They really make a lot of sense giving each thumb 5 keys to work with on the same row (more ergonomic than the ErgoDox), and I am learning to use my right thumb more (on Qwerty I always use the left thumb for pressing the spacebar, as my brain tends to get confused if I try to use both thumbs for it).</p>
<h1 id="price">Price</h1>
<p>The Nisse is not cheap. I had to pay close to $500 USD for this keyboard and wait a few weeks for it to get produced (it is not a mass-produced item; I am the proud owner of Nisse #42). Given that I don’t spend money on other things in life, I was able to afford it. Still, you should only get something like this if you are serious about your keyboard typing comfort and want to upgrade the experience. My fingers spend many hours every single day on a keyboard, so I trust my investment.</p>
<h1 id="customizability">Customizability</h1>
<p>This is where the Nisse really shines. The firmware is compiled from a handful of C files. This keyboard is unique in that it comes preloaded with multiple layouts; as of the time of this writing, the preloaded layouts are as follows:</p>
<ul>
<li>English
<ul>
<li>Qwerty</li>
<li>Dvorak</li>
<li>Colemak</li>
</ul></li>
<li>Japanese
<ul>
<li>Qwerty (JIS)</li>
<li>Stickney Next</li>
<li>Nicola (Thumb Shift)</li>
<li>M-type</li>
<li>JIS X6004</li>
<li>TRON Kana</li>
</ul></li>
</ul>
<p>. There is also a shared FN layer between the English and Japanese layouts.</p>
<p>Through much trial and error, I was able to incorporate some cool ideas that come with one of the Japanese layouts into my own custom layout, which I’ve dubbed the <a href="https://github.com/listx/new-keyboard/tree/zq">“ZQ” layout</a>. I added an extra “FN2” layer and also made the Shift key “sticky” (premptively hitting the Shift key is enough — no need to press the Shift key simultaneously with a letter key to get a capital letter). In addition, I bound some punctuation marks to be just one keypress, such as double quotes (“), dollar sign ($), and underscore (_). Because of the extra FN2 layer, everything is reachable with minimal effort. In fact, a lot of keys around the far corners of the keyboard are surplus keys and left unbound.</p>
<p>As for the actual keyboard layout, I wrote a <a href="https://github.com/listx/keylo">Haskell program</a> to help find a decent layout. It uses either simulated annealing or a simple hill climber algorithm to find an optimal layout. Because the search space is so large, and because a lot of the rules and penalties for what makes a good layout can be somewhat arbitrary, I’ve discovered that it takes a combination of human guidance (artificially imposed constraints) and computer search to find the most desirable layouts.</p>
<p>Below you can see my layout’s base layer. The empty squares represent empty (unbound) keys. Because I’m using ASCII art to represent the layout, it’s a bit awkward, but I’ve done my best to label the legends with non-interfering symbols so that it is unambiguous. (This is actually better than taking photos because I use blank keycaps.)</p>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    = ~ / ? &amp;         ` 1 - ! $
□ □ z r d f . 1     2 &quot; y u p q □ □
□ 2 s n t h l :     * x a e i o 3 □ &lt;--- Home row
  3 c w g m ;         &#39; j k b v 4
      4 5 6 7 8     5 , 6 7 8 &lt;--------- Thumb row

Left-side legend
1) Home
2) Shift
3) Escape
4) Super (Windows key)
5) Caps Lock (remapped with xmodmap to Hyper key)
6) Space
7) Enter
8) Control

Right-side legend
1) Underscore
2) End
3) Shift
4) Tab
5) FN2
6) FN
7) Alt
8) Right Alt (aka &quot;AltGr&quot; for US International Layout)
</code></pre>
<p>Here’s my FN layer.</p>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ c □ □         □ □ a □ □
□ □ b 7 8 9 □ d     b % [ \ | ] □ □
□ □ a 4 5 6 □ □     □ # { ( ) } □ □
  □ 0 1 2 3 □         ^ &lt; + @ &gt; □
      □ □ □ □ □     □ □ □ □ □

Left-side legend
a) 00 (Macro that presses &#39;0&#39; 2x)
b) 000 (Macro that presses &#39;0&#39; 3x)
c) Shift+Insert
d) Page Up

Right-side legend
a) Super+x (my hotkey to spawn terminals)
b) Page Down
</code></pre>
<p>Finally, this is the FN2 layer.</p>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ □ □ □         □ □ □ □ □
□ □ i j k l □ □     □ □ □ a □ □ □ □
□ □ e f g h □ □     □ □ b c d □ □ □
  □ a b c d □         □ □ □ □ □ □
      □ □ □ □ □     □ □ □ □ □

Left-side legend
a) F1
b) F2
c) F3
d) F4
e) F5
f) F6
g) F7
h) F8
i) F9
j) F10
k) F11
l) F12

Right-side legend
a) Up Arrow
b) Left Arrow
c) Down Arrow
d) Right Arrow
</code></pre>
<p>There were some overriding design choices behind the layout; the most important ones are listed below.</p>
<ul>
<li>HJKL keys should be somewhat intuitive (H must be left of L; J must be left of K and preferably on the same row).</li>
<li>Common keys should be on the home row.</li>
<li>Most modifier keys should be used with the thumbs.</li>
<li>For better granularity, punctuation symbols should be treated uniquely as separate keys (do not treat “/” and “?” as the same physical key).</li>
<li>Use numpad arrangement for numbers.</li>
</ul>
<p>The result of all of these considerations is that my layout does not make use of all the physical keys the hardware gives us; instead, it uses keys closest to my fingers.</p>
<p>I have yet to master my own custom layout, but it’s coming along with incremental, daily improvments. I hope to reach 60 wpm in a few month’s time, after which I should be able to switch to it full-time on my primary desktop computer. I will probably make additional changes to the layout as I get more “real world” experience with it; we shall see.</p>
<p>Because of the openness of the firmware, the Nisse is extremely customizable, and I’m very happy with it. One modification I am particularly fond of is how I’ve managed to map the <code>Shift</code>, <code>FN</code>, and <code>FN2</code> keys to the blue, green, and red LEDs on the keyboard. These LEDs are traditionally used for the Scroll, Caps, and Num lock keys and in all my years of using the computer I’ve hardly ever seen either the Scroll or Caps LEDs being lit; it’s nice to see these LEDs go off when I use my modifier keys as a visual reminder of the layers involved.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I know that I’m going down a rabbit hole here. If Esrille ever goes under, it means I am on my own as far as obtaining a replacement board with the same physical dimensions. Hopefully that day will never come, but if it does, I might just grab an ErgoDox or something else that’s similar and port my layout to that system.</p>
<p>As it stands, there are still improvements to be made — but it’s all in the firmware. For example, I’d like to also make a layout for Japanese (type Japanese faster!), probably by just shifting some of the keys in the existing TRON or some other layout that the Nisse comes with to match ZQ’s distribution of letter keys vs. punctuation keys. The same goes for a Korean layout.</p>
<p>Those concerns will probably be addressed sometime later this year, or perhaps the next. It all depends on how much time I end up studying those languages again. For now, I’m just happy learning to type a little bit more comfortably on the Nisse (lots of home row goodness!).</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>Status Update</title>
    <link href="http://funloop.org/post/2016-01-04-status-update.html" />
    <id>http://funloop.org/post/2016-01-04-status-update.html</id>
    <published>2016-01-04T00:00:00Z</published>
    <updated>2016-01-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-01-04</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-01-04-status-update.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/haskell.html">haskell</a>, <a href="/tag/life.html">life</a>
</div>

<p>Happy 2016 everyone!</p>
<p>I thought I should update this blog, even though it’s taking time away from some really fun side hobbies/projects! This post breaks with the unspoken tradition on this blog, which is that every post should be something meaningful, with original content; but, I now think that I should use this space for more personal/opinion/meta things too, not just pure technical articles.</p>
<p>Anyway, below are some updates on various things going on in my life.</p>
<h1 id="side-projects">Side projects</h1>
<p>I have a number of side projects all clamoring for my loving care. In years past, I would work on multiple projects at the same time, and start new ones even without finishing old ones. This year, I plan to just focus on one project at a time!</p>
<p>Currently, I am working on a computer keyboard layout optimizer, using the well-known <a href="https://en.wikipedia.org/wiki/Simulated_annealing">Simulated Annealing</a> algorithm. It’s a very interesting problem, and although currently my SA implementation lacks enough heuristics to make it perform any differently than random search, it is still fun to hack on. Once it is done, I will open-source it.</p>
<p>After that, I want to finish up the core features for a simple terminal-based password manager program. Making a GUI application, even console-based, is quite the challenge!</p>
<h2 id="haskell-book">Haskell book</h2>
<p>Eagle-eyed readers may have noticed that I silently pushed back timeframe for my <a href="http://funloop.org/papers.html#haskell-for-newbies-tentative-title-coming-2016">book</a> the Haskell programming language. I did this on purpose, because what with a new job and whatnot, I have not had the time as before to work on it. But, it is not dead, and I do intend to finish it — later this year!</p>
<h1 id="new-hobbies">New hobbies</h1>
<p>I picked up a new hobby — the ancient game of <a href="https://en.wikipedia.org/wiki/Go_(game)">Go</a>! I’ve been playing on my phone and even got myself some decent equipment, and I have to say that it is much more fun than chess (I say this as a former avid chess player). Maybe I’ll find a way to tie it into programming.</p>
<p>My brother gave me a rather expensive camera and I started to take some pictures with it, although I have yet to really put serious time into it. But I do know that it’s one of the first things I’m grabbing the next time I go on a trip.</p>
<h1 id="retrospect">Retrospect</h1>
<p>Perhaps this section is a bit out of place, but I think I should mention the big highlights of 2015 for myself:</p>
<ul>
<li>I got hired at a <a href="http://www.twinprime.com/">fantastic tech company</a> (doing DevOps) and basically ended the self-imposed exile of staying out of the professional tech world</li>
<li>I moved to a new place (closer to work)</li>
<li>I bought a new car (truck!)</li>
<li>I learned a lot of new things (from work)</li>
</ul>
<p>. I should note that, before my current job, I had purposefully refrained from seeking professional positions in the tech sector because I had a fear that somehow my passion for programming would be lost. Thankfully, I can say that this fear was unfounded. Almost every day, after work and dinner, I sit and code (Haskell)!</p>
<h1 id="onward">Onward</h1>
<p>I will be posting something at least once a month, I hope, to share some thoughts with you all. I thank all past, present, and future readers, for giving me the motivation to keep this blog alive!</p>
]]></summary>
</entry>
<entry>
    <title>Tig Tips</title>
    <link href="http://funloop.org/post/2015-09-12-tig-tips.html" />
    <id>http://funloop.org/post/2015-09-12-tig-tips.html</id>
    <published>2015-09-12T00:00:00Z</published>
    <updated>2015-09-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2015-09-12</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2015-09-12-tig-tips.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/linux.html">linux</a>, <a href="/tag/git.html">git</a>
</div>

<p>I love <a href="https://github.com/jonas/tig">tig</a>. Still, I think the defaults aren’t the best for most developers. Here are two easy customizations to make the default view better.</p>
<p>First, put</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="bu">alias</span> tig=<span class="st">&#39;tig -n 1000&#39;</span></code></pre></div>
<p>in your <code>~/.bashrc</code> to reduce tig’s startup time (especially on large repositories). There’s rarely a need to go back more than 1000 commits from your current HEAD position in an interactive, GUI-driven manner. And if you really need to see everything, do</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash">$ \<span class="ex">tig</span></code></pre></div>
<p>on the terminal to bypass the shell alias.</p>
<p>Second, put the following in your <code>~/.tigrc</code> file:</p>
<pre><code>set main-view = date author id:width=10 commit-title:yes,graph,refs
</code></pre>
<p>. This makes the default view show git commit hashes (where <code>width</code> is the number of hex digits to show), so that you don’t have to press ENTER on a particular commit to see its hash.</p>
<p>Happy hacking!</p>
]]></summary>
</entry>

</feed>
