<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Linus's Blog</title>
    <link href="http://funloop.org/atom.xml" rel="self" />
    <link href="http://funloop.org" />
    <id>http://funloop.org/atom.xml</id>
    <author>
        <name>Linus Arver</name>
        <email></email>
    </author>
    <updated>2017-11-11T00:00:00Z</updated>
    <entry>
    <title>Useful Manpages</title>
    <link href="http://funloop.org/post/2017-11-11-useful-manpages.html" />
    <id>http://funloop.org/post/2017-11-11-useful-manpages.html</id>
    <published>2017-11-11T00:00:00Z</published>
    <updated>2017-11-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-11-11</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-11-11-useful-manpages.org" title="History">*</a>
	<br>
	<a href="/tag/linux.html">linux</a>, <a href="/tag/git.html">git</a>
</div>

<p>A while ago I discovered that <a href="https://www.reddit.com/r/linux/comments/74msho/til_there_is_a_manpage_for_the_ascii_character_set/">there is a manpage for the ASCII character set</a>. It got a bunch of upvotes, and since then I wondered what other manpages were worth knowing about. Below is a small table of manpages that I found interesting.</p>
<table>
<thead>
<tr class="header">
<th>Manpage</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>ascii(7)</code></td>
<td>the ASCII character set (in octal, decimal, and hex)</td>
</tr>
<tr class="even">
<td><code>units(7)</code></td>
<td>megabytes vs mebibytes, etc.</td>
</tr>
<tr class="odd">
<td><code>hier(7)</code></td>
<td>traditional filesystem hierarchy (e.g., <code>/bin</code> vs <code>/usr/bin</code>)</td>
</tr>
<tr class="even">
<td><code>file-hierarchy(7)</code></td>
<td>(systemd) filesystem hierarchy</td>
</tr>
<tr class="odd">
<td><code>operator(7)</code></td>
<td>C operator precedence rules (listed in descending order)</td>
</tr>
<tr class="even">
<td><code>console_codes(4)</code></td>
<td>Linux console escape and control sequences</td>
</tr>
<tr class="odd">
<td><code>terminal-colors.d(5)</code></td>
<td>among other things, ANSI color sequences</td>
</tr>
<tr class="even">
<td><code>boot(7)</code></td>
<td>UNIX System V Release 4 bootup process</td>
</tr>
<tr class="odd">
<td><code>daemon(7)</code></td>
<td>(systemd) how to write/package daemons</td>
</tr>
<tr class="even">
<td><code>proc(5)</code></td>
<td>proc filesystem (<code>/proc</code>)</td>
</tr>
<tr class="odd">
<td><code>ip(7)</code></td>
<td>Linux IPv4 protocol implementation (a bit low-level, but still useful)</td>
</tr>
<tr class="even">
<td><code>ipv6(7)</code></td>
<td>Linux IPv6 protocol implementation</td>
</tr>
<tr class="odd">
<td><code>socket(7)</code></td>
<td>Linux socket interface</td>
</tr>
<tr class="even">
<td><code>unix(7)</code></td>
<td>UNIX domain sockets</td>
</tr>
<tr class="odd">
<td><code>fifo(7)</code></td>
<td>named pipes</td>
</tr>
</tbody>
</table>
<p>Note that you need to run</p>
<pre><code>sudo mandb
</code></pre>
<p>to be able to invoke <code>apropos &lt;SEARCH_TERM&gt;</code> or <code>man -k &lt;SEARCH_TERM&gt;</code> (<code>man -k</code> is equivalent to <code>apropos</code> — see <code>man(1)</code>).</p>
<h2 id="git-specific">Git-specific</h2>
<p>You probably knew already that Git has many manpages dedicated to each of its subcommands, such as <code>git-clone(1)</code> or <code>git-commit(1)</code>, but did you know that it also comes with a suite of tutorials? Behold!</p>
<table>
<thead>
<tr class="header">
<th>Manpage</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>giteveryday(7)</code></td>
<td>the top ~20 useful git commands you should know</td>
</tr>
<tr class="even">
<td><code>gitglossary(7)</code></td>
<td>a glossary of all git concepts (blob object, working tree, etc.)</td>
</tr>
<tr class="odd">
<td><code>gittutorial(7)</code></td>
<td>a high-level view of using git</td>
</tr>
<tr class="even">
<td><code>gittutorial-2(7)</code></td>
<td>explains the object database and index file (git architecture internals)</td>
</tr>
<tr class="odd">
<td><code>gitcore-tutorial(7)</code></td>
<td>like <code>gittutorial-2(7)</code>, but much more detailed</td>
</tr>
<tr class="even">
<td><code>gitworkflows(7)</code></td>
<td>recommended workflows, esp. branching strategies for maintainers</td>
</tr>
</tbody>
</table>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>The Math Behind the Tower of Hanoi Problem</title>
    <link href="http://funloop.org/post/2017-05-13-tower-of-hanoi.html" />
    <id>http://funloop.org/post/2017-05-13-tower-of-hanoi.html</id>
    <published>2017-05-13T00:00:00Z</published>
    <updated>2017-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-05-13</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-05-13-tower-of-hanoi.org" title="History">*</a>
	<br>
	<a href="/tag/math.html">math</a>
</div>

<p>In the very first chapter of the book <a href="https://en.wikipedia.org/wiki/Concrete_Mathematics"><em>Concrete Mathematics</em> 2ed</a> there is a discussion about the <a href="https://en.wikipedia.org/wiki/Tower_of_Hanoi">Tower of Hanoi</a>. This post is a distillation of that discussion.</p>
<h1 id="the-problem">The Problem</h1>
<p>There are 3 rods, with 8 discs (with holes) resting on one rod; the discs are sorted in size like a pyramid, with the smallest disc on top. We want to move all discs to another rod, but with the following rules: (1) a move consists of moving a single disc onto a rod; (2) you may never place a bigger disc on top of a smaller one. A question arises — <strong>how many steps are required to move the entire tower of disks onto another rod?</strong></p>
<h1 id="finding-the-recurrence">Finding the Recurrence</h1>
<p>First consider the simplest case, without any discs. Because there are no discs to move, we cannot make any moves, and so the number of steps required is 0. We can write this as</p>
<p><span class="math display">\[
S_0 = 0
\]</span></p>
<p>with <span class="math inline">\(S\)</span> meaning the number of steps and the subscript representing the number of discs in the tower.</p>
<p>Now let’s consider how the problem scales. With 1 disc, the answer is a single step since the one disc is itself the entire tower. With 2 discs, the answer is three steps — one step to move the top (small) disc to another rod, one step to move the big disc to the destination rod, and lastly one step to move the small disc on top of the big disc. With 3 discs, the answer is seven steps — the insight here is that we treat the top two discs exactly the same as the previous problem; so we need 3 moves to move the top two to another rod, then one move to move the biggest disc to the destination rod, then again 3 moves to move the 2-disc sub-tower to the destination rod.</p>
<p>The example with 3 discs is quite telling. We can use the insights gained there to set an upper bound to the number of steps required for the general case of <span class="math inline">\(n\)</span> discs; if we take more steps than this upper bound, we would know that we made mistakes. For a tower of size <span class="math inline">\(n\)</span>, we require <span class="math inline">\(S_{n - 1}\)</span> steps to move all discs except the biggest one, then move the biggest disc, then move the sub-tower on top of that disc with (again) <span class="math inline">\(S_{n - 1}\)</span> steps. So the upper bound is</p>
<p><span class="math display">\[
\begin{equation} \label{eq:recurrence}
  S_n =
  \begin{cases}
    0                   &amp; \text{if } n = 0 \\
    2 * (S_{n - 1}) + 1 &amp; \text{if } n &gt; 0.
  \end{cases}
\end{equation}
\]</span></p>
<p>If that’s the upper bound, then is there a separate formula for the <em>lower bound</em> (optimal solution)? Nope! It’s because there must come a time in solving the puzzle where we move the biggest disc to the destination rod. To get to the biggest disc, we must have moved all discs on top of it to another rod (the sub-tower); and, after having moved the biggest disc, we must move this sub-tower back on top of that rod (back onto the biggest disc). Because of these constraints stemming the definition of the puzzle itself, we know that for <span class="math inline">\(n\)</span> &gt; 0 we must take <em>at least</em> <span class="math inline">\(2 * (S_{n - 1}) + 1\)</span> steps.</p>
<p>The upper and lower bounds agree in their formulation, and this formulation (Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>) is our recurrence. In mathematics, a <a href="https://en.wikipedia.org/wiki/Recurrence_relation">recurrence relation</a> is basically a recursively-defined equation, where a <em>base case</em> in the recurrence defines the starting point. In Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>, the base case is <span class="math inline">\(n = 0\)</span>; for <span class="math inline">\(n &gt; 0\)</span>, we define the number of steps required in a recursive manner.</p>
<p>In our discussion of finding the upper and lower bounds, there were two key concepts — the need to move the biggest disc, and the need to move the sub-tower twice (before and after moving the biggest disc). Our recurrence clearly agrees with these two concepts. The “<span class="math inline">\(+ 1\)</span>” in the non-base case is the step of moving the biggest disc, whereas the <span class="math inline">\(2 * (S_{n - 1})\)</span> is the number of steps required to move the sub-tower <em>twice</em>.</p>
<h1 id="simplifying-the-recurrence">Simplifying the Recurrence</h1>
<p>Recurrences are great, but they are painful to compute. For example, it’s not immediately clear what <span class="math inline">\(S_{11}\)</span> or <span class="math inline">\(S_{54}\)</span> evaluates to. It would be really nice if we could avoid defining <span class="math inline">\(S_n\)</span> recursively.</p>
<p>And this is where math meets science. In the scientific method, we have to come up with a hypothesis and then test that hypothesis with one or more experiments. We can do the same thing here by trying to guess the solution to the recurrence.</p>
<p>For one thing, we know that <span class="math inline">\(S_n\)</span> grows as <span class="math inline">\(n\)</span> grows (it will never be the case that <span class="math inline">\(S_n\)</span> somehow plateaus or decreases down the road). The more discs there are, the more work we have to do, right? So let’s look at small cases to see how the numbers grow, and see if there is a pattern to the growth rate of <span class="math inline">\(S_n\)</span>.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">\(n\)</span></th>
<th style="text-align: center;"><span class="math inline">\(S_n\)</span></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">3</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">15</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">31</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">63</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">127</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">255</td>
</tr>
</tbody>
</table>
<p>We don’t have to actually simulate the puzzle to derive these values; using the recurrence Equation <span class="math inline">\(\ref{eq:recurrence}\)</span> we start off from the first row (the base case) and then calculate our way down, reusing <span class="math inline">\(S_n\)</span> from the previous row as <span class="math inline">\(S_{n - 1}\)</span>. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>Anyway, the values of <span class="math inline">\(S_n\)</span> sure look familiar — especially if we use base 2.</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span class="math inline">\(n\)</span></th>
<th style="text-align: right;">binary(<span class="math inline">\(S_n\)</span>)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: right;"><span class="math inline">\(0_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: right;"><span class="math inline">\(1_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: right;"><span class="math inline">\(11_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: right;"><span class="math inline">\(111_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: right;"><span class="math inline">\(1111_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: right;"><span class="math inline">\(11111_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: right;"><span class="math inline">\(111111_2\)</span></td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: right;"><span class="math inline">\(1111111_2\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: right;"><span class="math inline">\(11111111_2\)</span></td>
</tr>
</tbody>
</table>
<p>It looks like our recurrence simplifies to just</p>
<p><span class="math display">\[
\begin{equation} \label{eq:solution}
  S_n = 2^n - 1 \quad \text{for } n \geq 0,
\end{equation}
\]</span></p>
<p>except it is no longer a recurrence as there is no need to define a base case. We’ll call it a <em>solution</em> to the recurrence.</p>
<h1 id="proving-the-solution">Proving the Solution</h1>
<p>Although the empirical evidence looks very good, we have not formally proved that the solution (Equation <span class="math inline">\(\ref{eq:solution}\)</span>) holds for <em>all</em> <span class="math inline">\(n\)</span>. It’s one thing to say that something is true for all <em>observed</em> cases (scientific experiment), and quite another to say that something is true for <em>all</em> cases (mathematical proof).</p>
<p>Can we prove it? Yes! Fortunately for us, Equation <span class="math inline">\(\ref{eq:recurrence}\)</span> lends itself to proof by <a href="https://en.wikipedia.org/wiki/Mathematical_induction">induction</a>. Induction requires you to first prove some number <span class="math inline">\(k_0\)</span> as a starting point (the base case) using some proposition <span class="math inline">\(P\)</span>. Then you prove that <span class="math inline">\(P\)</span> holds for <span class="math inline">\(k + 1\)</span> (the next number); i.e., show that going from <span class="math inline">\(k\)</span> to <span class="math inline">\(k + 1\)</span> does not change <span class="math inline">\(P\)</span>. This is the <em>inductive step</em>. In this way, we prove the “totality” of <span class="math inline">\(P\)</span> as it applies to all numbers in the range <span class="math inline">\([k_0, k_{m}]\)</span> and we are done. <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a></p>
<p>Here we want to prove that Equation <span class="math inline">\(\ref{eq:solution}\)</span> holds for all <span class="math inline">\(n\)</span> (all natural numbers). <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> For this proof let’s rewrite Equation <span class="math inline">\(\ref{eq:solution}\)</span> to use <span class="math inline">\(k\)</span> instead of <span class="math inline">\(n\)</span>:</p>
<p><span class="math display">\[
\begin{equation} \label{eq:proposition}
  S_k = 2^k - 1 \quad \text{for } k \geq 0.
\end{equation}
\]</span></p>
<p>Equation <span class="math inline">\(\ref{eq:proposition}\)</span> is our proposition <span class="math inline">\(P\)</span>. The base case is easy enough to prove: <span class="math inline">\(S_0 = 0\)</span> because there are no disks to move. For the inductive step, we use the non-base part of our recurrence from Equation <span class="math inline">\(\ref{eq:recurrence}\)</span> to get</p>
<p><span class="math display">\[
  \begin{align}
  S_k &amp;= 2 * (S_{k - 1}) + 1 \label{eq:induct1}
  \end{align}
\]</span></p>
<p>and rewrite it in terms of <span class="math inline">\(k + 1\)</span>:</p>
<p><span class="math display">\[
  \begin{align}
  S_{k + 1} &amp;= 2 * (S_{k}) + 1. \label{eq:induct2}
  \end{align}
\]</span></p>
<p>Now the critical part: we replace <span class="math inline">\(S_k\)</span> with Equation <span class="math inline">\(\ref{eq:proposition}\)</span> (our proposition), because we assume that our proposition is true for all steps up to <span class="math inline">\(k\)</span> (but not <span class="math inline">\(k + 1\)</span>, which is what we’re trying to prove):</p>
<p><span class="math display">\[
  \begin{align}
  S_{k + 1} &amp;= 2 * (2^k - 1) + 1.
  \end{align}
\]</span></p>
<p>In case you forgot algebra, <span class="math inline">\(2 * 2^k = 2^1 * 2^k = 2^{k + 1}\)</span> and we can use this to simplify our equation.</p>
<p><span class="math display">\[
  \begin{align}
  S_{k + 1} &amp;= 2 * (2^k - 1) + 1\\
  &amp;= [2 * (2^k - 1)] + 1\\
  &amp;= [(2 * 2^k - 2)] + 1\\
  &amp;= (2^{k + 1} - 2) + 1\\
  &amp;= 2^{k + 1} - 1 \label{eq:induct3}.
  \end{align}
\]</span></p>
<p>And now we can see that Equation <span class="math inline">\(\ref{eq:induct3}\)</span> (our “evolved” proposition <span class="math inline">\(P\)</span>, if you will) is the same as our solution (Equation <span class="math inline">\(\ref{eq:solution}\)</span>), even though we increased <span class="math inline">\(k\)</span> to <span class="math inline">\(k + 1\)</span>! This is because simple substitution allows us to replace “<span class="math inline">\(k + 1\)</span>” with “<span class="math inline">\(n\)</span>”. We have completed our proof by induction. <a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a></p>
<h1 id="alternate-recurrence-and-solution">Alternate Recurrence and Solution</h1>
<p>The book goes on to offer an alternate recurrence to Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>, by adding 1 to both sides:</p>
<p><span class="math display">\[
\begin{align}
  (S_n) + 1 &amp;=
  \begin{cases}
    0 + 1                   &amp; \text{if } n = 0 \\
    2 * (S_{n - 1}) + 1 + 1 &amp; \text{if } n &gt; 0 \\
  \end{cases}\\
          &amp;=
  \begin{cases}
    1                   &amp; \text{if } n = 0 \\
    2 * (S_{n - 1}) + 2 &amp; \text{if } n &gt; 0. \label{eq:recurrence2}
  \end{cases}
\end{align}
\]</span></p>
<p>This recurrence is the same as the original, except that it adds 1 to the answer. Now we let <span class="math inline">\(W_n = (S_n) + 1\)</span> and <span class="math inline">\(W_{n - 1} = (S_{n - 1}) + 1\)</span> and rewrite everything in terms of <span class="math inline">\(W\)</span>:</p>
<p><span class="math display">\[
\begin{align}
  W_n &amp;=
  \begin{cases}
    1                   &amp; \text{if } n = 0 \\
    2 * (W_{n - 1})     &amp; \text{if } n &gt; 0. \label{eq:recurrence3}
  \end{cases}
\end{align}
\]</span></p>
<p>Notice how the “<span class="math inline">\( + 2\)</span>” in Equation <span class="math inline">\(\ref{eq:recurrence2}\)</span> goes away, because the coefficient <span class="math inline">\(2\)</span> in Equation <span class="math inline">\(\ref{eq:recurrence3}\)</span> will multiply with the “<span class="math inline">\( + 1\)</span>” from <span class="math inline">\(W_{n - 1}\)</span> to get it back. Using this alternate recurrence, it’s easy to see that the solution is just <span class="math inline">\(W_n = 2^n\)</span>, because <span class="math inline">\(W\)</span> can only grow by multiplying <span class="math inline">\(2\)</span> to itself! Hence</p>
<p><span class="math display">\[
\begin{align}
W_n = (S_n) + 1 = 2^n
\end{align}
\]</span></p>
<p>and subtracting 1 from all sides gives us</p>
<p><span class="math display">\[
\begin{align}
(W_n) - 1 =S_n = 2^n - 1.
\end{align}
\]</span></p>
<p>The lesson here is that if it is difficult to find the solution to a recurrence, we can use basic algebra rules to transform the recurrence to something more amenable. In this case, all it took was adding 1 to the original recurrence.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I thoroughly enjoyed figuring this stuff out because possibly for the first time in my life I used my programming experience (recurrence/recursion, memoization) to help myself understand mathematics — not the other way around. The other way around was never enjoyable — calculating what <code>i</code> was in some <span class="math inline">\(n\)</span>th iteration of a <code>for</code>-loop never really excited me.</p>
<p>I hope this explanation helps you better understand the first few pages of <em>Concrete Mathematics</em>; I had to read that part three times over to really “get it” (never having learned what induction is). And henceforth, I will never look at a string of consecutive 1’s in binary the same way again. 😃</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>In computer science, this process of avoiding the recalculation of previously known values is called <em>memoization</em> and is useful in generating the first N values of a recursive algorithm in <span class="math inline">\(O(N)\)</span> (linear) time.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>Note that if <span class="math inline">\(k_0 = 0\)</span>, then <span class="math inline">\([k_0, k_{m}]\)</span> is the set of all natural numbers (zero plus the positive integers).<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>There is no need to prove the recurrence (Equation <span class="math inline">\(\ref{eq:recurrence}\)</span>) as we have already proved it in the process of deriving it.<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>In <em>Concrete Mathematics</em> 2 ed. p. 3 (where the book uses <span class="math inline">\(T_n\)</span> instead of <span class="math inline">\(S_n\)</span>), the proof is simply a one-liner: <span class="math display">\[
T_n = 2(T_{n - 1}) + 1 = 2(2^{n - 1} - 1) + 1 = 2^n - 1.
\]</span> But I find it a bit too terse for my tastes.<a href="#fnref4" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>The Fastest Way to Compute the Nth Fibonacci Number: The Doubling Method</title>
    <link href="http://funloop.org/post/2017-04-14-computing-fibonacci-numbers.html" />
    <id>http://funloop.org/post/2017-04-14-computing-fibonacci-numbers.html</id>
    <published>2017-04-14T00:00:00Z</published>
    <updated>2017-04-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-04-14</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-04-14-computing-fibonacci-numbers.org" title="History">*</a>
	<br>
	<a href="/tag/math.html">math</a>, <a href="/tag/programming.html">programming</a>, <a href="/tag/python.html">python</a>
</div>

<h1 id="introduction">Introduction</h1>
<p>The Fibonacci Sequence is defined as follows:</p>
<p><span class="math display">\[
\begin{align}
\mathrm{F}_{0} = 0\\
\mathrm{F}_{1} = 1\\
\mathrm{F}_{n} = \mathrm{F}_{n - 2} + \mathrm{F}_{n - 1}.
\end{align}
\]</span></p>
<p>That is, each Fibonacci number <span class="math inline">\(\mathrm{F}_{n}\)</span> is the sum of the previous two Fibonacci numbers, except the very first two numbers which are defined to be 0 and 1. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<p>From the definition above, it appears that computing <span class="math inline">\(\mathrm{F}_{n}\)</span> requires one to always compute <span class="math inline">\(\mathrm{F}_{n - 2}\)</span> and <span class="math inline">\(\mathrm{F}_{n - 1}\)</span>. <strong>This is false:</strong> enter the “doubling method”. <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a></p>
<h1 id="the-genesis-of-the-doubling-method">The Genesis of the Doubling Method</h1>
<p>The doubling method uses a couple of mathematical formulas derived from matrix multiplication as it applies to calculating Fibonacci numbers; it can be seen as an improvement over the matrix multiplication method, although it does not use matrix multplication itself. The matrix multiplication method uses the following formula:</p>
<p><span class="math display">\[
\begin{equation}
\begin{bmatrix}
1 &amp; 1\\
1 &amp; 0
\end{bmatrix}^n
=
\begin{bmatrix}
\mathrm{F}_{n + 1} &amp; \mathrm{F}_{n}\\
\mathrm{F}_{n} &amp; \mathrm{F}_{n - 1}
\end{bmatrix}.
\end{equation}
\]</span></p>
<p>This result is quite interesting in its own right; to find <span class="math inline">\(\mathrm{F}_{n}\)</span> you only need to raise the matrix</p>
<p><span class="math display">\[
\begin{bmatrix}
1 &amp; 1\\
1 &amp; 0
\end{bmatrix}
\]</span></p>
<p>to the <span class="math inline">\(n\)</span>th power. To be more precise, this method is matrix <em>exponentiation</em>. The only downside is that much of the answer is wasted — we don’t care about <span class="math inline">\(\mathrm{F}_{n - 1}\)</span>, not to mention how <span class="math inline">\(\mathrm{F}_{n}\)</span> is redundantly computed twice.</p>
<h2 id="thinking-in-terms-of-mathrmf_n">Thinking in Terms of <span class="math inline">\(\mathrm{F}_{n}\)</span></h2>
<p>What if we could find <span class="math inline">\(\mathrm{F}_{n}\)</span> not by multiplying or adding some numbers, but by multiplying and adding <em>other Fibonacci terms</em>? Of course, we’re not talking about adding <span class="math inline">\(\mathrm{F}_{n - 2}\)</span> and <span class="math inline">\(\mathrm{F}_{n - 1}\)</span> because that would be too slow. Let’s have a look at the matrix identity again (reversed for easier reading):</p>
<p><span class="math display">\[
\begin{equation}
\begin{bmatrix}
\mathrm{F}_{n + 1} &amp; \mathrm{F}_{n}\\
\mathrm{F}_{n} &amp; \mathrm{F}_{n - 1}
\end{bmatrix}
=
\begin{bmatrix}
1 &amp; 1\\
1 &amp; 0
\end{bmatrix}^n.
\end{equation}
\]</span></p>
<p>If we substitute in <span class="math inline">\(2n\)</span> for <span class="math inline">\(n\)</span>, we get</p>
<p><span class="math display">\[
\begin{align}
\begin{bmatrix}
\mathrm{F}_{2n + 1} &amp; \mathrm{F}_{2n}\\
\mathrm{F}_{2n} &amp; \mathrm{F}_{2n - 1}
\end{bmatrix}
&amp; =
  \begin{bmatrix}
  1 &amp; 1\\
  1 &amp; 0
  \end{bmatrix}^{2n} \\
&amp; =
  \bigg(\begin{bmatrix}
  1 &amp; 1\\
  1 &amp; 0
  \end{bmatrix}^{n}\bigg)^2
\end{align}
\]</span></p>
<p>and we can substitute in our matrix identity from above to rewrite this as</p>
<p><span class="math display">\[
\begin{align}
&amp; =
  \bigg(\begin{bmatrix}
  \mathrm{F}_{n + 1} &amp; \mathrm{F}_{n}\\
  \mathrm{F}_{n} &amp; \mathrm{F}_{n - 1}
  \end{bmatrix}\bigg)^2
\end{align}
\]</span></p>
<p>and carry out the squaring to get</p>
<p><span class="math display">\[
\begin{align}
&amp; =
  \begin{bmatrix}
  {{\mathrm{F}_{n + 1}}^2 + {\mathrm{F}_{n}}^2} &amp; {{\mathrm{F}_{n + 1}\mathrm{F}_{n}} + {\mathrm{F}_{n}\mathrm{F}_{n - 1}}}\\
  {{\mathrm{F}_{n}\mathrm{F}_{n + 1}} + {\mathrm{F}_{n - 1}\mathrm{F}_{n}}} &amp; {{\mathrm{F}_{n}}^2 + {\mathrm{F}_{n - 1}}^2}
  \end{bmatrix}.
\end{align}
\]</span></p>
<p>The top right and bottom left terms are identical; we can also rewrite them to be a bit simpler.</p>
<p><span class="math display">\[
\begin{align}
  {{\mathrm{F}_{n + 1}\mathrm{F}_{n}} + {\mathrm{F}_{n}\mathrm{F}_{n - 1}}}
&amp; =
  \mathrm{F}_{n}(\mathrm{F}_{n + 1} + \mathrm{F}_{n - 1}) \\
&amp; =
  \mathrm{F}_{n}[\mathrm{F}_{n + 1} + (\mathrm{F}_{n + 1} - \mathrm{F}_{n})] \\
&amp; =
  \mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n}).
\end{align}
\]</span></p>
<p>This simplication achieves an important task — it obviates <span class="math inline">\(\mathrm{F}_{n - 1}\)</span> by cleverly defining it as <span class="math inline">\(\mathrm{F}_{n + 1} - \mathrm{F}_{n}\)</span>. Putting everything together, whe have</p>
<p><span class="math display">\[
\begin{align}
\begin{bmatrix}
\mathrm{F}_{2n + 1} &amp; \mathrm{F}_{2n}\\
\mathrm{F}_{2n} &amp; \mathrm{F}_{2n - 1}
\end{bmatrix}
&amp; =
  \begin{bmatrix}
  {{\mathrm{F}_{n + 1}}^2 + {\mathrm{F}_{n}}^2} &amp; {\mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n})}\\
  {\mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n})} &amp; {{\mathrm{F}_{n}}^2 + {\mathrm{F}_{n - 1}}^2}
  \end{bmatrix}
\end{align}
\]</span></p>
<p>where the first row (or column) gives us two very useful identities</p>
<p><span class="math display">\[
\begin{align}
\mathrm{F}_{2n}
&amp; =
  {\mathrm{F}_{n}(2\mathrm{F}_{n + 1} - \mathrm{F}_{n})} \\
\mathrm{F}_{2n + 1}
&amp; =
  {{\mathrm{F}_{n}}^2 + {\mathrm{F}_{n + 1}}^2}.
\end{align}
\]</span></p>
<p>As these identities form the heart of the doubling method, let’s call them the <em>doubling identities</em>.</p>
<p>And now we just need one more piece to formulate our doubling method; we need to borrow an idea from number theory. Given any positive integer <span class="math inline">\(n\)</span>, it is the same as either <span class="math inline">\(2m\)</span> (even) or <span class="math inline">\(2m + 1\)</span> (odd), where <span class="math inline">\(m = \lfloor\frac{n}{2}\rfloor\)</span>; for our purposes, let us call this property the “halving property”.</p>
<p>Whereas the doubling identities allow us to “double” our way into bigger numbers, the halving property allows us to halve our way down to smaller and smaller numbers. The marriage of these two concepts gives rise to the doubling method.</p>
<h1 id="the-doubling-method">The Doubling Method</h1>
<p>To compute the <span class="math inline">\(n\)</span>th Fibonacci term we break <span class="math inline">\(n\)</span> itself down into its halves (<span class="math inline">\(2m\)</span>) recursively, until we go down to <span class="math inline">\(n = 0\)</span>. At this point we multiply our way back up using the doubling identities. Because halving and doubling by themselves always calculate <span class="math inline">\(\mathrm{F}_{2m}\)</span>, we have to manually return <span class="math inline">\(\mathrm{F}_{2m + 1}\)</span> if our current sequence index number <span class="math inline">\(n\)</span> is odd.</p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling.py" mimetype=text/plain >fibonacci-doubling.py</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb1" data-input="code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling.py"><pre class="sourceCode numberSource numberLines python"><code class="sourceCode python"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">def</span> fibonacci_doubling(n):</a>
<a class="sourceLine" id="cb1-2" title="2">    <span class="co">&quot;&quot;&quot; Calculate the Nth Fibonacci number using the doubling method. &quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb1-3" title="3">    <span class="cf">return</span> _fibonacci_doubling(n)[<span class="dv">0</span>]</a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5"></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">def</span> _fibonacci_doubling(n):</a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="co">&quot;&quot;&quot; Calculate Nth Fibonacci number using the doubling method. Return the</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="co">    tuple (F(n), F(n+1)).&quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="cf">if</span> n <span class="op">==</span> <span class="dv">0</span>:</a>
<a class="sourceLine" id="cb1-10" title="10">        <span class="cf">return</span> (<span class="dv">0</span>, <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-11" title="11">    <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb1-12" title="12">        a, b <span class="op">=</span> _fibonacci_doubling(n <span class="op">&gt;&gt;</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb1-13" title="13">        c <span class="op">=</span> a <span class="op">*</span> ((b <span class="op">&lt;&lt;</span> <span class="dv">1</span>) <span class="op">-</span> a)</a>
<a class="sourceLine" id="cb1-14" title="14">        d <span class="op">=</span> a <span class="op">*</span> a <span class="op">+</span> b <span class="op">*</span> b</a>
<a class="sourceLine" id="cb1-15" title="15">        <span class="cf">if</span> n <span class="op">&amp;</span> <span class="dv">1</span>:</a>
<a class="sourceLine" id="cb1-16" title="16">            <span class="cf">return</span> (d, c <span class="op">+</span> d)</a>
<a class="sourceLine" id="cb1-17" title="17">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb1-18" title="18">            <span class="cf">return</span> (c, d)</a>
<a class="sourceLine" id="cb1-19" title="19"></a>
<a class="sourceLine" id="cb1-20" title="20"></a>
<a class="sourceLine" id="cb1-21" title="21"><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">&quot;__main__&quot;</span>:</a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="cf">for</span> n <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">20</span>):</a>
<a class="sourceLine" id="cb1-23" title="23">        <span class="bu">print</span>(fibonacci_doubling(n))</a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="co"># As a demonstration of this algorithm&#39;s speed, here is a large n.</span></a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="bu">print</span>(fibonacci_doubling(<span class="dv">10000</span>))</a></code></pre></div>
</div>
<p>Line 12 is where we do the halving. We use the right-shift operator to do this. Lines 13 and 14 are our doubling identities (I use the left-shift operator here because it feels more natural to me). The if-condition on line 15 returns <span class="math inline">\(\mathrm{F}_{2m + 1}\)</span> if <span class="math inline">\(n\)</span> was odd, and <span class="math inline">\(\mathrm{F}_{2m}\)</span> otherwise.</p>
<p>For comparison, here is an iterative version. On the one hand it avoids Python’s recursion limit, but the downside is a small loss of elegance (we have to loop twice — first to build up the halving/doubling points, and again for the main loop).</p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling-iter.py" mimetype=text/plain >fibonacci-doubling-iter.py</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb2" data-input="code/2017-04-14-computing-fibonacci-numbers/fibonacci-doubling-iter.py"><pre class="sourceCode numberSource numberLines python"><code class="sourceCode python"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">def</span> fibonacci_doubling_iter(n):</a>
<a class="sourceLine" id="cb2-2" title="2">    <span class="co">&quot;&quot;&quot; Calculate Nth Fibonacci number using the doubling method, using</span></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="co">    iteration. &quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb2-4" title="4">    ns <span class="op">=</span> []</a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="cf">while</span> n:</a>
<a class="sourceLine" id="cb2-6" title="6">        ns.extend([n])</a>
<a class="sourceLine" id="cb2-7" title="7">        n <span class="op">&gt;&gt;=</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9">    a, b <span class="op">=</span> <span class="dv">0</span>, <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-10" title="10"></a>
<a class="sourceLine" id="cb2-11" title="11">    <span class="cf">while</span> ns:</a>
<a class="sourceLine" id="cb2-12" title="12">        n <span class="op">=</span> ns.pop()</a>
<a class="sourceLine" id="cb2-13" title="13">        c <span class="op">=</span> a <span class="op">*</span> ((b <span class="op">&lt;&lt;</span> <span class="dv">1</span>) <span class="op">-</span> a)</a>
<a class="sourceLine" id="cb2-14" title="14">        d <span class="op">=</span> a <span class="op">*</span> a <span class="op">+</span> b <span class="op">*</span> b</a>
<a class="sourceLine" id="cb2-15" title="15">        <span class="cf">if</span> n <span class="op">&amp;</span> <span class="dv">1</span>:</a>
<a class="sourceLine" id="cb2-16" title="16">            a, b <span class="op">=</span> d, c <span class="op">+</span> d</a>
<a class="sourceLine" id="cb2-17" title="17">        <span class="cf">else</span>:</a>
<a class="sourceLine" id="cb2-18" title="18">            a, b <span class="op">=</span> c, d</a>
<a class="sourceLine" id="cb2-19" title="19"></a>
<a class="sourceLine" id="cb2-20" title="20">    <span class="cf">return</span> a</a></code></pre></div>
</div>
<h1 id="conclusion">Conclusion</h1>
<p>I hope you enjoyed reading about this method of calculationg Fibonacci numbers as much as I enjoyed learning the math behind it. This algorithm can be sped up if it uses a faster multiplication algorithm as <code>a</code> and <code>b</code> get very large (e.g., Karatsuba multiplication). <a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a> Time complexity is <span class="math inline">\(\Theta(\log{n})\)</span>; it reminds me of the binary search algorithm, in how the problem space is halved repeatedly. Neat!</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>We can choose to define the first two terms as 1 and 1 instead, but this distinction is needlessly arbitrary.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>There is actually a known formula for our purposes, where <span class="math display">\[ \mathrm{F}_{n} = \frac{\varphi^n - (-\varphi)^{-n}}{2\varphi - 1}\]</span> and <span class="math inline">\(\varphi = \frac{1 + \sqrt{5}}{2} \approx 1.6180339887\cdots\)</span> (the golden ratio). Unfortunately this requires arbitrary-precision floating point calculations.<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>For more discussion, see <a href="https://www.nayuki.io/page/fast-fibonacci-algorithms" class="uri">https://www.nayuki.io/page/fast-fibonacci-algorithms</a>.<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>Python already uses Karatsuba multiplication natively for large integers.<a href="#fnref4" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Calling C from Haskell</title>
    <link href="http://funloop.org/post/2017-04-02-calling-c-from-haskell.html" />
    <id>http://funloop.org/post/2017-04-02-calling-c-from-haskell.html</id>
    <published>2017-04-02T00:00:00Z</published>
    <updated>2017-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2017-04-02</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2017-04-02-calling-c-from-haskell.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/haskell.html">haskell</a>
</div>

<p>Yesterday I made a minimal working example of calling C from Haskell, where I call a simple C function to compute the greatest common denominator, or “GCD”. The Haskell portion only serves as a wrapper around the C function. This post is a brief look at the whole setup.</p>
<h1 id="the-setup">The Setup</h1>
<p>I used <code>ghc</code> 8.0.1, and <code>gcc</code> 5.4.0. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a></p>
<h2 id="folder-structure">Folder Structure</h2>
<pre><code>2017-04-02-calling-c-from-haskell
├── build.sh
├── c
│   ├── gcd.c
│   └── gcd.h
└── hs
    ├── ffi.hs
    └── GCD.hs

2 directories, 5 files
</code></pre>
<h2 id="file-contents">File Contents</h2>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/c/gcd.h" mimetype=text/plain >gcd.h</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb2" data-input="code/2017-04-02-calling-c-from-haskell/c/gcd.h"><pre class="sourceCode numberSource numberLines"><code class="sourceCode"><a class="sourceLine" id="cb2-1" title="1">int gcd(int m, int r);</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/c/gcd.c" mimetype=text/plain >gcd.c</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb3" data-input="code/2017-04-02-calling-c-from-haskell/c/gcd.c"><pre class="sourceCode numberSource numberLines c"><code class="sourceCode c"><a class="sourceLine" id="cb3-1" title="1"><span class="pp">#include </span><span class="im">&quot;gcd.h&quot;</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="co">/* Find greatest common divisor. */</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="dt">int</span> gcd(<span class="dt">int</span> m, <span class="dt">int</span> r)</a>
<a class="sourceLine" id="cb3-5" title="5">{</a>
<a class="sourceLine" id="cb3-6" title="6">	<span class="cf">if</span> (r == <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb3-7" title="7">		<span class="cf">return</span> m;</a>
<a class="sourceLine" id="cb3-8" title="8"></a>
<a class="sourceLine" id="cb3-9" title="9">	<span class="cf">return</span> gcd(r, m % r);</a>
<a class="sourceLine" id="cb3-10" title="10">}</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/hs/GCD.hs" mimetype=text/plain >GCD.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb4" data-input="code/2017-04-02-calling-c-from-haskell/hs/GCD.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">module</span> <span class="dt">GCD</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="kw">import</span> <span class="dt">Foreign</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">import</span> <span class="dt">Foreign.C.Types</span></a>
<a class="sourceLine" id="cb4-5" title="5"></a>
<a class="sourceLine" id="cb4-6" title="6">foreign <span class="kw">import</span> ccall &quot;gcd&quot;</a>
<a class="sourceLine" id="cb4-7" title="7"><span class="ot">  c_gcd ::</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">CInt</span> <span class="ot">-&gt;</span> <span class="dt">CInt</span></a>
<a class="sourceLine" id="cb4-8" title="8"></a>
<a class="sourceLine" id="cb4-9" title="9"><span class="ot">f_gcd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb4-10" title="10">f_gcd a b <span class="fu">=</span> <span class="fu">fromIntegral</span> <span class="fu">$</span> c_gcd (<span class="fu">fromIntegral</span> a) (<span class="fu">fromIntegral</span> b)</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/hs/ffi.hs" mimetype=text/plain >ffi.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb5" data-input="code/2017-04-02-calling-c-from-haskell/hs/ffi.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">import</span> <span class="dt">GCD</span></a>
<a class="sourceLine" id="cb5-2" title="2"></a>
<a class="sourceLine" id="cb5-3" title="3"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb5-4" title="4">main <span class="fu">=</span> <span class="fu">mapM_</span> (<span class="fu">print</span> <span class="fu">.</span> <span class="fu">uncurry</span> f_gcd) [(<span class="dv">8</span>, <span class="dv">12</span>), (<span class="dv">30</span>, <span class="dv">105</span>), (<span class="dv">24</span>, <span class="dv">108</span>)]</a></code></pre></div>
</div>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2017-04-02-calling-c-from-haskell/build.sh" mimetype=text/plain >build.sh</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb6" data-input="code/2017-04-02-calling-c-from-haskell/build.sh"><pre class="sourceCode numberSource numberLines bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" title="1"><span class="co">#!/usr/bin/env bash</span></a>
<a class="sourceLine" id="cb6-2" title="2"></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="bu">pushd</span> c</a>
<a class="sourceLine" id="cb6-4" title="4"><span class="fu">gcc</span> -c -o gcd.o gcd.c</a>
<a class="sourceLine" id="cb6-5" title="5"><span class="bu">popd</span></a>
<a class="sourceLine" id="cb6-6" title="6"></a>
<a class="sourceLine" id="cb6-7" title="7"><span class="bu">pushd</span> hs</a>
<a class="sourceLine" id="cb6-8" title="8"><span class="ex">ghc</span> --make ffi.hs ../c/gcd.o</a>
<a class="sourceLine" id="cb6-9" title="9"><span class="bu">popd</span></a></code></pre></div>
</div>
<h1 id="discussion">Discussion</h1>
<p>To compile the example, run the <code>build.sh</code> script. Here is the expected output of the built executable:</p>
<pre><code> $ ./hs/ffi
4
15
12
</code></pre>
<p>. The <code>gcd()</code> C function is easy to work with because it is a pure function without side effects. You can run the <code>ffi</code> binary against <code>valgrind</code> to make sure that we are not leaking any memory (sample output below).</p>
<pre><code> $ valgrind --error-exitcode=1 --leak-check=yes ./hs/ffi
==14582== Memcheck, a memory error detector
==14582== Copyright (C) 2002-2015, and GNU GPL&#39;d, by Julian Seward et al.
==14582== Using Valgrind-3.12.0 and LibVEX; rerun with -h for copyright info
==14582== Command: ./hs/ffi
==14582==
==14582== Warning: set address range perms: large range [0x4200000000, 0x14200100000) (noaccess)
4
15
12
==14582==
==14582== HEAP SUMMARY:
==14582==     in use at exit: 0 bytes in 0 blocks
==14582==   total heap usage: 48 allocs, 48 frees, 60,006 bytes allocated
==14582==
==14582== All heap blocks were freed -- no leaks are possible
==14582==
==14582== For counts of detected and suppressed errors, rerun with: -v
==14582== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
</code></pre>
<h2 id="caveats">Caveats</h2>
<p>Below are some things I tried, but could not get to work.</p>
<ul>
<li>I tried to delete the <code>gcd.c</code> file by moving the function definition in <code>gcd.c</code> to <code>gcd.h</code> (and delete <code>gcd.c</code> entirely). I compiled the object file with <code>gcc -c -Wall -Wextra -Werror -o gcd.o gcd.h</code> but then I got this error:</li>
</ul>
<pre><code> $ ghc --make ffi.hs ../c/gcd.o
[1 of 2] Compiling GCD              ( GCD.hs, GCD.o )
[2 of 2] Compiling Main             ( ffi.hs, ffi.o )
Linking ffi ...
../c/gcd.o: file not recognized: File format not recognized
collect2: error: ld returned 1 exit status
`cc&#39; failed in phase `Linker&#39;. (Exit code: 1)
</code></pre>
<ul>
<li>In <code>GCD.hs</code> you can see the line <code>foreign import ccall &quot;gcd.h gcd&quot;﻿</code>. Instinctively I thought that the <code>gcd.h</code> in <code>﻿&quot;gcd.h gcd&quot;﻿</code> served as a kind of disambiguator, for where the <code>gcd()</code> function came from. So then I defined another function named <code>gcd()</code> in a different C header file (<code>gcd_other.h</code>), compiled it separately, but got a “multple definition” error:</li>
</ul>
<pre><code> $ ghc --make ffi.hs ../c/gcd.o ../c/gcd_other.o
[1 of 2] Compiling GCD              ( GCD.hs, GCD.o )
[2 of 2] Compiling Main             ( ffi.hs, ffi.o )
Linking ffi ...
../c/gcd_other.o: In function `gcd&#39;:
gcd_other.c:(.text+0x0): multiple definition of `gcd&#39;
../c/gcd.o:gcd.c:(.text+0x0): first defined here
collect2: error: ld returned 1 exit status
`cc&#39; failed in phase `Linker&#39;. (Exit code: 1)
</code></pre>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>The version of gcc should not matter at all – actually, any decent C compiler should work.<a href="#fnref1" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>Open-sourcing My Dotfiles</title>
    <link href="http://funloop.org/post/2016-12-04-open-sourcing-my-dotfiles.html" />
    <id>http://funloop.org/post/2016-12-04-open-sourcing-my-dotfiles.html</id>
    <published>2016-12-04T00:00:00Z</published>
    <updated>2016-12-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-12-04</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-12-04-open-sourcing-my-dotfiles.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>
</div>

<h1 id="newsflash">Newsflash!</h1>
<p>I just open-sourced my dotfiles! The repo is probably one of the older Git repos out there and has over 2000 commits! The <a href="https://github.com/listx/syscfg/commit/7ef106b306c1f2a5a7f622f67f1571976e8097ef">first commit</a> was made in March 10, 2009, over 7 years ago. Mind you, even by that time I had accumulated a whole suite of configs, and I even had an exotic setup with XMonad 0.8.1!</p>
<p>Here are some takeaways:</p>
<h2 id="maintain-clean-meaningful-commit-history">Maintain clean, meaningful commit history</h2>
<p>It’s nice to have clean commit history — every line of code can answer <strong>why</strong> it exists. You are doing yourself a disservice (in the long run) if you have overly terse commit messages. Generally speaking, be as verbose as you can be, but within reason. Keeping the first line of the commit message down to less than 80 characters goes a long way in setting the tone for any auxiliary paragraphs that follow.</p>
<p>I am quite proud of the richness of my commit messages. Pretty much everything makes sense and I don’t have to use Google to reason about my choices.</p>
<h2 id="keep-your-build-system-simple">Keep your build system simple</h2>
<p>I’ve used a stupidly simple build system of creating symlinks to “install” my configuration — all with the help of a single <code>Makefile</code>. It’s not very flexible, and to be honest my Shell sklls are much better than what they used to be such that I could replace this setup with a script. But alas, the need for such a change has not been serious enough to warrant it.</p>
<p>Moreover, having a simple “build” system ensures robustness; the more I get older, the more I value systems that have a long “bit-rot halflife”. I admire Knuth’s TEX system for this very same reason. And this is the same reason why I will probably not use anything higher-level than a shell script for the job.</p>
<h2 id="delete-dead-code">Delete dead code</h2>
<p>Every long-living code repository ends up collecting clutter over the years. It’s important to delete such code (and of course any corresponding comments), to keep the codebase nimble. Ultimately, the less code you have to maintain, the better.</p>
<h2 id="dont-settle">Don’t settle</h2>
<p>Software evolves. Always be on the lookout for better software, and new ways to configure them! Leverage the power of open source (free upgrades!) and make it work for you.</p>
<h1 id="do-you-track-your-configs">Do you track your configs?</h1>
<p>If not, you should definitely consider it — what have you got to lose? Keeping a configuration repo (distributed across home computers) is probably the best way for you to learn how to use a distributed source control system; indeed it was how I learned to use Git properly.</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>Replaying Vim Macros</title>
    <link href="http://funloop.org/post/2016-12-03-vim-macro-replay.html" />
    <id>http://funloop.org/post/2016-12-03-vim-macro-replay.html</id>
    <published>2016-12-03T00:00:00Z</published>
    <updated>2016-12-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-12-03</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-12-03-vim-macro-replay.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/emacs.html">emacs</a>, <a href="/tag/vim.html">vim</a>
</div>

<p>I’ve been using Vim (and now, Emacs with Evil mode) for years — and still, every once in a while I get a pleasant surprise. Today I learned that you can replay macros from Visual Line mode! So you don’t always have to record something like <code>j0</code> at the end of your macro to get down to the next line. I.e., after recording your macro for just 1 line, select other lines that you want to replay the macro against with Visual Line mode (<code>V</code>). To replay, do</p>
<pre><code>:&#39;&lt;,&#39;&gt;g/^/norm @q
</code></pre>
<p>(assuming that you recorded your macro into the <code>q</code> register with <code>qq...q</code>).</p>
<p>Thanks to <a href="https://twitter.com/chris_mccord/status/530770735107547136">Chris McCord</a> for the tip (seek to about 3:20 in the <a href="https://youtu.be/3wAeFiGv_yE?t=3m20s">video</a>).</p>
]]></summary>
</entry>
<entry>
    <title>Shelling Out From Latex</title>
    <link href="http://funloop.org/post/2016-10-30-shelling-out-from-latex.html" />
    <id>http://funloop.org/post/2016-10-30-shelling-out-from-latex.html</id>
    <published>2016-10-30T00:00:00Z</published>
    <updated>2016-10-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-10-30</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-10-30-shelling-out-from-latex.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/tex.html">tex</a>
</div>

<h1 id="the-problem">The Problem</h1>
<p>For years, whenever I wanted to interact with the outer shell environment from Latex, I would use one of two methods:</p>
<ol>
<li>perform some shell step separately from Latex and inject it into the Latex sources, or</li>
<li>save it somewhere else and pull it in from Latex with <code>\input{foo}</code>.</li>
</ol>
<p>But I learned recently that it can be done much more simply, if you are willing to use Luatex!</p>
<h1 id="enter-luatex">Enter Luatex</h1>
<p>Let’s assume that you keep your Latex document in source control and want to inject the Git hash into the document. First, define a new command called <code>\shell</code>.</p>
<pre><code>% Call shell! See http://tex.stackexchange.com/a/114939/30920.
\newcommand\shell[1]{\directlua{
    local handle, err = io.popen([[#1]])
    if not handle then
        tex.print(err)
        os.exit(1)
    end
    local result = handle:read(&quot;*a&quot;)
    handle:close()
    tex.print(result)
}}
</code></pre>
<p>Then use it like this:</p>
<pre><code>\shell{TZ=&#39;America/Los_Angeles&#39; date}

\shell{git describe --always}%
\shell{(( $(git --no-pager diff 2&gt;/dev/null | wc -l) + $(git --no-pager diff --cached 2&gt;/dev/null | wc -l) &gt; 0 )) &amp;&amp; echo &#39;*&#39;}
</code></pre>
<p>. I then use <code>lualatex --shell-escape foo.tex</code> to compile it. This is actual code from a Luatex document of mine.</p>
<p>I am not sure which shell program gets invoked, but for most things it should not matter much.</p>
<h1 id="conclusion">Conclusion</h1>
<p>Now you know how to shell out from Latex!</p>
<p>Happy hacking!</p>
]]></summary>
</entry>
<entry>
    <title>My Esrille Layout: The ZQ Layout</title>
    <link href="http://funloop.org/post/2016-10-01-my-esrille-layout.html" />
    <id>http://funloop.org/post/2016-10-01-my-esrille-layout.html</id>
    <published>2016-10-01T00:00:00Z</published>
    <updated>2016-10-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-10-01</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-10-01-my-esrille-layout.org" title="History">*</a>
	<br>
	<a href="/tag/programming.html">programming</a>, <a href="/tag/c.html">c</a>, <a href="/tag/hardware.html">hardware</a>
</div>

<h1 id="the-zq-keyoard-layout">The ZQ Keyoard Layout</h1>
<p>I’ve spent quite some time on keyboards in my previous posts, and this post is no different. After several months of tweaking my <a href="./2016-04-14-esrille-nisse-keyboard.html">original layout</a>, I have more or less settled on the final design. You can get the sources at my repo <a href="https://github.com/listx/new-keyboard">here</a>.</p>
<p>Is for the name “ZQ”, it was originally chosen from the way these keys were arranged; the location of these keys have since changed, but the name has stuck.</p>
<h2 id="base-layer">Base Layer</h2>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    ! # * □ □         □ □ / ~ $
□ □ ; y o p v 1     1 m f t r _ □ □
□ 2 a i e u w 3     2 h j k l n 3 □ &lt;--- Home row
  4 z x q &#39; &quot;         b d g c s 4
      5 6 7 8 9     5 , 6 7 8 &lt;--------- Thumb row

Left-side legend

1) PageUp
2) Escape
3) Tab
4) Shift
5) Insert
6) Super (Windows key)
7) Space
8) Caps Lock (remapped with xmodmap to Hyper key)
9) Control

Right-side legend

1) PageDown
2) Return
3) Delete
4) Shift
5) FN2
6) FN
7) Alt
8) Right Alt (aka &quot;AltGr&quot; for US International Layout)
</code></pre>
<h2 id="fn-layer">FN Layer</h2>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ □ □ □         □ □ □ □ □
□ □ ? 7 8 9 = a     a ` \ . : &amp; □ □
□ □ - 4 5 6 + ^     @ b { ( ) } □ □ &lt;--- Home row
  □ 0 1 2 3 %         | [ &lt; &gt; ] □
      □ □ b □ □     □ □ □ □ □ &lt;--------- Thumb row

Left-side legend

a) Home
b) Space

Right-side legend

a) End
b) Backspace
</code></pre>
<h2 id="fn2-layer">FN2 Layer</h2>
<pre><code>    □ □ □ □ □ □     □ □ □ □ □ □
    □ □ □ □ □         □ □ □ □ □
□ □ l g h i □ □     □ □ □ □ □ □ □ □
□ □ k d e f □ □     □ a b c d □ □ □ &lt;--- Home row
  □ j a b c □         □ □ □ □ □ □
      □ □ □ □ □     □ □ □ □ □ &lt;--------- Thumb row

Left-side legend

a) F1
b) F2
c) F3
d) F4
e) F5
f) F6
g) F7
h) F8
i) F9
j) F10
k) F11
l) F12

Right-side legend

a) Left Arrow
b) Down Arrow
c) Up Arrow
d) Right Arrow
</code></pre>
<h2 id="keycap-arrangement">Keycap Arrangement</h2>
<p>I have not covered this topic before, but I think it is worth mentioning. On the underside of each keycap, there is a number; presumably for the row that the keycap is designed for. I’ve rearranged the default keycap placement to better reflect how I use my keys. The biggest change from the default Esrille setup is that I vertically flip the thumb row keys, so that they are “upside-down”. I find this arrangement more comfortable for my thumbs.</p>
<pre><code>    n n n n n n     n n n n n n
    n n n n n         n n n n n
n 3 3 3 3 3 3 n     n 3 3 3 3 3 3 n
3 3 2 2 2 2 2 n     n 2 2 2 2 2 3 3 &lt;--- Home row
  1 2 1 1 1 2         2 1 1 1 2 1
      1 1 1 1 1     1 1 1 1 1 &lt;--------- Thumb row*

Legend

n) No number
1) Row 1
2) Row 2
3) Row 3

*The thumb row keycaps are flipped upside-down for better comfort.
</code></pre>
<h1 id="typing-speed">Typing Speed</h1>
<p>After some time, I realized that the end goal was to design a layout that was not more “optimal” in the sense of mechanical efficiency, but rather to design something more <em>comfortable</em> to use. I can readily say that even at this early stage, I tend to like this layout more over Qwerty because my hands stay put as I type. The only time I move my wrists from their default position is when I need to reach the six keys up top in the base layer (<code>!#*/~$</code>).</p>
<p>It may turn out that this new layout does not really improve raw typing speed; but really I don’t care because home-row access to parentheses and the backspace key are too good to let go.</p>
<h1 id="other-thoughts">Other Thoughts</h1>
<p>The design has changed quite a bit in these past few months. After some initial trials, I realized that the arrangement recommended by my <a href="https://github.com/listx/keylo">program</a> was not really optimized the way I wanted it to be. For one, the corpus I fed into the program was not very good because it didn’t realy reflect my real-world use-case; I use Vim-style HJKL keys almost everywhere, and really to get a truly representative histogram of keypresses, I should have used a keylogger for some months to record my actual usage. As time was of the essence, I decided to just evolve the layout gradually, tweaking bits I found annoying.</p>
<p>One hurdle was simply trying to avoid using the same finger in succession. In the current ZQ layout, the right index finger is charged with six keys: MHBFJD. It took a lot of trial and error to arrive at this combination.</p>
<p>I also just kept the original Qwerty placement of the HJKL keys. The main reason is that I use these keys all the time, so much that they deserve their original home-row placement. And, actually they helped in reducing same-finger consecutiveness (J and K are rare letters in English).</p>
<p>Another point of concern was the interaction of some key combinations like YN and &lt;Return&gt;. It is common to type either Y or N and press &lt;Return&gt; immediately after, when dealing with interactive torminal programs. The same goes for some UNIX-y combinations like <code>~/</code> for the home directory in the filesystem, or <code>*</code> and <code>/</code> for interactive search in vim(1) and less(1), respectvely. The current design of ZQ strives to make these combinations easy to type.</p>
<p>Lastly, I paid a great deal of attention for certain common letter combinations — in particular, “gh”, “ch”, “sh”, “th”, and “wh”. Because I decided to keep HJKL keys on the home row, and because H was assigned to the right index finger, I had to make sure that I place the GCSTW keys either on the left side of the keyboard (as I did with “W”), or place them for the other fingers. This effort alone resulted in dictating where most of the keys ended up.</p>
<p>After all that’s been said, time will tell if I truly do end up using this layout. I have a friend who uses Dvorak for work and Qwerty for gaming; perhaps I’ll end up in a similar boat.</p>
]]></summary>
</entry>
<entry>
    <title>The Parking Lot Problem, or "Smallest Free Number"</title>
    <link href="http://funloop.org/post/2016-09-24-parking-lot-problem-revisited.html" />
    <id>http://funloop.org/post/2016-09-24-parking-lot-problem-revisited.html</id>
    <published>2016-09-24T00:00:00Z</published>
    <updated>2016-09-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-09-24</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-09-24-parking-lot-problem-revisited.org" title="History">*</a>
	<br>
	<a href="/tag/math.html">math</a>, <a href="/tag/programming.html">programming</a>, <a href="/tag/haskell.html">haskell</a>
</div>

<p>Almost exactly two years ago, I discussed what I called the <a href="./2014-09-22-parking-lot-problem.html">Parking Lot Problem</a>. Recently I discovered that it is a widely-known problem, enough to be featured in the very first chapter of <em>Pearls of Functional Algorithm Design</em> (2010) by Richard Bird — where it is simply called “smallest free number”. In this post, I want to go over Bird’s explanations in more detail; my aim is to spare you the effort in deciphering his opaque writing style.</p>
<p>Bird presents two solutions — an imperative, array-based solution and a functional solution based on divide-and-conquer.</p>
<h1 id="problem-statement">Problem Statement</h1>
<p>Bird describes the problem as “computing the smallest natural number not in a given finite set <em>X</em> of natural numbers”. Here, <strong>natural numbers</strong> means the set of all positive integers and zero, or just <code>[0..]</code> in Haskell.</p>
<p>I would like to add some further terminology. Let us think of the set <em>X</em> as <code>xs</code> (a list of elements in <em>X</em>), and call the set of all free numbers as the <em>free set</em>. Using our original parking lot analogy, the infinite parking lot is the set of all natural numbers, <em>X</em> is the list of parked spots (occupied), and finally the <em>free set</em> is the list of all unoccupied (open) parking spots.</p>
<h1 id="naive-list-based-solution">Naive list-based solution</h1>
<div class="code-and-raw lineCntMax10">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2016-09-24-parking-lot-problem-revisited/naive.hs" mimetype=text/plain >naive.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb1" data-input="code/2016-09-24-parking-lot-problem-revisited/naive.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">import</span> <span class="dt">Data.List</span> ((\\))</a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="ot">minfreeNaive ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-4" title="4">minfreeNaive xs <span class="fu">=</span> <span class="fu">head</span> ([<span class="dv">0</span><span class="fu">..</span>] \\ xs)</a></code></pre></div>
</div>
<p>The worst case of <strong>minfreeNaive</strong> is <span class="math inline">\(\Theta(n^2)\)</span>, because it translates into imperative pseudocode as follows:</p>
<pre><code># Algorithm P1
minfreeNaive(xs)
{
  let freeSpots = array from 0 to infinity
  let i = all natural numbers 0 to infinity
  let j = i
  let xs_max_idx = xs.length - 1

  for (i = 0;; i++) {
    for (j = 0; j &lt; xs_max_idx; j++) {
      if (i == xs[j]) {
        remove i from freeSpots
      }
    }

    if (i &gt; xs_max_idx) {
      break
    }
  }

  return freeSpots.first_one
}
</code></pre>
<p>. Now imagine if <strong>xs</strong> looks like <strong>[9,8,7,6,5,4,3,2,1,0]</strong>. Then the first iteration of the outer <strong>i</strong> for-loop would check all 10 values in <strong>xs</strong>, until finally hitting the last value in <strong>xs</strong>, 0 to remove that 0 from <strong>candidates</strong>. Then the second iteration would check all values 9 through 2, until removing <strong>1</strong> from candidates. And so on, until it removed 9 as well. So, the total number of times that single <strong>if</strong> statement gets executed is</p>
<p><span class="math display">\[
10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55
\]</span></p>
<p>. The formula for the sum of all positive, consecutive integers 1 through N is</p>
<p><span class="math display">\[
\frac{n(n + 1)}{2} = \frac{n^2 + n}{2}.
\]</span></p>
<p>In Big-O notation, the above reduces to just <span class="math inline">\(n^2\)</span> because of the first term <span class="math inline">\(n^2\)</span> in <span class="math inline">\(n^2 + n\)</span>. <a href="#fn1" class="footnote-ref" id="fnref1"><sup>1</sup></a> As a side note, the above equation has a colorful history in mathematics, <a href="https://en.wikipedia.org/wiki/Carl_Friedrich_Gauss#Anecdotes">anecdotally attributed to Gauss</a>.</p>
<h1 id="interlude-key-insight-of-the-problem">Interlude: Key insight of the problem</h1>
<p>Bird says the following:</p>
<blockquote>
<p>The key fact for both the array-based and divide and conquer solutions is that not every number in the range [ 0 .. <em>length xs</em> ] can be in <em>xs</em>. Thus the smallest number not in <em>xs</em> is the smallest number not in <em>filter (&lt;= n) xs</em>, where <em>n = length xs</em>.</p>
</blockquote>
<p>. Let’s examine the first sentence. Consider <code>length xs = 1</code>. That is, what if <code>xs</code> is only 1 element big (only 1 car is parked in the lot)? Intuitively, it appears that we don’t need to perform millions and millions of checks. Since we know that there is only 1 car parked, we just need to consider if that car is in Parking Spot 0 (the first free spot, or <em>PS0</em>). If it is, then we can assign the next slot, PS1. Otherwise, we can assign PS0 itself. If there are 2 cars parked (<code>length xs = 2</code>), in total we need only consider the first 2 spots, PS0, PS1 — if those are both taken, then the answer is PS2.</p>
<p>This leads us to the main theorem of this problem (let’s call it the <strong>Fullness Theorem</strong>):</p>
<blockquote>
<p>For any <strong>n</strong> cars parked, we can consider the spots numbered <code>[0..(n-1)]</code>; if all of those spots are full, we can assign spot <strong>n</strong> itself.</p>
</blockquote>
<p>(This statement may seem elementary, but it plays a crucial role in the divide-and-conquer approach discussed later.) Now, since <code>length [0..(n-1)]</code> coincidentally happens to be just <strong>n</strong>, the total number of spots taken into consideration for this problem is <strong>n + 1</strong> — parking spots <code>[0..(n-1)]</code> and spot <code>n</code> itself. And so we can reduce the free set to just <code>[0..(n-1)] ++ [n]</code>, or the equivalent <code>[0 .. length xs]</code> and ignore all other possible free spots. <a href="#fn2" class="footnote-ref" id="fnref2"><sup>2</sup></a> To restate, our answer to the original problem statement lies somewhere in this range <code>[0 .. length xs]</code>, which we will call <strong>reducedFrees</strong>.</p>
<p>Now let’s look at the second sentence. It describes the set <code>filter (&lt;n) xs</code>, which we will call <strong>reducedXs</strong>. <a href="#fn3" class="footnote-ref" id="fnref3"><sup>3</sup></a> The set <strong>reducedXs</strong> is found by removing all elements in <strong>xs</strong> that are too big for our problem size of <strong>n + 1</strong> spots — i.e., beyond the range in <strong>reducedFrees</strong>.</p>
<h1 id="improved-array-based-solution">Improved array-based solution</h1>
<p>Using the insight gained above, we can restate the problem as follows:</p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2016-09-24-parking-lot-problem-revisited/array1.hs" mimetype=text/plain >array1.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb3" data-input="code/2016-09-24-parking-lot-problem-revisited/array1.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">import</span> <span class="dt">Data.Array</span> (<span class="dt">Array</span>, accumArray, elems)</a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="ot">minfreeArray1 ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-4" title="4">minfreeArray1 <span class="fu">=</span> search <span class="fu">.</span> checklist</a>
<a class="sourceLine" id="cb3-5" title="5"></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="co">-- Look for first False value (empty space).</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="ot">search ::</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-8" title="8">search <span class="fu">=</span> <span class="fu">length</span> <span class="fu">.</span> <span class="fu">takeWhile</span> <span class="fu">id</span> <span class="fu">.</span> elems</a>
<a class="sourceLine" id="cb3-9" title="9"></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="co">-- Convert a list of parked spaces into an ordered list of Boolean values in the</span></a>
<a class="sourceLine" id="cb3-11" title="11"><span class="co">-- range *reducedXs*.</span></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="ot">checklist ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb3-13" title="13">checklist xs <span class="fu">=</span> accumArray</a>
<a class="sourceLine" id="cb3-14" title="14">  (<span class="fu">||</span>) <span class="co">-- accumulating function</span></a>
<a class="sourceLine" id="cb3-15" title="15">  <span class="dt">False</span> <span class="co">-- initial value</span></a>
<a class="sourceLine" id="cb3-16" title="16">  (<span class="dv">0</span>, n) <span class="co">-- bounds of the array</span></a>
<a class="sourceLine" id="cb3-17" title="17">  (<span class="fu">zip</span> (<span class="fu">filter</span> (<span class="fu">&lt;</span>n) xs) (<span class="fu">repeat</span> <span class="dt">True</span>)) <span class="co">-- association list of `(index, value)&#39; pairs</span></a>
<a class="sourceLine" id="cb3-18" title="18">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-19" title="19">  n <span class="fu">=</span> <span class="fu">length</span> xs</a></code></pre></div>
</div>
<p>.</p>
<p>Bird says “[t]he function <em>search</em> takes an array of Booleans, converts the array into a list of Booleans and returns the length of the longest initial segment consisting of <em>True</em> entries. This number will be the position of the first <em>False</em> entry.” This is true, and we’ll soon see why this is the case.</p>
<p>In order to understand how <strong>minfreeArray1</strong> works, let’s first examine a further simplification of the problem. Conceptually we are only interested in the very first group of consecutively parked cars (if it exists at all), because as soon as this first group of cars ends, we are at the lowest-numbered free parking spot. In binary, we can represent an empty spot as 0 and a parked car as 1. The set of parked cars in <strong>reducedXs</strong> might look something like this (using a <code>.</code> for <code>0</code>):</p>
<pre class="example"><code>111111.11.1.111.1.111.111.11.1......1.1.111.1
^^^^^^
</code></pre>
<p>. Although there are many groups of parked cars, we are only interested in the <strong>first</strong> group, denoted by the hat signs. Consider another example:</p>
<pre class="example"><code>.111.1.111.11...
 ^^^
</code></pre>
<p>. In this there is the triplet of cars, but it starts after an empty spot at PS0. Lastly let’s consider</p>
<pre class="example"><code>..........1..111111.111.1.1.111.1
          ^
</code></pre>
<p>; again, the first group of cars (in this case just 1 car) is preceded by an empty spot (actually, many such empty spots). In the last two examples, the answer is simply 0, for the very first spot PS0. For all other cases, the first group of cars starts from PS0, and extends some arbitrary number of spots, until “breaking” by an available spot. So there are two cases really as far as <strong>reducedXs</strong> is concerned:</p>
<ol>
<li>there is a contiguous group of car(s) from PS0 onwards, or</li>
<li>PS0 is empty.</li>
</ol>
<p>The algorithm then is simply <code>length $ takeWhile (==True) checklist</code>, where <code>checklist</code> is a list of Boolean values with a 1:1 mapping of the parking spots, in order (with <code>True</code> representing a parked car and <code>False</code> representing an empty spot). If we’re in case 2) as above, then we get 0 because <code>takeWhile</code> never grows. If we’re in case 1), <code>takeWhile</code> keeps growing until the first empty spot; coincidentally, the length of <code>takeWhile</code>’s return list happens to be the index of the next free spot, we can just use the size of the return list of <code>takeWhile</code> as-is.</p>
<p>And this is exactly what the <code>search</code> function does in the algorithm Bird describes. <code>elems</code> returns all the elements of an Array. <code>takeWhile</code> grows a list so long as the given predicate evaluates to <strong>True</strong>; since we already have Booleans, we can just use <strong>id</strong>. All we need to give as an argument to <code>search</code> is a Boolean list that is ordered from PS0 to PSn (the range of <strong>reducedXs</strong>). This conversion of a list of unordered natural numbers into a sorted list of Boolean values in the range covered by <strong>reducedXs</strong> is handled by <code>checklist</code>.</p>
<p>Bird uses the library function <code>Data.Array.accumArray</code> to populate <code>checklist</code>. <code>accumArray</code> takes a list of index-value pairs, and if there are multiple pairs with the same index, combines the values of those pairs using the accumulating function. A common use case of <code>accumArray</code> is to use it to create a histogram of values, by using <code>(+)</code> as the accumulating function (so that all values at a particular index are summed together). In the <code>checklist</code> implementation by Bird, the accumulating function is <code>(||)</code> (logical OR function) to account for the possibility of duplicate numbers in <code>xs</code>. E.g., if <code>xs = [1, 2, 1]</code>, then the ordered pairs are <code>[(0, False), (1, True), (2, True), (1, True)]</code>, and <code>checklist</code> evaluates to <code>[False, True, True]</code>, because the <code>True</code> value in the two instances of <code>(1, True)</code> are simply OR-ed together by <code>(||)</code>.</p>
<h2 id="using-accumarray-to-sort-numbers">Using <code>accumArray</code> to sort numbers</h2>
<p>Bird mentions that you can use <code>accumArray</code> to sort positive integers. The code is as follows:</p>
<div class="sourceCode" id="cb7" data-results="session"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">import</span> <span class="dt">Data.Array</span> (<span class="dt">Array</span>, accumArray)</a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="ot">countlist ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb7-4" title="4">countlist xs <span class="fu">=</span> accumArray (<span class="fu">+</span>) <span class="dv">0</span> (<span class="dv">0</span>, n) (<span class="fu">zip</span> xs (<span class="fu">repeat</span> <span class="dv">1</span>))</a>
<a class="sourceLine" id="cb7-5" title="5"></a>
<a class="sourceLine" id="cb7-6" title="6"><span class="fu">sort</span> xs <span class="fu">=</span> <span class="fu">concat</span> [ <span class="fu">replicate</span> k x <span class="fu">|</span> (x, k) <span class="ot">&lt;-</span> assocs <span class="fu">$</span> countlist xs ]</a></code></pre></div>
<p>. (Bird defines <code>sort</code> without the use of <code>assocs</code> which gives a list of tuples of the form <code>(index, element-at-index)</code>, but that is in error.) The way it works is, <code>countlist</code> essentially builds a histogram of numbers we want to sort. So, given <code>[0, 6, 2, 0, 0]</code>, we get <code>[(0,3),(2,1),(6,1)]</code>. We then use <code>replicate</code> in <code>sort</code> to “unpack” each element of the histogram. Continuing with the example, <code>(0,3)</code> becomes <code>[0, 0, 0]</code>, <code>(2,1)</code> becomes <code>[2]</code>, and so on. Since the result looks like <code>[[0,0,0],[2],[6]]</code> we have to <code>concat</code> it to get <code>[0,0,0,2,6]</code>, our sorted list.</p>
<h2 id="sorting-for-free">Sorting for “free”</h2>
<p>It should be reiterated here that ultimately we want to have an ordered list of Booleans that preserves the occupied parking spot information in the original list of “taken” spots. The way in which <code>checklist</code> performs the conversion of unordered numbers into a nice list of Booleans in the range <code>[0..n]</code> is virtually identical in design to the algorithm described by Jon Bentley in the very first chapter of his book <em>Programming Pearls</em> (2nd Ed., 2000). There Bentley used a bitmap to represent a Boolean array because of strict memory requirements — but otherwise the spirit of the data structure remains the same.</p>
<h1 id="further-improved-array-based-solution">(Further improved) Array-based solution</h1>
<p>Bird’s final array-based algorithm uses the ST Monad to squeeze out some more performance of the <code>checklist</code> function. Here is the code:</p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2016-09-24-parking-lot-problem-revisited/array2.hs" mimetype=text/plain >array2.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb8" data-input="code/2016-09-24-parking-lot-problem-revisited/array2.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">import</span> <span class="dt">Data.Array</span> (<span class="dt">Array</span>, elems)</a>
<a class="sourceLine" id="cb8-2" title="2"><span class="kw">import</span> <span class="dt">Data.Array.ST</span> (runSTArray, newArray, writeArray)</a>
<a class="sourceLine" id="cb8-3" title="3"></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="ot">minfreeArray2 ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb8-5" title="5">minfreeArray2 <span class="fu">=</span> search <span class="fu">.</span> checklist</a>
<a class="sourceLine" id="cb8-6" title="6"></a>
<a class="sourceLine" id="cb8-7" title="7"><span class="ot">search ::</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb8-8" title="8">search <span class="fu">=</span> <span class="fu">length</span> <span class="fu">.</span> <span class="fu">takeWhile</span> <span class="fu">id</span> <span class="fu">.</span> elems</a>
<a class="sourceLine" id="cb8-9" title="9"></a>
<a class="sourceLine" id="cb8-10" title="10"><span class="ot">checklist ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Array</span> <span class="dt">Int</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb8-11" title="11">checklist xs <span class="fu">=</span> runSTArray <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-12" title="12">  a <span class="ot">&lt;-</span> newArray (<span class="dv">0</span>, n) <span class="dt">False</span></a>
<a class="sourceLine" id="cb8-13" title="13">  <span class="fu">sequence</span> [writeArray a x <span class="dt">True</span> <span class="fu">|</span> x <span class="ot">&lt;-</span> xs, x <span class="fu">&lt;</span> n]</a>
<a class="sourceLine" id="cb8-14" title="14">  <span class="fu">return</span> a</a>
<a class="sourceLine" id="cb8-15" title="15">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-16" title="16">  n <span class="fu">=</span> <span class="fu">length</span> xs</a></code></pre></div>
</div>
<p>. The use of the ST monad here reduces memory overhead, and according to Bird it is the most efficient approach using an imperative style on top of arrays.</p>
<h1 id="divide-and-conquer-via-recursion">Divide and Conquer via Recursion</h1>
<p>Ah, recursion. Bird describes the following divide-and-conquer algorithm as a faster alternative to <code>accumArray</code>. <a href="#fn4" class="footnote-ref" id="fnref4"><sup>4</sup></a></p>
<div class="code-and-raw lineCntMax100">
<div class="raw-link sourceCode">
<table class="sourceCode numberLines noPaddingBottom"><tbody><tr class="sourceCode"><td class="lineNumbers"><pre>&nbsp;■</pre></td><td class="sourceCode"><pre><code><a class="raw" href= "/code/2016-09-24-parking-lot-problem-revisited/divideAndConquer.hs" mimetype=text/plain >divideAndConquer.hs</a></code></pre></td></tr></tbody></table>
</div>
<div class="sourceCode" id="cb9" data-input="code/2016-09-24-parking-lot-problem-revisited/divideAndConquer.hs"><pre class="sourceCode numberSource numberLines haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="kw">import</span> <span class="dt">Data.List</span> (partition)</a>
<a class="sourceLine" id="cb9-2" title="2"></a>
<a class="sourceLine" id="cb9-3" title="3"><span class="ot">minfreeRecurse ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-4" title="4">minfreeRecurse xs <span class="fu">=</span> minfrom <span class="dv">0</span> (<span class="fu">length</span> xs, xs)</a>
<a class="sourceLine" id="cb9-5" title="5"></a>
<a class="sourceLine" id="cb9-6" title="6"><span class="ot">minfrom ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> (<span class="dt">Int</span>, [<span class="dt">Int</span>]) <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-7" title="7">minfrom a (n, xs)</a>
<a class="sourceLine" id="cb9-8" title="8">  <span class="fu">|</span> (n <span class="fu">==</span> <span class="dv">0</span>) <span class="fu">=</span> a</a>
<a class="sourceLine" id="cb9-9" title="9">  <span class="fu">|</span> (m <span class="fu">==</span> b <span class="fu">-</span> a) <span class="fu">=</span> minfrom b (n <span class="fu">-</span> m, bs)</a>
<a class="sourceLine" id="cb9-10" title="10">  <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> minfrom a (m, as)</a>
<a class="sourceLine" id="cb9-11" title="11">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-12" title="12">  (as, bs) <span class="fu">=</span> partition (<span class="fu">&lt;</span>b) xs</a>
<a class="sourceLine" id="cb9-13" title="13">  b <span class="fu">=</span> a <span class="fu">+</span> (<span class="fu">div</span> n <span class="dv">2</span>) <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb9-14" title="14">  m <span class="fu">=</span> <span class="fu">length</span> as</a></code></pre></div>
</div>
<p>The overall idea is that we can define the problem <code>minimum of ([0..] \\ xs)</code> by dividing up <code>xs</code> into 2 halves, and then look into the correct sub-part for the solution. Notice that we are partitioning the <code>xs</code> (soley the list of parked spots), and <em>not</em> the parking lot itself.</p>
<p>For example, we can divide up <code>xs</code> into <code>as</code> and <code>bs</code>, where <code>(as, bs) = partition (&lt;b) xs</code>. (The <code>partition</code> library function simply splits up a given list into 2 subsets, those that satisfy the given condition, and those that do not.) Deciding which partition to look at is simple: look in the upper partition if the lower partition (containing the smaller-numbered parking spots) is full.</p>
<p>The line <code>(n == 0) = a</code> merely means that, if the list of cars is empty, simply choose the lowest number (which is, by definition, <code>a</code>). The line <code>(m == b - a) = minfrom b (n -m, bs)</code> chooses the bigger partition of the two partitions, on the condition <code>(m == b - a)</code>. This condition asks whether the <em>length</em> of <code>as</code> (the first partition) equal to the distance of <code>b - a</code> — in other words, whether <code>as</code> fills up the entire range <code>[a..(b-1)]</code>. If it does fill up the entire range, then this parking lot subsection is completely packed with cars, so there is no point in looking; we must look into the other partition (<code>[b..]</code>) for the first empty spot. Otherwise, we look into the first partition.</p>
<p>The hard part here is choosing the value of <code>b</code> (the pivot at which we decide to partition <code>xs</code>). By definition, our partitions are <code>as</code> and <code>bs</code>, where <code>(as, bs) = partition (&lt;b) xs</code>.) There are two things we want:</p>
<ul>
<li>minimum difference in size between <code>as</code> and <code>bs</code>, and</li>
<li>nonzero length partition for the first partition <code>as</code>.</li>
</ul>
<p>We want minimal size difference between <code>as</code> and <code>bs</code> because otherwise we might end up calling <code>minfrom</code> many times; we want it so that whether we use <code>as</code> or <code>bs</code> (in whichever sequence), we deal with smaller and smaller lists of parked cars. The only way to do this is to divide the list of cars by half each time. This is where we get <code>div n 2</code>. This is, more or less, the spirit of binary search.</p>
<p>The requirement of the second condition is more subtle — we want to avoid taking a zero-length partition for <code>as</code>, because our main conditional <code>m == b - a</code> relies on the fact that this distance, <code>b - a</code>, is nonzero. This is because it must ask the question, “do the parking spots in the first partition fill up all spots in the range that it can cover?”, and this question loses its meaning if we give it an empty partition. Seen another way, the statement <code>partition (&lt;b) xs</code>, and the act of choosing those <code>xs</code> that are <code>b</code> or bigger <em>if the first partition is completely full</em>, is the recursive analogue of the Fullness Theorem. Whereas the Fullness Theorem did not really help much in the iterative array-based solution, it plays a key role in this recursive solution, because it correctly describes how to partition <code>xs</code> with minimum fuss. The phrase “otherwise assign spot <strong>n</strong> itself” in that Theorem translates to choosing the non-full, bigger partition, because it starts with spot <strong>n</strong> — the only twist here is that instead of assigning spot <strong>n</strong> directly, we re-assign ourselves a new problem of looking for parking spots <em>starting</em> with spot <strong>n</strong>. To be clear, this partitioning scheme merely discards consecutive runs of parked cars, about <code>div n 2</code> spots at a time.</p>
<p>For demonstrative purposes, let’s consider what would happen if we ignored what we just said and really did define <code>b</code> as</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1">b <span class="fu">=</span> a <span class="fu">+</span> (<span class="fu">div</span> n <span class="dv">2</span>)</a></code></pre></div>
<p>for the case of <code>xs = [0]</code> and <code>n = 1</code>; we would start off with</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1">minfrom <span class="dv">0</span> (<span class="dv">1</span>, [<span class="dv">0</span>])</a></code></pre></div>
<p>and</p>
<p><span class="math display">\[
b = 0 + (\mathrm{div}\;1\,2) = 0 + 0 = 0,
\]</span></p>
<p>such that</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1">partition (<span class="fu">&lt;</span><span class="dv">0</span>) [<span class="dv">0</span>] <span class="co">-- ([], [0])</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="co">-- as = []</span></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="co">-- m = 0</span></a>
<a class="sourceLine" id="cb12-4" title="4"><span class="co">-- bs = [0]</span></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="co">-- n = 1</span></a></code></pre></div>
<p>and since</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1">(m <span class="fu">==</span> b <span class="fu">-</span> a) <span class="co">-- (0 == 0 - 0) true!</span></a></code></pre></div>
<p>we would in turn execute</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1">minfrom b (n <span class="fu">-</span> m, bs) <span class="co">-- minfrom 0 (1, [0])</span></a></code></pre></div>
<p>, resulting in an infinite loop! Thus the correct way to choose <code>b</code> is with</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" title="1">b <span class="fu">=</span> a <span class="fu">+</span> (<span class="fu">div</span> n <span class="dv">2</span>) <span class="fu">+</span> <span class="dv">1</span></a></code></pre></div>
<h2 id="running-time">Running time</h2>
<p>Bird gives the running time as <span class="math inline">\(\Theta(n)\)</span>. He offers this cryptic phrase:</p>
<blockquote>
<p>… the number of steps <span class="math inline">\(T(n)\)</span> for evaluating <em>minfrom 0 xs</em> when <em>n = length xs</em> satisfies <span class="math inline">\(T(n) = T(n\,div\,2) + \Theta(n)\)</span>, with the solution <span class="math inline">\(T(n) = \Theta(n)\)</span>.</p>
</blockquote>
<p>Alas, I am not sure what this means. Here’s my own justification of why we have running time <span class="math inline">\(\Theta(n)\)</span>. The two most expensive operations in the recursive algorithm are <code>m = length as</code> and <code>partition (&lt;b) xs</code>. The thing is that both of these calculations take <span class="math inline">\(\Theta(n)\)</span> time, and both occur only once each, for every call to <code>minfrom</code>. Now, <code>minfrom</code> calculates <code>length as</code>, but <em>it does not calculate</em> <code>length bs</code>. This is again, because of the Fullness Theorem — we only care about the first partition being completely packed with cars. Thus, we never really calculate <code>m = length as</code> over the same range. The worst case is an input like <code>xs = [0..1000]</code> where the entire range of concern is packed with cars; in this case we would calculate the length of <code>[0..500]</code>, then see that it’s full and choose the second partition. We’d then choose <code>[501..750]</code>, and so on, such that the sum of these calculations effectively cost as much as <code>length xs</code>, or <span class="math inline">\(n\)</span> itself.</p>
<h2 id="connection-to-parking-load-problem">Connection to “Parking Load” problem</h2>
<p>In my sister post, I also described a similar problem, dubbed the Parking Load problem. At the time, I was quite surprised at how the answer was much simpler and easier to calculate. From the insight I gained from the Fullness Theorem, I think it is clear why that is the case. Indeed, the Parking Load problem is just a slight wrinkle of the Fullness Theorem, where <code>n</code> (number of parked cars) is known, but <code>b</code> (the endpoint of the “partition”), if you will, is unknown. The problem is to simply compute <span class="math inline">\(b + 1 - n\)</span>. (We have to add 1 to <code>b</code> because we use 0-based indexing.) I love it when you can explain something in a new way — don’t you?</p>
<h1 id="conclusion">Conclusion</h1>
<p>I think this lays to rest (for now) the intricacies of the Parking Lot problem, or as Bird puts it, finding the smallest free number. Still, I like my parking lot analogy better because I believe it’s important to talk about problems in a way that can be related to the real world.</p>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>Big-O only cares about growth of the algorithm; the <span class="math inline">\(n^2\)</span> will come to dominate the growth rate as <span class="math inline">\(n\)</span> gets bigger.<a href="#fnref1" class="footnote-back">↩</a></p></li>
<li id="fn2"><p>It is for this reason, apart from looping indefinitely, that justifies the <strong>break</strong> condition for the outer loop in Algorithm P1.<a href="#fnref2" class="footnote-back">↩</a></p></li>
<li id="fn3"><p>Bird wrote (&lt;=n) as the filter condition, but this is in error. The simpler <code>(&lt;n)</code> does the job just as well.<a href="#fnref3" class="footnote-back">↩</a></p></li>
<li id="fn4"><p>According to Bird, it is 20% faster than the array-based algorithm.<a href="#fnref4" class="footnote-back">↩</a></p></li>
</ol>
</section>
]]></summary>
</entry>
<entry>
    <title>TexLive 2016 with Docker</title>
    <link href="http://funloop.org/post/2016-08-28-texlive-with-docker.html" />
    <id>http://funloop.org/post/2016-08-28-texlive-with-docker.html</id>
    <published>2016-08-28T00:00:00Z</published>
    <updated>2016-08-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info center">
	<code class="date">2016-08-28</code><a class="history" href="https://github.com/listx/listx_blog/commits/master/post/2016-08-28-texlive-with-docker.org" title="History">*</a>
	<br>
	<a href="/tag/linux.html">linux</a>, <a href="/tag/tex.html">tex</a>, <a href="/tag/docker.html">docker</a>
</div>

<h1 id="motivation">Motivation</h1>
<p>When I first started using TeX, my main OS was Arch Linux. This was fine until I switched to NixOS a couple years ago — I found that NixOS’s packaging of <a href="https://en.wikipedia.org/wiki/TeX_Live">TexLive</a> was not as current as Arch Linux.</p>
<p>This is still the case today.</p>
<p>As much as I love using NixOS, creating a Nix package of a very large project like TexLive is no joke.</p>
<h1 id="enter-docker">Enter Docker</h1>
<p>Containerization makes sense for small, do-one-thing-well services like webservers and such, but it makes even more sense for big, complicated <em>collections</em> of packages like TexLive. There are hundreds (thousands?) of components in TexLive: individual TeX packages, fonts, typesetting engines, etc. Thankfully, Arch Linux maintainers do a great of keeping up with upstream packages, and TexLive is no exception!</p>
<p>I’ve created a <a href="https://github.com/listx/texlive-docker">new Github project</a> (simply called <code>texlive-docker</code>) to house the Dockerfiles I use to create TexLive images — all built on top of Arch Linux as the base image. The project uses <a href="https://travis-ci.org/listx/texlive-docker">TravisCI</a> to upload images to <a href="https://hub.docker.com/r/listx/texlive/tags/">Docker Hub</a>.</p>
<p>Be sure to have a look at the <a href="https://github.com/listx/texlive-docker/blob/master/README.md">README</a> for suggestions on usage.</p>
<h1 id="closing-thoughts">Closing Thoughts</h1>
<p>If you have any suggestions for improvement (please bear in mind that we want to keep the images as simple as possible), please let me know in the Github issue tracker.</p>
<p>Happy TeX-ing!</p>
]]></summary>
</entry>

</feed>
